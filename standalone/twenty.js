/**
 * core-js 2.5.3
 * https://github.com/zloirock/core-js
 * License: http://rock.mit-license.org
 * Â© 2017 Denis Pushkarev
 */
!function(__e, __g, undefined){
'use strict';
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 129);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);
var core = __webpack_require__(18);
var hide = __webpack_require__(13);
var redefine = __webpack_require__(14);
var ctx = __webpack_require__(19);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(3);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 2 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(50)('wks');
var uid = __webpack_require__(35);
var Symbol = __webpack_require__(2).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(1);
var IE8_DOM_DEFINE = __webpack_require__(95);
var toPrimitive = __webpack_require__(22);
var dP = Object.defineProperty;

exports.f = __webpack_require__(7) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(4)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(24);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(23);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(47);
var defined = __webpack_require__(23);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 12 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(6);
var createDesc = __webpack_require__(31);
module.exports = __webpack_require__(7) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);
var hide = __webpack_require__(13);
var has = __webpack_require__(12);
var SRC = __webpack_require__(35)('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__(18).inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(48);
var createDesc = __webpack_require__(31);
var toIObject = __webpack_require__(11);
var toPrimitive = __webpack_require__(22);
var has = __webpack_require__(12);
var IE8_DOM_DEFINE = __webpack_require__(95);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(7) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(12);
var toObject = __webpack_require__(9);
var IE_PROTO = __webpack_require__(68)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var fails = __webpack_require__(4);
var defined = __webpack_require__(23);
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};


/***/ }),
/* 18 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.5.3' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(10);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 20 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(4);

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(3);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 23 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 24 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(0);
var core = __webpack_require__(18);
var fails = __webpack_require__(4);
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(19);
var IObject = __webpack_require__(47);
var toObject = __webpack_require__(9);
var toLength = __webpack_require__(8);
var asc = __webpack_require__(84);
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(97);
var enumBugKeys = __webpack_require__(69);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(1);
var dPs = __webpack_require__(98);
var enumBugKeys = __webpack_require__(69);
var IE_PROTO = __webpack_require__(68)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(66)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(70).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

if (__webpack_require__(7)) {
  var LIBRARY = __webpack_require__(36);
  var global = __webpack_require__(2);
  var fails = __webpack_require__(4);
  var $export = __webpack_require__(0);
  var $typed = __webpack_require__(62);
  var $buffer = __webpack_require__(92);
  var ctx = __webpack_require__(19);
  var anInstance = __webpack_require__(42);
  var propertyDesc = __webpack_require__(31);
  var hide = __webpack_require__(13);
  var redefineAll = __webpack_require__(43);
  var toInteger = __webpack_require__(24);
  var toLength = __webpack_require__(8);
  var toIndex = __webpack_require__(118);
  var toAbsoluteIndex = __webpack_require__(37);
  var toPrimitive = __webpack_require__(22);
  var has = __webpack_require__(12);
  var classof = __webpack_require__(39);
  var isObject = __webpack_require__(3);
  var toObject = __webpack_require__(9);
  var isArrayIter = __webpack_require__(82);
  var create = __webpack_require__(28);
  var getPrototypeOf = __webpack_require__(16);
  var gOPN = __webpack_require__(38).f;
  var getIterFn = __webpack_require__(49);
  var uid = __webpack_require__(35);
  var wks = __webpack_require__(5);
  var createArrayMethod = __webpack_require__(26);
  var createArrayIncludes = __webpack_require__(51);
  var speciesConstructor = __webpack_require__(60);
  var ArrayIterators = __webpack_require__(86);
  var Iterators = __webpack_require__(40);
  var $iterDetect = __webpack_require__(57);
  var setSpecies = __webpack_require__(41);
  var arrayFill = __webpack_require__(85);
  var arrayCopyWithin = __webpack_require__(109);
  var $DP = __webpack_require__(6);
  var $GOPD = __webpack_require__(15);
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

var Map = __webpack_require__(113);
var $export = __webpack_require__(0);
var shared = __webpack_require__(50)('metadata');
var store = shared.store || (shared.store = new (__webpack_require__(116))());

var getOrCreateMetadataMap = function (target, targetKey, create) {
  var targetMetadata = store.get(target);
  if (!targetMetadata) {
    if (!create) return undefined;
    store.set(target, targetMetadata = new Map());
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if (!keyMetadata) {
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map());
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function (target, targetKey) {
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
  return keys;
};
var toMetaKey = function (it) {
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function (O) {
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};


/***/ }),
/* 31 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(35)('meta');
var isObject = __webpack_require__(3);
var has = __webpack_require__(12);
var setDesc = __webpack_require__(6).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(4)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__(5)('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(13)(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(19);
var call = __webpack_require__(107);
var isArrayIter = __webpack_require__(82);
var anObject = __webpack_require__(1);
var toLength = __webpack_require__(8);
var getIterFn = __webpack_require__(49);
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),
/* 35 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 36 */
/***/ (function(module, exports) {

module.exports = false;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(24);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(97);
var hiddenKeys = __webpack_require__(69).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(20);
var TAG = __webpack_require__(5)('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(2);
var dP = __webpack_require__(6);
var DESCRIPTORS = __webpack_require__(7);
var SPECIES = __webpack_require__(5)('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),
/* 42 */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(14);
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(6).f;
var has = __webpack_require__(12);
var TAG = __webpack_require__(5)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var defined = __webpack_require__(23);
var fails = __webpack_require__(4);
var spaces = __webpack_require__(75);
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(3);
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(20);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 48 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(39);
var ITERATOR = __webpack_require__(5)('iterator');
var Iterators = __webpack_require__(40);
module.exports = __webpack_require__(18).getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});
module.exports = function (key) {
  return store[key] || (store[key] = {});
};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(11);
var toLength = __webpack_require__(8);
var toAbsoluteIndex = __webpack_require__(37);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 52 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(20);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.8 IsRegExp(argument)
var isObject = __webpack_require__(3);
var cof = __webpack_require__(20);
var MATCH = __webpack_require__(5)('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(36);
var $export = __webpack_require__(0);
var redefine = __webpack_require__(14);
var hide = __webpack_require__(13);
var has = __webpack_require__(12);
var Iterators = __webpack_require__(40);
var $iterCreate = __webpack_require__(56);
var setToStringTag = __webpack_require__(44);
var getPrototypeOf = __webpack_require__(16);
var ITERATOR = __webpack_require__(5)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = (!BUGGY && $native) || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(28);
var descriptor = __webpack_require__(31);
var setToStringTag = __webpack_require__(44);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(13)(IteratorPrototype, __webpack_require__(5)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(5)('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.2.5.3 get RegExp.prototype.flags
var anObject = __webpack_require__(1);
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var hide = __webpack_require__(13);
var redefine = __webpack_require__(14);
var fails = __webpack_require__(4);
var defined = __webpack_require__(23);
var wks = __webpack_require__(5);

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);
  var fns = exec(defined, SYMBOL, ''[KEY]);
  var strfn = fns[0];
  var rxfn = fns[1];
  if (fails(function () {
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  })) {
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(1);
var aFunction = __webpack_require__(10);
var SPECIES = __webpack_require__(5)('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(2);
var $export = __webpack_require__(0);
var redefine = __webpack_require__(14);
var redefineAll = __webpack_require__(43);
var meta = __webpack_require__(32);
var forOf = __webpack_require__(34);
var anInstance = __webpack_require__(42);
var isObject = __webpack_require__(3);
var fails = __webpack_require__(4);
var $iterDetect = __webpack_require__(57);
var setToStringTag = __webpack_require__(44);
var inheritIfRequired = __webpack_require__(74);

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);
var hide = __webpack_require__(13);
var uid = __webpack_require__(35);
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Forced replacement prototype accessors methods
module.exports = __webpack_require__(36) || !__webpack_require__(4)(function () {
  var K = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, K, function () { /* empty */ });
  delete __webpack_require__(2)[K];
});


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(0);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = new Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(0);
var aFunction = __webpack_require__(10);
var ctx = __webpack_require__(19);
var forOf = __webpack_require__(34);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(3);
var document = __webpack_require__(2).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);
var core = __webpack_require__(18);
var LIBRARY = __webpack_require__(36);
var wksExt = __webpack_require__(96);
var defineProperty = __webpack_require__(6).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(50)('keys');
var uid = __webpack_require__(35);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 69 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(2).document;
module.exports = document && document.documentElement;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = __webpack_require__(27);
var gOPS = __webpack_require__(52);
var pIE = __webpack_require__(48);
var toObject = __webpack_require__(9);
var IObject = __webpack_require__(47);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(4)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(3);
var anObject = __webpack_require__(1);
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(19)(Function.call, __webpack_require__(15).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),
/* 73 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(3);
var setPrototypeOf = __webpack_require__(72).set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};


/***/ }),
/* 75 */
/***/ (function(module, exports) {

module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toInteger = __webpack_require__(24);
var defined = __webpack_require__(23);

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};


/***/ }),
/* 77 */
/***/ (function(module, exports) {

// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};


/***/ }),
/* 78 */
/***/ (function(module, exports) {

// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(24);
var defined = __webpack_require__(23);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

// helper for String#{startsWith, endsWith, includes}
var isRegExp = __webpack_require__(54);
var defined = __webpack_require__(23);

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

var MATCH = __webpack_require__(5)('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(40);
var ITERATOR = __webpack_require__(5)('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(6);
var createDesc = __webpack_require__(31);

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(213);

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

var toObject = __webpack_require__(9);
var toAbsoluteIndex = __webpack_require__(37);
var toLength = __webpack_require__(8);
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(33);
var step = __webpack_require__(87);
var Iterators = __webpack_require__(40);
var toIObject = __webpack_require__(11);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(55)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 87 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(19);
var invoke = __webpack_require__(73);
var html = __webpack_require__(70);
var cel = __webpack_require__(66);
var global = __webpack_require__(2);
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(20)(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);
var macrotask = __webpack_require__(88).set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(20)(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    var promise = Promise.resolve();
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(10);

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

// all object keys, includes non-enumerable and symbols
var gOPN = __webpack_require__(38);
var gOPS = __webpack_require__(52);
var anObject = __webpack_require__(1);
var Reflect = __webpack_require__(2).Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(2);
var DESCRIPTORS = __webpack_require__(7);
var LIBRARY = __webpack_require__(36);
var $typed = __webpack_require__(62);
var hide = __webpack_require__(13);
var redefineAll = __webpack_require__(43);
var fails = __webpack_require__(4);
var anInstance = __webpack_require__(42);
var toInteger = __webpack_require__(24);
var toLength = __webpack_require__(8);
var toIndex = __webpack_require__(118);
var gOPN = __webpack_require__(38).f;
var dP = __webpack_require__(6).f;
var arrayFill = __webpack_require__(85);
var setToStringTag = __webpack_require__(44);
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';


/***/ }),
/* 94 */
/***/ (function(module, exports) {

module.exports = function (regExp, replace) {
  var replacer = replace === Object(replace) ? function (part) {
    return replace[part];
  } : replace;
  return function (it) {
    return String(it).replace(regExp, replacer);
  };
};


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(7) && !__webpack_require__(4)(function () {
  return Object.defineProperty(__webpack_require__(66)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(5);


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(12);
var toIObject = __webpack_require__(11);
var arrayIndexOf = __webpack_require__(51)(false);
var IE_PROTO = __webpack_require__(68)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(6);
var anObject = __webpack_require__(1);
var getKeys = __webpack_require__(27);

module.exports = __webpack_require__(7) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(11);
var gOPN = __webpack_require__(38).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aFunction = __webpack_require__(10);
var isObject = __webpack_require__(3);
var invoke = __webpack_require__(73);
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

var cof = __webpack_require__(20);
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__(3);
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

var $parseFloat = __webpack_require__(2).parseFloat;
var $trim = __webpack_require__(45).trim;

module.exports = 1 / $parseFloat(__webpack_require__(75) + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

var $parseInt = __webpack_require__(2).parseInt;
var $trim = __webpack_require__(45).trim;
var ws = __webpack_require__(75);
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;


/***/ }),
/* 105 */
/***/ (function(module, exports) {

// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var sign = __webpack_require__(77);
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(1);
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__(10);
var toObject = __webpack_require__(9);
var IObject = __webpack_require__(47);
var toLength = __webpack_require__(8);

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

var toObject = __webpack_require__(9);
var toAbsoluteIndex = __webpack_require__(37);
var toLength = __webpack_require__(8);

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
if (__webpack_require__(7) && /./g.flags != 'g') __webpack_require__(6).f(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__(58)
});


/***/ }),
/* 111 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(1);
var isObject = __webpack_require__(3);
var newPromiseCapability = __webpack_require__(90);

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(114);
var validate = __webpack_require__(46);
var MAP = 'Map';

// 23.1 Map Objects
module.exports = __webpack_require__(61)(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP = __webpack_require__(6).f;
var create = __webpack_require__(28);
var redefineAll = __webpack_require__(43);
var ctx = __webpack_require__(19);
var anInstance = __webpack_require__(42);
var forOf = __webpack_require__(34);
var $iterDefine = __webpack_require__(55);
var step = __webpack_require__(87);
var setSpecies = __webpack_require__(41);
var DESCRIPTORS = __webpack_require__(7);
var fastKey = __webpack_require__(32).fastKey;
var validate = __webpack_require__(46);
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(114);
var validate = __webpack_require__(46);
var SET = 'Set';

// 23.2 Set Objects
module.exports = __webpack_require__(61)(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var each = __webpack_require__(26)(0);
var redefine = __webpack_require__(14);
var meta = __webpack_require__(32);
var assign = __webpack_require__(71);
var weak = __webpack_require__(117);
var isObject = __webpack_require__(3);
var fails = __webpack_require__(4);
var validate = __webpack_require__(46);
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var tmp = {};
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = __webpack_require__(61)(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefineAll = __webpack_require__(43);
var getWeak = __webpack_require__(32).getWeak;
var anObject = __webpack_require__(1);
var isObject = __webpack_require__(3);
var anInstance = __webpack_require__(42);
var forOf = __webpack_require__(34);
var createArrayMethod = __webpack_require__(26);
var $has = __webpack_require__(12);
var validate = __webpack_require__(46);
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = __webpack_require__(24);
var toLength = __webpack_require__(8);
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = __webpack_require__(53);
var isObject = __webpack_require__(3);
var toLength = __webpack_require__(8);
var ctx = __webpack_require__(19);
var IS_CONCAT_SPREADABLE = __webpack_require__(5)('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-string-pad-start-end
var toLength = __webpack_require__(8);
var repeat = __webpack_require__(76);
var defined = __webpack_require__(23);

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

var getKeys = __webpack_require__(27);
var toIObject = __webpack_require__(11);
var isEnum = __webpack_require__(48).f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = __webpack_require__(39);
var from = __webpack_require__(123);
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

var forOf = __webpack_require__(34);

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};


/***/ }),
/* 124 */
/***/ (function(module, exports) {

// https://rwaldron.github.io/proposal-math-extensions/
module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
  if (
    arguments.length === 0
      // eslint-disable-next-line no-self-compare
      || x != x
      // eslint-disable-next-line no-self-compare
      || inLow != inLow
      // eslint-disable-next-line no-self-compare
      || inHigh != inHigh
      // eslint-disable-next-line no-self-compare
      || outLow != outLow
      // eslint-disable-next-line no-self-compare
      || outHigh != outHigh
  ) return NaN;
  if (x === Infinity || x === -Infinity) return x;
  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
};


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(39);
var ITERATOR = __webpack_require__(5)('iterator');
var Iterators = __webpack_require__(40);
module.exports = __webpack_require__(18).isIterable = function (it) {
  var O = Object(it);
  return O[ITERATOR] !== undefined
    || '@@iterator' in O
    // eslint-disable-next-line no-prototype-builtins
    || Iterators.hasOwnProperty(classof(O));
};


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var path = __webpack_require__(127);
var invoke = __webpack_require__(73);
var aFunction = __webpack_require__(10);
module.exports = function (/* ...pargs */) {
  var fn = aFunction(this);
  var length = arguments.length;
  var pargs = new Array(length);
  var i = 0;
  var _ = path._;
  var holder = false;
  while (length > i) if ((pargs[i] = arguments[i++]) === _) holder = true;
  return function (/* ...args */) {
    var that = this;
    var aLen = arguments.length;
    var j = 0;
    var k = 0;
    var args;
    if (!holder && !aLen) return invoke(fn, pargs, that);
    args = pargs.slice();
    if (holder) for (;length > j; j++) if (args[j] === _) args[j] = arguments[k++];
    while (aLen > k) args.push(arguments[k++]);
    return invoke(fn, args, that);
  };
};


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(2);


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(6);
var gOPD = __webpack_require__(15);
var ownKeys = __webpack_require__(91);
var toIObject = __webpack_require__(11);

module.exports = function define(target, mixin) {
  var keys = ownKeys(toIObject(mixin));
  var length = keys.length;
  var i = 0;
  var key;
  while (length > i) dP.f(target, key = keys[i++], gOPD.f(mixin, key));
  return target;
};


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(130);
__webpack_require__(132);
__webpack_require__(133);
__webpack_require__(134);
__webpack_require__(135);
__webpack_require__(136);
__webpack_require__(137);
__webpack_require__(138);
__webpack_require__(139);
__webpack_require__(140);
__webpack_require__(141);
__webpack_require__(142);
__webpack_require__(143);
__webpack_require__(144);
__webpack_require__(145);
__webpack_require__(146);
__webpack_require__(148);
__webpack_require__(149);
__webpack_require__(150);
__webpack_require__(151);
__webpack_require__(152);
__webpack_require__(153);
__webpack_require__(154);
__webpack_require__(155);
__webpack_require__(156);
__webpack_require__(157);
__webpack_require__(158);
__webpack_require__(159);
__webpack_require__(160);
__webpack_require__(161);
__webpack_require__(162);
__webpack_require__(163);
__webpack_require__(164);
__webpack_require__(165);
__webpack_require__(166);
__webpack_require__(167);
__webpack_require__(168);
__webpack_require__(169);
__webpack_require__(170);
__webpack_require__(171);
__webpack_require__(172);
__webpack_require__(173);
__webpack_require__(174);
__webpack_require__(175);
__webpack_require__(176);
__webpack_require__(177);
__webpack_require__(178);
__webpack_require__(179);
__webpack_require__(180);
__webpack_require__(181);
__webpack_require__(182);
__webpack_require__(183);
__webpack_require__(184);
__webpack_require__(185);
__webpack_require__(186);
__webpack_require__(187);
__webpack_require__(188);
__webpack_require__(189);
__webpack_require__(190);
__webpack_require__(191);
__webpack_require__(192);
__webpack_require__(193);
__webpack_require__(194);
__webpack_require__(195);
__webpack_require__(196);
__webpack_require__(197);
__webpack_require__(198);
__webpack_require__(199);
__webpack_require__(200);
__webpack_require__(201);
__webpack_require__(202);
__webpack_require__(203);
__webpack_require__(204);
__webpack_require__(205);
__webpack_require__(206);
__webpack_require__(207);
__webpack_require__(208);
__webpack_require__(209);
__webpack_require__(210);
__webpack_require__(211);
__webpack_require__(212);
__webpack_require__(214);
__webpack_require__(215);
__webpack_require__(216);
__webpack_require__(217);
__webpack_require__(218);
__webpack_require__(219);
__webpack_require__(220);
__webpack_require__(221);
__webpack_require__(222);
__webpack_require__(223);
__webpack_require__(224);
__webpack_require__(225);
__webpack_require__(86);
__webpack_require__(226);
__webpack_require__(227);
__webpack_require__(228);
__webpack_require__(110);
__webpack_require__(229);
__webpack_require__(230);
__webpack_require__(231);
__webpack_require__(232);
__webpack_require__(233);
__webpack_require__(113);
__webpack_require__(115);
__webpack_require__(116);
__webpack_require__(234);
__webpack_require__(235);
__webpack_require__(236);
__webpack_require__(237);
__webpack_require__(238);
__webpack_require__(239);
__webpack_require__(240);
__webpack_require__(241);
__webpack_require__(242);
__webpack_require__(243);
__webpack_require__(244);
__webpack_require__(245);
__webpack_require__(246);
__webpack_require__(247);
__webpack_require__(248);
__webpack_require__(249);
__webpack_require__(250);
__webpack_require__(251);
__webpack_require__(253);
__webpack_require__(254);
__webpack_require__(256);
__webpack_require__(257);
__webpack_require__(258);
__webpack_require__(259);
__webpack_require__(260);
__webpack_require__(261);
__webpack_require__(262);
__webpack_require__(263);
__webpack_require__(264);
__webpack_require__(265);
__webpack_require__(266);
__webpack_require__(267);
__webpack_require__(268);
__webpack_require__(269);
__webpack_require__(270);
__webpack_require__(271);
__webpack_require__(272);
__webpack_require__(273);
__webpack_require__(274);
__webpack_require__(275);
__webpack_require__(276);
__webpack_require__(277);
__webpack_require__(278);
__webpack_require__(279);
__webpack_require__(280);
__webpack_require__(281);
__webpack_require__(282);
__webpack_require__(283);
__webpack_require__(284);
__webpack_require__(285);
__webpack_require__(286);
__webpack_require__(287);
__webpack_require__(288);
__webpack_require__(289);
__webpack_require__(290);
__webpack_require__(291);
__webpack_require__(292);
__webpack_require__(293);
__webpack_require__(294);
__webpack_require__(295);
__webpack_require__(296);
__webpack_require__(297);
__webpack_require__(298);
__webpack_require__(299);
__webpack_require__(300);
__webpack_require__(301);
__webpack_require__(302);
__webpack_require__(303);
__webpack_require__(304);
__webpack_require__(305);
__webpack_require__(306);
__webpack_require__(307);
__webpack_require__(308);
__webpack_require__(309);
__webpack_require__(310);
__webpack_require__(311);
__webpack_require__(312);
__webpack_require__(313);
__webpack_require__(314);
__webpack_require__(315);
__webpack_require__(316);
__webpack_require__(317);
__webpack_require__(318);
__webpack_require__(319);
__webpack_require__(320);
__webpack_require__(321);
__webpack_require__(322);
__webpack_require__(323);
__webpack_require__(324);
__webpack_require__(325);
__webpack_require__(326);
__webpack_require__(49);
__webpack_require__(328);
__webpack_require__(125);
__webpack_require__(329);
__webpack_require__(330);
__webpack_require__(331);
__webpack_require__(332);
__webpack_require__(333);
__webpack_require__(334);
__webpack_require__(335);
__webpack_require__(336);
__webpack_require__(337);
module.exports = __webpack_require__(338);


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(2);
var has = __webpack_require__(12);
var DESCRIPTORS = __webpack_require__(7);
var $export = __webpack_require__(0);
var redefine = __webpack_require__(14);
var META = __webpack_require__(32).KEY;
var $fails = __webpack_require__(4);
var shared = __webpack_require__(50);
var setToStringTag = __webpack_require__(44);
var uid = __webpack_require__(35);
var wks = __webpack_require__(5);
var wksExt = __webpack_require__(96);
var wksDefine = __webpack_require__(67);
var enumKeys = __webpack_require__(131);
var isArray = __webpack_require__(53);
var anObject = __webpack_require__(1);
var isObject = __webpack_require__(3);
var toIObject = __webpack_require__(11);
var toPrimitive = __webpack_require__(22);
var createDesc = __webpack_require__(31);
var _create = __webpack_require__(28);
var gOPNExt = __webpack_require__(99);
var $GOPD = __webpack_require__(15);
var $DP = __webpack_require__(6);
var $keys = __webpack_require__(27);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(38).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(48).f = $propertyIsEnumerable;
  __webpack_require__(52).f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(36)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(13)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(27);
var gOPS = __webpack_require__(52);
var pIE = __webpack_require__(48);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(7), 'Object', { defineProperty: __webpack_require__(6).f });


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !__webpack_require__(7), 'Object', { defineProperties: __webpack_require__(98) });


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = __webpack_require__(11);
var $getOwnPropertyDescriptor = __webpack_require__(15).f;

__webpack_require__(25)('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(28) });


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__(9);
var $getPrototypeOf = __webpack_require__(16);

__webpack_require__(25)('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(9);
var $keys = __webpack_require__(27);

__webpack_require__(25)('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 Object.getOwnPropertyNames(O)
__webpack_require__(25)('getOwnPropertyNames', function () {
  return __webpack_require__(99).f;
});


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(3);
var meta = __webpack_require__(32).onFreeze;

__webpack_require__(25)('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.17 Object.seal(O)
var isObject = __webpack_require__(3);
var meta = __webpack_require__(32).onFreeze;

__webpack_require__(25)('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.15 Object.preventExtensions(O)
var isObject = __webpack_require__(3);
var meta = __webpack_require__(32).onFreeze;

__webpack_require__(25)('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.12 Object.isFrozen(O)
var isObject = __webpack_require__(3);

__webpack_require__(25)('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.13 Object.isSealed(O)
var isObject = __webpack_require__(3);

__webpack_require__(25)('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.11 Object.isExtensible(O)
var isObject = __webpack_require__(3);

__webpack_require__(25)('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(0);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(71) });


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.10 Object.is(value1, value2)
var $export = __webpack_require__(0);
$export($export.S, 'Object', { is: __webpack_require__(147) });


/***/ }),
/* 147 */
/***/ (function(module, exports) {

// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(0);
$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(72).set });


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.3.6 Object.prototype.toString()
var classof = __webpack_require__(39);
var test = {};
test[__webpack_require__(5)('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  __webpack_require__(14)(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = __webpack_require__(0);

$export($export.P, 'Function', { bind: __webpack_require__(100) });


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(6).f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || __webpack_require__(7) && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isObject = __webpack_require__(3);
var getPrototypeOf = __webpack_require__(16);
var HAS_INSTANCE = __webpack_require__(5)('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(6).f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(2);
var has = __webpack_require__(12);
var cof = __webpack_require__(20);
var inheritIfRequired = __webpack_require__(74);
var toPrimitive = __webpack_require__(22);
var fails = __webpack_require__(4);
var gOPN = __webpack_require__(38).f;
var gOPD = __webpack_require__(15).f;
var dP = __webpack_require__(6).f;
var $trim = __webpack_require__(45).trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(__webpack_require__(28)(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = __webpack_require__(7) ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  __webpack_require__(14)(global, NUMBER, $Number);
}


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toInteger = __webpack_require__(24);
var aNumberValue = __webpack_require__(101);
var repeat = __webpack_require__(76);
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !__webpack_require__(4)(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $fails = __webpack_require__(4);
var aNumberValue = __webpack_require__(101);
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.1 Number.EPSILON
var $export = __webpack_require__(0);

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.2 Number.isFinite(number)
var $export = __webpack_require__(0);
var _isFinite = __webpack_require__(2).isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__(0);

$export($export.S, 'Number', { isInteger: __webpack_require__(102) });


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.4 Number.isNaN(number)
var $export = __webpack_require__(0);

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.5 Number.isSafeInteger(number)
var $export = __webpack_require__(0);
var isInteger = __webpack_require__(102);
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = __webpack_require__(0);

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = __webpack_require__(0);

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseFloat = __webpack_require__(103);
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseInt = __webpack_require__(104);
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseInt = __webpack_require__(104);
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseFloat = __webpack_require__(103);
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.3 Math.acosh(x)
var $export = __webpack_require__(0);
var log1p = __webpack_require__(105);
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.5 Math.asinh(x)
var $export = __webpack_require__(0);
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.7 Math.atanh(x)
var $export = __webpack_require__(0);
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.9 Math.cbrt(x)
var $export = __webpack_require__(0);
var sign = __webpack_require__(77);

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.11 Math.clz32(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.12 Math.cosh(x)
var $export = __webpack_require__(0);
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.14 Math.expm1(x)
var $export = __webpack_require__(0);
var $expm1 = __webpack_require__(78);

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', { fround: __webpack_require__(106) });


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.17 Math.hypot([value1[, value2[, â¦ ]]])
var $export = __webpack_require__(0);
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.18 Math.imul(x, y)
var $export = __webpack_require__(0);
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * __webpack_require__(4)(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.21 Math.log10(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.20 Math.log1p(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', { log1p: __webpack_require__(105) });


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.22 Math.log2(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.28 Math.sign(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', { sign: __webpack_require__(77) });


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.30 Math.sinh(x)
var $export = __webpack_require__(0);
var expm1 = __webpack_require__(78);
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * __webpack_require__(4)(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.33 Math.tanh(x)
var $export = __webpack_require__(0);
var expm1 = __webpack_require__(78);
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.34 Math.trunc(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var toAbsoluteIndex = __webpack_require__(37);
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var toIObject = __webpack_require__(11);
var toLength = __webpack_require__(8);

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.1.3.25 String.prototype.trim()
__webpack_require__(45)('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $at = __webpack_require__(79)(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

var $export = __webpack_require__(0);
var toLength = __webpack_require__(8);
var context = __webpack_require__(80);
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * __webpack_require__(81)(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.7 String.prototype.includes(searchString, position = 0)

var $export = __webpack_require__(0);
var context = __webpack_require__(80);
var INCLUDES = 'includes';

$export($export.P + $export.F * __webpack_require__(81)(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: __webpack_require__(76)
});


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

var $export = __webpack_require__(0);
var toLength = __webpack_require__(8);
var context = __webpack_require__(80);
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * __webpack_require__(81)(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(79)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(55)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.2 String.prototype.anchor(name)
__webpack_require__(17)('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.3 String.prototype.big()
__webpack_require__(17)('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.4 String.prototype.blink()
__webpack_require__(17)('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.5 String.prototype.bold()
__webpack_require__(17)('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.6 String.prototype.fixed()
__webpack_require__(17)('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.7 String.prototype.fontcolor(color)
__webpack_require__(17)('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.8 String.prototype.fontsize(size)
__webpack_require__(17)('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.9 String.prototype.italics()
__webpack_require__(17)('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.10 String.prototype.link(url)
__webpack_require__(17)('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.11 String.prototype.small()
__webpack_require__(17)('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.12 String.prototype.strike()
__webpack_require__(17)('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.13 String.prototype.sub()
__webpack_require__(17)('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.14 String.prototype.sup()
__webpack_require__(17)('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = __webpack_require__(0);

$export($export.S, 'Array', { isArray: __webpack_require__(53) });


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx = __webpack_require__(19);
var $export = __webpack_require__(0);
var toObject = __webpack_require__(9);
var call = __webpack_require__(107);
var isArrayIter = __webpack_require__(82);
var toLength = __webpack_require__(8);
var createProperty = __webpack_require__(83);
var getIterFn = __webpack_require__(49);

$export($export.S + $export.F * !__webpack_require__(57)(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var createProperty = __webpack_require__(83);

// WebKit Array.of isn't generic
$export($export.S + $export.F * __webpack_require__(4)(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.13 Array.prototype.join(separator)
var $export = __webpack_require__(0);
var toIObject = __webpack_require__(11);
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (__webpack_require__(47) != Object || !__webpack_require__(21)(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var html = __webpack_require__(70);
var cof = __webpack_require__(20);
var toAbsoluteIndex = __webpack_require__(37);
var toLength = __webpack_require__(8);
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * __webpack_require__(4)(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var aFunction = __webpack_require__(10);
var toObject = __webpack_require__(9);
var fails = __webpack_require__(4);
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !__webpack_require__(21)($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $forEach = __webpack_require__(26)(0);
var STRICT = __webpack_require__(21)([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(3);
var isArray = __webpack_require__(53);
var SPECIES = __webpack_require__(5)('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $map = __webpack_require__(26)(1);

$export($export.P + $export.F * !__webpack_require__(21)([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $filter = __webpack_require__(26)(2);

$export($export.P + $export.F * !__webpack_require__(21)([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $some = __webpack_require__(26)(3);

$export($export.P + $export.F * !__webpack_require__(21)([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $every = __webpack_require__(26)(4);

$export($export.P + $export.F * !__webpack_require__(21)([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $reduce = __webpack_require__(108);

$export($export.P + $export.F * !__webpack_require__(21)([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $reduce = __webpack_require__(108);

$export($export.P + $export.F * !__webpack_require__(21)([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $indexOf = __webpack_require__(51)(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(21)($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toIObject = __webpack_require__(11);
var toInteger = __webpack_require__(24);
var toLength = __webpack_require__(8);
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(21)($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = __webpack_require__(0);

$export($export.P, 'Array', { copyWithin: __webpack_require__(109) });

__webpack_require__(33)('copyWithin');


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = __webpack_require__(0);

$export($export.P, 'Array', { fill: __webpack_require__(85) });

__webpack_require__(33)('fill');


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = __webpack_require__(0);
var $find = __webpack_require__(26)(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(33)(KEY);


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = __webpack_require__(0);
var $find = __webpack_require__(26)(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(33)(KEY);


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(41)('Array');


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);
var inheritIfRequired = __webpack_require__(74);
var dP = __webpack_require__(6).f;
var gOPN = __webpack_require__(38).f;
var isRegExp = __webpack_require__(54);
var $flags = __webpack_require__(58);
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (__webpack_require__(7) && (!CORRECT_NEW || __webpack_require__(4)(function () {
  re2[__webpack_require__(5)('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  __webpack_require__(14)(global, 'RegExp', $RegExp);
}

__webpack_require__(41)('RegExp');


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(110);
var anObject = __webpack_require__(1);
var $flags = __webpack_require__(58);
var DESCRIPTORS = __webpack_require__(7);
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  __webpack_require__(14)(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (__webpack_require__(4)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

// @@match logic
__webpack_require__(59)('match', 1, function (defined, MATCH, $match) {
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

// @@replace logic
__webpack_require__(59)('replace', 2, function (defined, REPLACE, $replace) {
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue) {
    'use strict';
    var O = defined(this);
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

// @@search logic
__webpack_require__(59)('search', 1, function (defined, SEARCH, $search) {
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

// @@split logic
__webpack_require__(59)('split', 2, function (defined, SPLIT, $split) {
  'use strict';
  var isRegExp = __webpack_require__(54);
  var _split = $split;
  var $push = [].push;
  var $SPLIT = 'split';
  var LENGTH = 'length';
  var LAST_INDEX = 'lastIndex';
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while (match = separatorCopy.exec(string)) {
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          // eslint-disable-next-line no-loop-func
          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
          });
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    $split = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit) {
    var O = defined(this);
    var fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(36);
var global = __webpack_require__(2);
var ctx = __webpack_require__(19);
var classof = __webpack_require__(39);
var $export = __webpack_require__(0);
var isObject = __webpack_require__(3);
var aFunction = __webpack_require__(10);
var anInstance = __webpack_require__(42);
var forOf = __webpack_require__(34);
var speciesConstructor = __webpack_require__(60);
var task = __webpack_require__(88).set;
var microtask = __webpack_require__(89)();
var newPromiseCapabilityModule = __webpack_require__(90);
var perform = __webpack_require__(111);
var promiseResolve = __webpack_require__(112);
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(5)('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value);
            if (domain) domain.exit();
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(43)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(44)($Promise, PROMISE);
__webpack_require__(41)(PROMISE);
Wrapper = __webpack_require__(18)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(57)(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var weak = __webpack_require__(117);
var validate = __webpack_require__(46);
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
__webpack_require__(61)(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = __webpack_require__(0);
var aFunction = __webpack_require__(10);
var anObject = __webpack_require__(1);
var rApply = (__webpack_require__(2).Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !__webpack_require__(4)(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = __webpack_require__(0);
var create = __webpack_require__(28);
var aFunction = __webpack_require__(10);
var anObject = __webpack_require__(1);
var isObject = __webpack_require__(3);
var fails = __webpack_require__(4);
var bind = __webpack_require__(100);
var rConstruct = (__webpack_require__(2).Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = __webpack_require__(6);
var $export = __webpack_require__(0);
var anObject = __webpack_require__(1);
var toPrimitive = __webpack_require__(22);

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * __webpack_require__(4)(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = __webpack_require__(0);
var gOPD = __webpack_require__(15).f;
var anObject = __webpack_require__(1);

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 26.1.5 Reflect.enumerate(target)
var $export = __webpack_require__(0);
var anObject = __webpack_require__(1);
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
__webpack_require__(56)(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = __webpack_require__(15);
var getPrototypeOf = __webpack_require__(16);
var has = __webpack_require__(12);
var $export = __webpack_require__(0);
var isObject = __webpack_require__(3);
var anObject = __webpack_require__(1);

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = __webpack_require__(15);
var $export = __webpack_require__(0);
var anObject = __webpack_require__(1);

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.8 Reflect.getPrototypeOf(target)
var $export = __webpack_require__(0);
var getProto = __webpack_require__(16);
var anObject = __webpack_require__(1);

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.9 Reflect.has(target, propertyKey)
var $export = __webpack_require__(0);

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.10 Reflect.isExtensible(target)
var $export = __webpack_require__(0);
var anObject = __webpack_require__(1);
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.11 Reflect.ownKeys(target)
var $export = __webpack_require__(0);

$export($export.S, 'Reflect', { ownKeys: __webpack_require__(91) });


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.12 Reflect.preventExtensions(target)
var $export = __webpack_require__(0);
var anObject = __webpack_require__(1);
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = __webpack_require__(6);
var gOPD = __webpack_require__(15);
var getPrototypeOf = __webpack_require__(16);
var has = __webpack_require__(12);
var $export = __webpack_require__(0);
var createDesc = __webpack_require__(31);
var anObject = __webpack_require__(1);
var isObject = __webpack_require__(3);

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
    existingDescriptor.value = V;
    dP.f(receiver, propertyKey, existingDescriptor);
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = __webpack_require__(0);
var setProto = __webpack_require__(72);

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = __webpack_require__(0);

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(9);
var toPrimitive = __webpack_require__(22);

$export($export.P + $export.F * __webpack_require__(4)(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = __webpack_require__(0);
var toISOString = __webpack_require__(252);

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = __webpack_require__(4);
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;


/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  __webpack_require__(14)(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

var TO_PRIMITIVE = __webpack_require__(5)('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) __webpack_require__(13)(proto, TO_PRIMITIVE, __webpack_require__(255));


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__(1);
var toPrimitive = __webpack_require__(22);
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $typed = __webpack_require__(62);
var buffer = __webpack_require__(92);
var anObject = __webpack_require__(1);
var toAbsoluteIndex = __webpack_require__(37);
var toLength = __webpack_require__(8);
var isObject = __webpack_require__(3);
var ArrayBuffer = __webpack_require__(2).ArrayBuffer;
var speciesConstructor = __webpack_require__(60);
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * __webpack_require__(4)(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var final = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < final) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

__webpack_require__(41)(ARRAY_BUFFER);


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
$export($export.G + $export.W + $export.F * !__webpack_require__(62).ABV, {
  DataView: __webpack_require__(92).DataView
});


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(29)('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(29)('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(29)('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(29)('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(29)('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(29)('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(29)('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(29)('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(29)('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/Array.prototype.includes
var $export = __webpack_require__(0);
var $includes = __webpack_require__(51)(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(33)('includes');


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = __webpack_require__(0);
var flattenIntoArray = __webpack_require__(119);
var toObject = __webpack_require__(9);
var toLength = __webpack_require__(8);
var aFunction = __webpack_require__(10);
var arraySpeciesCreate = __webpack_require__(84);

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

__webpack_require__(33)('flatMap');


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
var $export = __webpack_require__(0);
var flattenIntoArray = __webpack_require__(119);
var toObject = __webpack_require__(9);
var toLength = __webpack_require__(8);
var toInteger = __webpack_require__(24);
var arraySpeciesCreate = __webpack_require__(84);

$export($export.P, 'Array', {
  flatten: function flatten(/* depthArg = 1 */) {
    var depthArg = arguments[0];
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});

__webpack_require__(33)('flatten');


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/mathiasbynens/String.prototype.at
var $export = __webpack_require__(0);
var $at = __webpack_require__(79)(true);

$export($export.P, 'String', {
  at: function at(pos) {
    return $at(this, pos);
  }
});


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(0);
var $pad = __webpack_require__(120);
var userAgent = __webpack_require__(93);

// https://github.com/zloirock/core-js/issues/280
$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(0);
var $pad = __webpack_require__(120);
var userAgent = __webpack_require__(93);

// https://github.com/zloirock/core-js/issues/280
$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(45)('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(45)('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/String.prototype.matchAll/
var $export = __webpack_require__(0);
var defined = __webpack_require__(23);
var toLength = __webpack_require__(8);
var isRegExp = __webpack_require__(54);
var getFlags = __webpack_require__(58);
var RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function (regexp, string) {
  this._r = regexp;
  this._s = string;
};

__webpack_require__(56)($RegExpStringIterator, 'RegExp String', function next() {
  var match = this._r.exec(this._s);
  return { value: match, done: match === null };
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp) {
    defined(this);
    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
    var S = String(this);
    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(67)('asyncIterator');


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(67)('observable');


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = __webpack_require__(0);
var ownKeys = __webpack_require__(91);
var toIObject = __webpack_require__(11);
var gOPD = __webpack_require__(15);
var createProperty = __webpack_require__(83);

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(0);
var $values = __webpack_require__(121)(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(0);
var $entries = __webpack_require__(121)(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(9);
var aFunction = __webpack_require__(10);
var $defineProperty = __webpack_require__(6);

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
__webpack_require__(7) && $export($export.P + __webpack_require__(63), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
  }
});


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(9);
var aFunction = __webpack_require__(10);
var $defineProperty = __webpack_require__(6);

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
__webpack_require__(7) && $export($export.P + __webpack_require__(63), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
  }
});


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(9);
var toPrimitive = __webpack_require__(22);
var getPrototypeOf = __webpack_require__(16);
var getOwnPropertyDescriptor = __webpack_require__(15).f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
__webpack_require__(7) && $export($export.P + __webpack_require__(63), 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = getPrototypeOf(O));
  }
});


/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(9);
var toPrimitive = __webpack_require__(22);
var getPrototypeOf = __webpack_require__(16);
var getOwnPropertyDescriptor = __webpack_require__(15).f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
__webpack_require__(7) && $export($export.P + __webpack_require__(63), 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
    } while (O = getPrototypeOf(O));
  }
});


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(0);

$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(122)('Map') });


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(0);

$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(122)('Set') });


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
__webpack_require__(64)('Map');


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
__webpack_require__(64)('Set');


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
__webpack_require__(64)('WeakMap');


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
__webpack_require__(64)('WeakSet');


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
__webpack_require__(65)('Map');


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
__webpack_require__(65)('Set');


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
__webpack_require__(65)('WeakMap');


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
__webpack_require__(65)('WeakSet');


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(0);

$export($export.G, { global: __webpack_require__(2) });


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(0);

$export($export.S, 'System', { global: __webpack_require__(2) });


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/ljharb/proposal-is-error
var $export = __webpack_require__(0);
var cof = __webpack_require__(20);

$export($export.S, 'Error', {
  isError: function isError(it) {
    return cof(it) === 'Error';
  }
});


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  clamp: function clamp(x, lower, upper) {
    return Math.min(upper, Math.max(lower, x));
  }
});


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);

$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);
var RAD_PER_DEG = 180 / Math.PI;

$export($export.S, 'Math', {
  degrees: function degrees(radians) {
    return radians * RAD_PER_DEG;
  }
});


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);
var scale = __webpack_require__(124);
var fround = __webpack_require__(106);

$export($export.S, 'Math', {
  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
    return fround(scale(x, inLow, inHigh, outLow, outHigh));
  }
});


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});


/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  imulh: function imulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >> 16;
    var v1 = $v >> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);

$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);
var DEG_PER_RAD = Math.PI / 180;

$export($export.S, 'Math', {
  radians: function radians(degrees) {
    return degrees * DEG_PER_RAD;
  }
});


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);

$export($export.S, 'Math', { scale: __webpack_require__(124) });


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  umulh: function umulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >>> 16;
    var v1 = $v >>> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

// http://jfbastien.github.io/papers/Math.signbit.html
var $export = __webpack_require__(0);

$export($export.S, 'Math', { signbit: function signbit(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
} });


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__(0);
var core = __webpack_require__(18);
var global = __webpack_require__(2);
var speciesConstructor = __webpack_require__(60);
var promiseResolve = __webpack_require__(112);

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-promise-try
var $export = __webpack_require__(0);
var newPromiseCapability = __webpack_require__(90);
var perform = __webpack_require__(111);

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });


/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(30);
var anObject = __webpack_require__(1);
var toMetaKey = metadata.key;
var ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
} });


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(30);
var anObject = __webpack_require__(1);
var toMetaKey = metadata.key;
var getOrCreateMetadataMap = metadata.map;
var store = metadata.store;

metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
  if (metadataMap.size) return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
} });


/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(30);
var anObject = __webpack_require__(1);
var getPrototypeOf = __webpack_require__(16);
var ordinaryHasOwnMetadata = metadata.has;
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

var ordinaryGetMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

var Set = __webpack_require__(115);
var from = __webpack_require__(123);
var metadata = __webpack_require__(30);
var anObject = __webpack_require__(1);
var getPrototypeOf = __webpack_require__(16);
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

var ordinaryMetadataKeys = function (O, P) {
  var oKeys = ordinaryOwnMetadataKeys(O, P);
  var parent = getPrototypeOf(O);
  if (parent === null) return oKeys;
  var pKeys = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });


/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(30);
var anObject = __webpack_require__(1);
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(30);
var anObject = __webpack_require__(1);
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(30);
var anObject = __webpack_require__(1);
var getPrototypeOf = __webpack_require__(16);
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

var ordinaryHasMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(30);
var anObject = __webpack_require__(1);
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

var $metadata = __webpack_require__(30);
var anObject = __webpack_require__(1);
var aFunction = __webpack_require__(10);
var toMetaKey = $metadata.key;
var ordinaryDefineOwnMetadata = $metadata.set;

$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
  return function decorator(target, targetKey) {
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
} });


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export = __webpack_require__(0);
var microtask = __webpack_require__(89)();
var process = __webpack_require__(2).process;
var isNode = __webpack_require__(20)(process) == 'process';

$export($export.G, {
  asap: function asap(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/zenparsing/es-observable
var $export = __webpack_require__(0);
var global = __webpack_require__(2);
var core = __webpack_require__(18);
var microtask = __webpack_require__(89)();
var OBSERVABLE = __webpack_require__(5)('observable');
var aFunction = __webpack_require__(10);
var anObject = __webpack_require__(1);
var anInstance = __webpack_require__(42);
var redefineAll = __webpack_require__(43);
var hide = __webpack_require__(13);
var forOf = __webpack_require__(34);
var RETURN = forOf.RETURN;

var getMethod = function (fn) {
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function (subscription) {
  var cleanup = subscription._c;
  if (cleanup) {
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function (subscription) {
  return subscription._o === undefined;
};

var closeSubscription = function (subscription) {
  if (!subscriptionClosed(subscription)) {
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function (observer, subscriber) {
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup = subscriber(observer);
    var subscription = cleanup;
    if (cleanup != null) {
      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch (e) {
    observer.error(e);
    return;
  } if (subscriptionClosed(this)) cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe() { closeSubscription(this); }
});

var SubscriptionObserver = function (subscription) {
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if (m) return m.call(observer, value);
      } catch (e) {
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value) {
    var subscription = this._s;
    if (subscriptionClosed(subscription)) throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if (!m) throw value;
      value = m.call(observer, value);
    } catch (e) {
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch (e) {
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber) {
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer) {
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn) {
    var that = this;
    return new (core.Promise || global.Promise)(function (resolve, reject) {
      aFunction(fn);
      var subscription = that.subscribe({
        next: function (value) {
          try {
            return fn(value);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x) {
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if (method) {
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function (observer) {
        return observable.subscribe(observer);
      });
    }
    return new C(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          try {
            if (forOf(x, false, function (it) {
              observer.next(it);
              if (done) return RETURN;
            }) === RETURN) return;
          } catch (e) {
            if (done) throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  },
  of: function of() {
    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          for (var j = 0; j < items.length; ++j) {
            observer.next(items[j]);
            if (done) return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function () { return this; });

$export($export.G, { Observable: $Observable });

__webpack_require__(41)('Observable');


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $task = __webpack_require__(88);
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

var $iterators = __webpack_require__(86);
var getKeys = __webpack_require__(27);
var redefine = __webpack_require__(14);
var global = __webpack_require__(2);
var hide = __webpack_require__(13);
var Iterators = __webpack_require__(40);
var wks = __webpack_require__(5);
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

// ie9- setTimeout & setInterval additional parameters fix
var global = __webpack_require__(2);
var $export = __webpack_require__(0);
var userAgent = __webpack_require__(93);
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});


/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx = __webpack_require__(19);
var $export = __webpack_require__(0);
var createDesc = __webpack_require__(31);
var assign = __webpack_require__(71);
var create = __webpack_require__(28);
var getPrototypeOf = __webpack_require__(16);
var getKeys = __webpack_require__(27);
var dP = __webpack_require__(6);
var keyOf = __webpack_require__(327);
var aFunction = __webpack_require__(10);
var forOf = __webpack_require__(34);
var isIterable = __webpack_require__(125);
var $iterCreate = __webpack_require__(56);
var step = __webpack_require__(87);
var isObject = __webpack_require__(3);
var toIObject = __webpack_require__(11);
var DESCRIPTORS = __webpack_require__(7);
var has = __webpack_require__(12);

// 0 -> Dict.forEach
// 1 -> Dict.map
// 2 -> Dict.filter
// 3 -> Dict.some
// 4 -> Dict.every
// 5 -> Dict.find
// 6 -> Dict.findKey
// 7 -> Dict.mapPairs
var createDictMethod = function (TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_EVERY = TYPE == 4;
  return function (object, callbackfn, that /* = undefined */) {
    var f = ctx(callbackfn, that, 3);
    var O = toIObject(object);
    var result = IS_MAP || TYPE == 7 || TYPE == 2
          ? new (typeof this == 'function' ? this : Dict)() : undefined;
    var key, val, res;
    for (key in O) if (has(O, key)) {
      val = O[key];
      res = f(val, key, object);
      if (TYPE) {
        if (IS_MAP) result[key] = res;          // map
        else if (res) switch (TYPE) {
          case 2: result[key] = val; break;     // filter
          case 3: return true;                  // some
          case 5: return val;                   // find
          case 6: return key;                   // findKey
          case 7: result[res[0]] = res[1];      // mapPairs
        } else if (IS_EVERY) return false;      // every
      }
    }
    return TYPE == 3 || IS_EVERY ? IS_EVERY : result;
  };
};
var findKey = createDictMethod(6);

var createDictIter = function (kind) {
  return function (it) {
    return new DictIterator(it, kind);
  };
};
var DictIterator = function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._a = getKeys(iterated);   // keys
  this._i = 0;                   // next index
  this._k = kind;                // kind
};
$iterCreate(DictIterator, 'Dict', function () {
  var that = this;
  var O = that._t;
  var keys = that._a;
  var kind = that._k;
  var key;
  do {
    if (that._i >= keys.length) {
      that._t = undefined;
      return step(1);
    }
  } while (!has(O, key = keys[that._i++]));
  if (kind == 'keys') return step(0, key);
  if (kind == 'values') return step(0, O[key]);
  return step(0, [key, O[key]]);
});

function Dict(iterable) {
  var dict = create(null);
  if (iterable != undefined) {
    if (isIterable(iterable)) {
      forOf(iterable, true, function (key, value) {
        dict[key] = value;
      });
    } else assign(dict, iterable);
  }
  return dict;
}
Dict.prototype = null;

function reduce(object, mapfn, init) {
  aFunction(mapfn);
  var O = toIObject(object);
  var keys = getKeys(O);
  var length = keys.length;
  var i = 0;
  var memo, key;
  if (arguments.length < 3) {
    if (!length) throw TypeError('Reduce of empty object with no initial value');
    memo = O[keys[i++]];
  } else memo = Object(init);
  while (length > i) if (has(O, key = keys[i++])) {
    memo = mapfn(memo, O[key], key, object);
  }
  return memo;
}

function includes(object, el) {
  // eslint-disable-next-line no-self-compare
  return (el == el ? keyOf(object, el) : findKey(object, function (it) {
    // eslint-disable-next-line no-self-compare
    return it != it;
  })) !== undefined;
}

function get(object, key) {
  if (has(object, key)) return object[key];
}
function set(object, key, value) {
  if (DESCRIPTORS && key in Object) dP.f(object, key, createDesc(0, value));
  else object[key] = value;
  return object;
}

function isDict(it) {
  return isObject(it) && getPrototypeOf(it) === Dict.prototype;
}

$export($export.G + $export.F, { Dict: Dict });

$export($export.S, 'Dict', {
  keys: createDictIter('keys'),
  values: createDictIter('values'),
  entries: createDictIter('entries'),
  forEach: createDictMethod(0),
  map: createDictMethod(1),
  filter: createDictMethod(2),
  some: createDictMethod(3),
  every: createDictMethod(4),
  find: createDictMethod(5),
  findKey: findKey,
  mapPairs: createDictMethod(7),
  reduce: reduce,
  keyOf: keyOf,
  includes: includes,
  has: has,
  get: get,
  set: set,
  isDict: isDict
});


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

var getKeys = __webpack_require__(27);
var toIObject = __webpack_require__(11);
module.exports = function (object, el) {
  var O = toIObject(object);
  var keys = getKeys(O);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) if (O[key = keys[index++]] === el) return key;
};


/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(1);
var get = __webpack_require__(49);
module.exports = __webpack_require__(18).getIterator = function (it) {
  var iterFn = get(it);
  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};


/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);
var core = __webpack_require__(18);
var $export = __webpack_require__(0);
var partial = __webpack_require__(126);
// https://esdiscuss.org/topic/promise-returning-delay-function
$export($export.G + $export.F, {
  delay: function delay(time) {
    return new (core.Promise || global.Promise)(function (resolve) {
      setTimeout(partial.call(resolve, true), time);
    });
  }
});


/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

var path = __webpack_require__(127);
var $export = __webpack_require__(0);

// Placeholder
__webpack_require__(18)._ = path._ = path._ || {};

$export($export.P + $export.F, 'Function', { part: __webpack_require__(126) });


/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);

$export($export.S + $export.F, 'Object', { isObject: __webpack_require__(3) });


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);

$export($export.S + $export.F, 'Object', { classof: __webpack_require__(39) });


/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var define = __webpack_require__(128);

$export($export.S + $export.F, 'Object', { define: define });


/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var define = __webpack_require__(128);
var create = __webpack_require__(28);

$export($export.S + $export.F, 'Object', {
  make: function (proto, mixin) {
    return define(create(proto), mixin);
  }
});


/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(55)(Number, 'Number', function (iterated) {
  this._l = +iterated;
  this._i = 0;
}, function () {
  var i = this._i++;
  var done = !(i < this._l);
  return { done: done, value: done ? undefined : i };
});


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/benjamingr/RexExp.escape
var $export = __webpack_require__(0);
var $re = __webpack_require__(94)(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });


/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $re = __webpack_require__(94)(/[&<>"']/g, {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&apos;'
});

$export($export.P + $export.F, 'String', { escapeHTML: function escapeHTML() { return $re(this); } });


/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $re = __webpack_require__(94)(/&(?:amp|lt|gt|quot|apos);/g, {
  '&amp;': '&',
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&apos;': "'"
});

$export($export.P + $export.F, 'String', { unescapeHTML: function unescapeHTML() { return $re(this); } });


/***/ })
/******/ ]);
// CommonJS export
if (typeof module != 'undefined' && module.exports) module.exports = __e;
// RequireJS export
else if (typeof define == 'function' && define.amd) define(function () { return __e; });
// Export to global object
else __g.core = __e;
}(1, 1);
/*!
 * jQuery JavaScript Library v1.12.0
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-01-08T19:56Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//"use strict";
var deletedIds = [];

var document = window.document;

var slice = deletedIds.slice;

var concat = deletedIds.concat;

var push = deletedIds.push;

var indexOf = deletedIds.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	version = "1.12.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1, IE<9
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: deletedIds.sort,
	splice: deletedIds.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type( obj ) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {

		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		var realStringObj = obj && obj.toString();
		return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {

			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call( obj, "constructor" ) &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
				return false;
			}
		} catch ( e ) {

			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( !support.ownFirst ) {
			for ( key in obj ) {
				return hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {

			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data ); // jscs:ignore requireDotNotation
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1, IE<9
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( indexOf ) {
				return indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {

				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		while ( j < len ) {
			first[ i++ ] = second[ j++ ];
		}

		// Support: IE<9
		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
		if ( len !== len ) {
			while ( second[ j ] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: function() {
		return +( new Date() );
	},

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

// JSHint would error on this code due to the Symbol not being defined in ES5.
// Defining this global in .jshintrc would create a danger of using the global
// unguarded in another place, it seems safer to just disable JSHint for these
// three lines.
/* jshint ignore: start */
if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = deletedIds[ Symbol.iterator ];
}
/* jshint ignore: end */

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.1
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-10-17
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, nidselect, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
					while ( i-- ) {
						groups[i] = nidselect + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( (parent = document.defaultView) && parent.top !== parent ) {
		// Support: IE 11
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( document.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				return m ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( (oldCache = uniqueCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		} );

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) > -1 ) !== not;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// init accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt( 0 ) === "<" &&
				selector.charAt( selector.length - 1 ) === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {

						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[ 2 ] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[ 0 ] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof root.ready !== "undefined" ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter( function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

				// Always skip document fragments
				if ( cur.nodeType < 11 && ( pos ?
					pos.index( cur ) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector( cur, selectors ) ) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[ 0 ], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem, this );
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.uniqueSort( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
} );
var rnotwhite = ( /\S+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = true;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this === promise ? newDefer.promise() : this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add( function() {

					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 ||
				( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred.
			// If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );

					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.progress( updateFunc( i, progressContexts, progressValues ) )
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
} );


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {

	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
} );

/**
 * Clean-up method for dom ready events
 */
function detach() {
	if ( document.addEventListener ) {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );

	} else {
		document.detachEvent( "onreadystatechange", completed );
		window.detachEvent( "onload", completed );
	}
}

/**
 * The ready event handler and self cleanup method
 */
function completed() {

	// readyState === "complete" is good enough for us to call the dom ready in oldIE
	if ( document.addEventListener ||
		window.event.type === "load" ||
		document.readyState === "complete" ) {

		detach();
		jQuery.ready();
	}
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called
		// after the browser event has already occurred.
		// we once tried to use readyState "interactive" here,
		// but it caused issues like the one
		// discovered by ChrisS here:
		// http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {

			// Handle it asynchronously to allow scripts the opportunity to delay ready
			window.setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed );

		// If IE event model is used
		} else {

			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch ( e ) {}

			if ( top && top.doScroll ) {
				( function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {

							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll( "left" );
						} catch ( e ) {
							return window.setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				} )();
			}
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Support: IE<9
// Iteration over object's inherited properties before its own
var i;
for ( i in jQuery( support ) ) {
	break;
}
support.ownFirst = i === "0";

// Note: most support tests are defined in their respective modules.
// false until the test is run
support.inlineBlockNeedsLayout = false;

// Execute ASAP in case we need to set body.style.zoom
jQuery( function() {

	// Minified: var a,b,c,d
	var val, div, body, container;

	body = document.getElementsByTagName( "body" )[ 0 ];
	if ( !body || !body.style ) {

		// Return for frameset docs that don't have a body
		return;
	}

	// Setup
	div = document.createElement( "div" );
	container = document.createElement( "div" );
	container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
	body.appendChild( container ).appendChild( div );

	if ( typeof div.style.zoom !== "undefined" ) {

		// Support: IE<8
		// Check if natively block-level elements act like inline-block
		// elements when setting their display to 'inline' and giving
		// them layout
		div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

		support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
		if ( val ) {

			// Prevent IE 6 from affecting layout for positioned elements #11048
			// Prevent IE from shrinking the body in IE 7 mode #12869
			// Support: IE<8
			body.style.zoom = 1;
		}
	}

	body.removeChild( container );
} );


( function() {
	var div = document.createElement( "div" );

	// Support: IE<9
	support.deleteExpando = true;
	try {
		delete div.test;
	} catch ( e ) {
		support.deleteExpando = false;
	}

	// Null elements to avoid leaks in IE.
	div = null;
} )();
var acceptData = function( elem ) {
	var noData = jQuery.noData[ ( elem.nodeName + " " ).toLowerCase() ],
		nodeType = +elem.nodeType || 1;

	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
	return nodeType !== 1 && nodeType !== 9 ?
		false :

		// Nodes accept data unless otherwise specified; rejection can be conditional
		!noData || noData !== true && elem.getAttribute( "classid" ) === noData;
};




var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :

					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[ name ] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}

function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
	if ( !acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( ( !id || !cache[ id ] || ( !pvt && !cache[ id ].data ) ) &&
		data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {

		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {

		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split( " " );
					}
				}
			} else {

				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[ i ] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject( thisCache ) : !jQuery.isEmptyObject( thisCache ) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, undefined
	} else {
		cache[ id ] = undefined;
	}
}

jQuery.extend( {
	cache: {},

	// The following elements (space-suffixed to avoid Object.prototype collisions)
	// throw uncatchable exceptions if you attempt to set expando properties
	noData: {
		"applet ": true,
		"embed ": true,

		// ...but Flash objects (which have this classid) *can* handle expandos
		"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[ jQuery.expando ] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				jQuery.data( this, key );
			} );
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each( function() {
				jQuery.data( this, key, value );
			} ) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
	},

	removeData: function( key ) {
		return this.each( function() {
			jQuery.removeData( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object,
	// or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );


( function() {
	var shrinkWrapBlocksVal;

	support.shrinkWrapBlocks = function() {
		if ( shrinkWrapBlocksVal != null ) {
			return shrinkWrapBlocksVal;
		}

		// Will be changed later if needed.
		shrinkWrapBlocksVal = false;

		// Minified: var b,c,d
		var div, body, container;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {

			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		// Support: IE6
		// Check if elements with layout shrink-wrap their children
		if ( typeof div.style.zoom !== "undefined" ) {

			// Reset CSS: box-sizing; display; margin; border
			div.style.cssText =

				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;" +
				"padding:1px;width:1px;zoom:1";
			div.appendChild( document.createElement( "div" ) ).style.width = "5px";
			shrinkWrapBlocksVal = div.offsetWidth !== 3;
		}

		body.removeChild( container );

		return shrinkWrapBlocksVal;
	};

} )();
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {

		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" ||
			!jQuery.contains( elem.ownerDocument, elem );
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() { return tween.cur(); } :
			function() { return jQuery.css( elem, prop, "" ); },
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		length = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < length; i++ ) {
				fn(
					elems[ i ],
					key,
					raw ? value : value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			length ? fn( elems[ 0 ], key ) : emptyGet;
};
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([\w:-]+)/ );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );

var rleadingWhitespace = ( /^\s+/ );

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|" +
		"details|dialog|figcaption|figure|footer|header|hgroup|main|" +
		"mark|meter|nav|output|picture|progress|section|summary|template|time|video";



function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}


( function() {
	var div = document.createElement( "div" ),
		fragment = document.createDocumentFragment(),
		input = document.createElement( "input" );

	// Setup
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName( "tbody" ).length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone =
		document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	input.type = "checkbox";
	input.checked = true;
	fragment.appendChild( input );
	support.appendChecked = input.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE6-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// #11217 - WebKit loses check when the name is after the checked attribute
	fragment.appendChild( div );

	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input = document.createElement( "input" );
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Cloned elements keep attachEvent handlers, we use addEventListener on IE9+
	support.noCloneEvent = !!div.addEventListener;

	// Support: IE<9
	// Since attributes and properties are the same in IE,
	// cleanData must set properties to undefined rather than use removeAttribute
	div[ jQuery.expando ] = 1;
	support.attributes = !div.getAttribute( jQuery.expando );
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {
	option: [ 1, "<select multiple='multiple'>", "</select>" ],
	legend: [ 1, "<fieldset>", "</fieldset>" ],
	area: [ 1, "<map>", "</map>" ],

	// Support: IE8
	param: [ 1, "<object>", "</object>" ],
	thead: [ 1, "<table>", "</table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
	// unless wrapped in a div with non-breaking characters in front of it.
	_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
};

// Support: IE8-IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== "undefined" ?
				context.querySelectorAll( tag || "*" ) :
				undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context;
			( elem = elems[ i ] ) != null;
			i++
		) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; ( elem = elems[ i ] ) != null; i++ ) {
		jQuery._data(
			elem,
			"globalEval",
			!refElements || jQuery._data( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/,
	rtbody = /<tbody/i;

function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

function buildFragment( elems, context, scripts, selection, ignored ) {
	var j, elem, contains,
		tmp, tag, tbody, wrap,
		l = elems.length,

		// Ensure a safe fragment
		safe = createSafeFragment( context ),

		nodes = [],
		i = 0;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || safe.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;

				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Manually add leading whitespace removed by IE
				if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
					nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[ 0 ] ) );
				}

				// Remove IE's autoinserted <tbody> from table fragments
				if ( !support.tbody ) {

					// String was a <table>, *may* have spurious <tbody>
					elem = tag === "table" && !rtbody.test( elem ) ?
						tmp.firstChild :

						// String was a bare <thead> or <tfoot>
						wrap[ 1 ] === "<table>" && !rtbody.test( elem ) ?
							tmp :
							0;

					j = elem && elem.childNodes.length;
					while ( j-- ) {
						if ( jQuery.nodeName( ( tbody = elem.childNodes[ j ] ), "tbody" ) &&
							!tbody.childNodes.length ) {

							elem.removeChild( tbody );
						}
					}
				}

				jQuery.merge( nodes, tmp.childNodes );

				// Fix #12392 for WebKit and IE > 9
				tmp.textContent = "";

				// Fix #12392 for oldIE
				while ( tmp.firstChild ) {
					tmp.removeChild( tmp.firstChild );
				}

				// Remember the top-level container for proper cleanup
				tmp = safe.lastChild;
			}
		}
	}

	// Fix #11356: Clear elements from fragment
	if ( tmp ) {
		safe.removeChild( tmp );
	}

	// Reset defaultChecked for any radios and checkboxes
	// about to be appended to the DOM in IE 6/7 (#8060)
	if ( !support.appendChecked ) {
		jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
	}

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}

			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( safe.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	tmp = null;

	return safe;
}


( function() {
	var i, eventName,
		div = document.createElement( "div" );

	// Support: IE<9 (lack submit/change bubble), Firefox (lack focus(in | out) events)
	for ( i in { submit: true, change: true, focusin: true } ) {
		eventName = "on" + i;

		if ( !( support[ i ] = eventName in window ) ) {

			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
			div.setAttribute( eventName, "t" );
			support[ i ] = div.attributes[ eventName ].expando === false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
} )();


var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE9
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" &&
					( !e || jQuery.event.triggered !== e.type ) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};

			// Add elem as a property of the handle fn to prevent a memory leak
			// with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] &&
				jQuery._data( cur, "handle" );

			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if (
				( !special._default ||
				 special._default.apply( eventPath.pop(), data ) === false
				) && acceptData( elem )
			) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {

						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Support (at least): Chrome, IE9
		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		//
		// Support: Firefox<=42+
		// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
		if ( delegateCount && cur.nodeType &&
			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push( { elem: cur, handlers: matches } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Safari 6-8+
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
		"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split( " " ),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: ( "button buttons clientX clientY fromElement offsetX offsetY " +
			"pageX pageY screenX screenY toElement" ).split( " " ),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX +
					( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
					( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY +
					( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
					( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ?
					original.toElement :
					fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {

						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	// Piggyback on a donor event to simulate a different one
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true

				// Previously, `originalEvent: {}` was set here, so stopPropagation call
				// would not be triggered on donor event, since in our own
				// jQuery.event.stopPropagation function we had a check for existence of
				// originalEvent.stopPropagation method, so, consequently it would be a noop.
				//
				// Guard for simulated events was moved to jQuery.event.stopPropagation function
				// since `originalEvent` should point to the original event for the
				// constancy with other events and for more focused logic
			}
		);

		jQuery.event.trigger( e, null, elem );

		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event,
			// to properly expose it to GC
			if ( typeof elem[ name ] === "undefined" ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: IE < 9, Android < 4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( !e || this.isSimulated ) {
			return;
		}

		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://code.google.com/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

// IE submit delegation
if ( !support.submit ) {

	jQuery.event.special.submit = {
		setup: function() {

			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {

				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ?

						// Support: IE <=8
						// We use jQuery.prop instead of elem.form
						// to allow fixing the IE8 delegated submit issue (gh-2332)
						// by 3rd party polyfills/workarounds.
						jQuery.prop( elem, "form" ) :
						undefined;

				if ( form && !jQuery._data( form, "submit" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submitBubble = true;
					} );
					jQuery._data( form, "submit", true );
				}
			} );

			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {

			// If form was submitted by the user, bubble the event up the tree
			if ( event._submitBubble ) {
				delete event._submitBubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event );
				}
			}
		},

		teardown: function() {

			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !support.change ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {

				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._justChanged = true;
						}
					} );
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._justChanged && !event.isTrigger ) {
							this._justChanged = false;
						}

						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event );
					} );
				}
				return false;
			}

			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "change" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event );
						}
					} );
					jQuery._data( elem, "change", true );
				}
			} );
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger ||
				( elem.type !== "radio" && elem.type !== "checkbox" ) ) {

				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Support: Firefox
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome, Safari
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					jQuery._removeData( doc, fix );
				} else {
					jQuery._data( doc, fix, attaches );
				}
			}
		};
	} );
}

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	},

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


var rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp( "<(?:" + nodeNames + ")[\\s/>]", "i" ),
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

	// Support: IE 10-11, Edge 10240+
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement( "div" ) );

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName( "tbody" )[ 0 ] ||
			elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( jQuery.find.attr( elem, "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}
	return elem;
}

function cloneCopyEvent( src, dest ) {
	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( support.html5Clone && ( src.innerHTML && !jQuery.trim( dest.innerHTML ) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {

		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var first, node, hasScripts,
		scripts, doc, fragment,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android<4.1, PhantomJS<2
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!jQuery._data( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							jQuery.globalEval(
								( node.text || node.textContent || node.innerHTML || "" )
									.replace( rcleanScript, "" )
							);
						}
					}
				}
			}

			// Fix #11809: Avoid leaking memory
			fragment = first = null;
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		elems = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = elems[ i ] ) != null; i++ ) {

		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( support.html5Clone || jQuery.isXMLDoc( elem ) ||
			!rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {

			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( ( !support.noCloneEvent || !support.noCloneChecked ) &&
				( elem.nodeType === 1 || elem.nodeType === 11 ) && !jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; ( node = srcElements[ i ] ) != null; ++i ) {

				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[ i ] ) {
					fixCloneNodeIssues( node, destElements[ i ] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; ( node = srcElements[ i ] ) != null; i++ ) {
					cloneCopyEvent( node, destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems, /* internal */ forceAcceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			attributes = support.attributes,
			special = jQuery.event.special;

		for ( ; ( elem = elems[ i ] ) != null; i++ ) {
			if ( forceAcceptData || acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// Support: IE<9
						// IE does not allow us to delete expando properties from nodes
						// IE creates expando attributes along with the property
						// IE does not have a removeAttribute function on Document nodes
						if ( !attributes && typeof elem.removeAttribute !== "undefined" ) {
							elem.removeAttribute( internalKey );

						// Webkit & Blink performance suffers when deleting properties
						// from DOM nodes, so set to undefined instead
						// https://code.google.com/p/chromium/issues/detail?id=378607
						} else {
							elem[ internalKey ] = undefined;
						}

						deletedIds.push( id );
					}
				}
			}
		}
	}
} );

jQuery.fn.extend( {

	// Keep domManip exposed until 3.0 (gh-2225)
	domManip: domManip,

	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append(
					( this[ 0 ] && this[ 0 ].ownerDocument || document ).createTextNode( value )
				);
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {

			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {

						// Remove element nodes and prevent memory leaks
						elem = this[ i ] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );


var iframe,
	elemdisplay = {

		// Support: Firefox
		// We have to pre-define these values for FF (#10227)
		HTML: "block",
		BODY: "block"
	};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */

// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		display = jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
				.appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var documentElement = document.documentElement;



( function() {
	var pixelPositionVal, pixelMarginRightVal, boxSizingReliableVal,
		reliableHiddenOffsetsVal, reliableMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	div.style.cssText = "float:left;opacity:.5";

	// Support: IE<9
	// Make sure that element opacity exists (as opposed to filter)
	support.opacity = div.style.opacity === "0.5";

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!div.style.cssFloat;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container = document.createElement( "div" );
	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	div.innerHTML = "";
	container.appendChild( div );

	// Support: Firefox<29, Android 2.3
	// Vendor-prefix box-sizing
	support.boxSizing = div.style.boxSizing === "" || div.style.MozBoxSizing === "" ||
		div.style.WebkitBoxSizing === "";

	jQuery.extend( support, {
		reliableHiddenOffsets: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableHiddenOffsetsVal;
		},

		boxSizingReliable: function() {

			// We're checking for pixelPositionVal here instead of boxSizingReliableVal
			// since that compresses better and they're computed together anyway.
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},

		pixelMarginRight: function() {

			// Support: Android 4.0-4.3
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelMarginRightVal;
		},

		pixelPosition: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelPositionVal;
		},

		reliableMarginRight: function() {

			// Support: Android 2.3
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableMarginRightVal;
		},

		reliableMarginLeft: function() {

			// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableMarginLeftVal;
		}
	} );

	function computeStyleTests() {
		var contents, divStyle,
			documentElement = document.documentElement;

		// Setup
		documentElement.appendChild( container );

		div.style.cssText =

			// Support: Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";

		// Support: IE<9
		// Assume reasonable values in the absence of getComputedStyle
		pixelPositionVal = boxSizingReliableVal = reliableMarginLeftVal = false;
		pixelMarginRightVal = reliableMarginRightVal = true;

		// Check for getComputedStyle so that this code is not run in IE<9.
		if ( window.getComputedStyle ) {
			divStyle = window.getComputedStyle( div );
			pixelPositionVal = ( divStyle || {} ).top !== "1%";
			reliableMarginLeftVal = ( divStyle || {} ).marginLeft === "2px";
			boxSizingReliableVal = ( divStyle || { width: "4px" } ).width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = ( divStyle || { marginRight: "4px" } ).marginRight === "4px";

			// Support: Android 2.3 only
			// Div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			contents = div.appendChild( document.createElement( "div" ) );

			// Reset CSS: box-sizing; display; margin; border; padding
			contents.style.cssText = div.style.cssText =

				// Support: Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
			contents.style.marginRight = contents.style.width = "0";
			div.style.width = "1px";

			reliableMarginRightVal =
				!parseFloat( ( window.getComputedStyle( contents ) || {} ).marginRight );

			div.removeChild( contents );
		}

		// Support: IE6-8
		// First check that getClientRects works as expected
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.style.display = "none";
		reliableHiddenOffsetsVal = div.getClientRects().length === 0;
		if ( reliableHiddenOffsetsVal ) {
			div.style.display = "";
			div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
			contents = div.getElementsByTagName( "td" );
			contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
			reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
			if ( reliableHiddenOffsetsVal ) {
				contents[ 0 ].style.display = "";
				contents[ 1 ].style.display = "none";
				reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
			}
		}

		// Teardown
		documentElement.removeChild( container );
	}

} )();


var getStyles, curCSS,
	rposition = /^(top|right|bottom|left)$/;

if ( window.getComputedStyle ) {
	getStyles = function( elem ) {

		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

	curCSS = function( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value"
			// instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values,
			// but width seems to be reliably pixels
			// this is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "";
	};
} else if ( documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, computed ) {
		var left, rs, rsLeft, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed[ name ] : undefined;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are
		// proportional to the parent element instead
		// and we can't measure the parent instead because it
		// might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "" || "auto";
	};
}




function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

		ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/i,

	// swappable if display is none or starts with table except
	// "table", "table-cell", or "table-caption"
	// see here for display values:
	// https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;


// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt( 0 ).toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {

			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] =
					jQuery._data( elem, "olddisplay", defaultDisplay( elem.nodeName ) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display && display !== "none" || !hidden ) {
				jQuery._data(
					elem,
					"olddisplay",
					hidden ? display : jQuery.css( elem, "display" )
				);
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?

		// If we already have the right measurement, avoid augmentation
		4 :

		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {

		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = support.boxSizing &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Support: IE11 only
	// In IE 11 fullscreen elements inside of an iframe have
	// 100x too small dimensions (gh-1764).
	if ( document.msFullscreenElement && window.top !== window ) {

		// Support: IE11 only
		// Running getBoundingClientRect on a disconnected node
		// in IE throws an error.
		if ( elem.getClientRects().length ) {
			val = Math.round( elem.getBoundingClientRect()[ name ] * 100 );
		}
	}

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {

		// normalize float css property
		"float": support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight
			// (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				// Support: IE
				// Swallow errors from 'invalid' CSS values (#5509)
				try {
					style[ name ] = value;
				} catch ( e ) {}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
					elem.offsetWidth === 0 ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					support.boxSizing &&
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
} );

if ( !support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {

			// IE uses filters for opacity
			return ropacity.test( ( computed && elem.currentStyle ?
				elem.currentStyle.filter :
				elem.style.filter ) || "" ) ?
					( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
					computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist -
			// attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule
				// or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return (
				parseFloat( curCSS( elem, "marginLeft" ) ) ||

				// Support: IE<=11+
				// Running getBoundingClientRect on a disconnected node in IE throws an error
				// Support: IE8 only
				// getClientRects() errors on disconnected elems
				( jQuery.contains( elem.ownerDocument, elem ) ?
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} ) :
					0
				)
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";
			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !support.shrinkWrapBlocks() ) {
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show
				// and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done( function() {
				jQuery( elem ).hide();
			} );
		}
		anim.done( function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		} );
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnotwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ?
			jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	window.clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var a,
		input = document.createElement( "input" ),
		div = document.createElement( "div" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	// Setup
	div = document.createElement( "div" );
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName( "a" )[ 0 ];

	// Support: Windows Web Apps (WWA)
	// `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "checkbox" );
	div.appendChild( input );

	a = div.getElementsByTagName( "a" )[ 0 ];

	// First batch of tests.
	a.style.cssText = "top:1px";

	// Test setAttribute on camelCase class.
	// If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute( "style" ) );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute( "href" ) === "/a";

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement( "form" ).enctype;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE8 only
	// Check if we can trust getAttribute("value")
	input = document.createElement( "input" );
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";
} )();


var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if (
					hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?

					// handle most common string cases
					ret.replace( rreturn, "" ) :

					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ?
								!option.disabled :
								option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {

						// Support: IE6
						// When new option element is added to select box we need to
						// force reflow of newly added node in order to workaround delay
						// of initialization properties
						try {
							option.selected = optionSet = true;

						} catch ( _ ) {

							// Will be executed only in IE6
							option.scrollHeight;
						}

					} else {
						option.selected = false;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}

				return options;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = support.getSetAttribute,
	getSetInput = support.input;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {

					// Setting the type on a radio button after the value resets the value in IE8-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {

					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;

					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {

			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		} else {

			// Support: IE<9
			// Use defaultChecked and defaultSelected for oldIE
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} else {
		attrHandle[ name ] = function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
			}
		};
	}
} );

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {

				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {

				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {

			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					( ret = elem.ownerDocument.createAttribute( name ) )
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			if ( name === "value" || value === elem.getAttribute( name ) ) {
				return value;
			}
		}
	};

	// Some attributes are constructed with empty-string values when not defined
	attrHandle.id = attrHandle.name = attrHandle.coords =
		function( elem, name, isXML ) {
			var ret;
			if ( !isXML ) {
				return ( ret = elem.getAttributeNode( name ) ) && ret.value !== "" ?
					ret.value :
					null;
			}
		};

	// Fixing value retrieval on a button requires this module
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			if ( ret && ret.specified ) {
				return ret.value;
			}
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each( [ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	} );
}

if ( !support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {

			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case sensitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}




var rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each( function() {

			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch ( e ) {}
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) && elem.href ?
							0 :
							-1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !support.hrefNormalized ) {

	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each( [ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	} );
}

// Support: Safari, IE9+
// mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );

// IE6/7 call enctype encoding
if ( !support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}




var rclass = /[\t\r\n\f]/g;

function getClass( elem ) {
	return jQuery.attr( elem, "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						jQuery.attr( elem, "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						jQuery.attr( elem, "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnotwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// store className if set
					jQuery._data( this, "__className__", className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				jQuery.attr( this, "class",
					className || value === false ?
					"" :
					jQuery._data( this, "__className__" ) || ""
				);
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + getClass( elem ) + " " ).replace( rclass, " " )
					.indexOf( className ) > -1
			) {
				return true;
			}
		}

		return false;
	}
} );




// Return jQuery for attributes-only inclusion


jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );


var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

jQuery.parseJSON = function( data ) {

	// Attempt to parse using the native JSON parser first
	if ( window.JSON && window.JSON.parse ) {

		// Support: Android 2.3
		// Workaround failure to string-cast null input
		return window.JSON.parse( data + "" );
	}

	var requireNonComma,
		depth = null,
		str = jQuery.trim( data + "" );

	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
	// after removing valid tokens
	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

		// Force termination if we see a misplaced comma
		if ( requireNonComma && comma ) {
			depth = 0;
		}

		// Perform no more replacements after returning to outermost depth
		if ( depth === 0 ) {
			return token;
		}

		// Commas must not follow "[", "{", or ","
		requireNonComma = open || comma;

		// Determine new depth
		// array/object open ("[" or "{"): depth += true - false (increment)
		// array/object close ("]" or "}"): depth += false - true (decrement)
		// other cases ("," or primitive): depth += true - true (numeric cast)
		depth += !close - !open;

		// Remove this token
		return "";
	} ) ) ?
		( Function( "return " + str ) )() :
		jQuery.error( "Invalid JSON: " + data );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	try {
		if ( window.DOMParser ) { // Standard
			tmp = new window.DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} else { // IE
			xml = new window.ActiveXObject( "Microsoft.XMLDOM" );
			xml.async = "false";
			xml.loadXML( data );
		}
	} catch ( e ) {
		xml = undefined;
	}
	if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,

	// IE leaves an \r character at EOL
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Document location
	ajaxLocation = location.href,

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType.charAt( 0 ) === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) { // jscs:ignore requireDotNotation
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var

			// Cross-domain detection vars
			parts,

			// Loop variable
			i,

			// URL without anti-cache param
			cacheURL,

			// Response headers as string
			responseHeadersString,

			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,

			// Response headers
			responseHeaders,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// The jqXHR state
			state = 0,

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {

								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" )
			.replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );

				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapAll( html.call( this, i ) );
			} );
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			var wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function() {
		return this.parent().each( function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		} ).end();
	}
} );


function getDisplay( elem ) {
	return elem.style && elem.style.display || jQuery.css( elem, "display" );
}

function filterHidden( elem ) {
	while ( elem && elem.nodeType === 1 ) {
		if ( getDisplay( elem ) === "none" || elem.type === "hidden" ) {
			return true;
		}
		elem = elem.parentNode;
	}
	return false;
}

jQuery.expr.filters.hidden = function( elem ) {

	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return support.reliableHiddenOffsets() ?
		( elem.offsetWidth <= 0 && elem.offsetHeight <= 0 &&
			!elem.getClientRects().length ) :
			filterHidden( elem );
};

jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {

			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} ) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?

	// Support: IE6-IE8
	function() {

		// XHR cannot access local files, always use ActiveX for that case
		if ( this.isLocal ) {
			return createActiveXHR();
		}

		// Support: IE 9-11
		// IE seems to error on cross-domain PATCH requests when ActiveX XHR
		// is used. In IE 9+ always use the native XHR.
		// Note: this condition won't catch Edge as it doesn't define
		// document.documentMode but it also doesn't support ActiveX so it won't
		// reach this code.
		if ( document.documentMode > 8 ) {
			return createStandardXHR();
		}

		// Support: IE<9
		// oldIE XHR does not support non-RFC2616 methods (#13240)
		// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
		// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
		// Although this check for six methods instead of eight
		// since IE also does not support "trace" and "connect"
		return /^(get|post|head|put|delete|options)$/i.test( this.type ) &&
			createStandardXHR() || createActiveXHR();
	} :

	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

var xhrId = 0,
	xhrCallbacks = {},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE<10
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	} );
}

// Determine support properties
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport( function( options ) {

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !options.crossDomain || support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;

					// Open the socket
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {

						// Support: IE<9
						// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
						// request header to a null-value.
						//
						// To keep consistent with other XHR implementations, cast the value
						// to string and ignore `undefined`.
						if ( headers[ i ] !== undefined ) {
							xhr.setRequestHeader( i, headers[ i ] + "" );
						}
					}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( options.hasContent && options.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, statusText, responses;

						// Was never called and is aborted or complete
						if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

							// Clean up
							delete xhrCallbacks[ id ];
							callback = undefined;
							xhr.onreadystatechange = jQuery.noop;

							// Abort manually if needed
							if ( isAbort ) {
								if ( xhr.readyState !== 4 ) {
									xhr.abort();
								}
							} else {
								responses = {};
								status = xhr.status;

								// Support: IE<10
								// Accessing binary-data responseText throws an exception
								// (#11426)
								if ( typeof xhr.responseText === "string" ) {
									responses.text = xhr.responseText;
								}

								// Firefox throws an exception when accessing
								// statusText for faulty cross-domain requests
								try {
									statusText = xhr.statusText;
								} catch ( e ) {

									// We normalize with Webkit giving an empty statusText
									statusText = "";
								}

								// Filter status for non standard behaviors

								// If the request is local and we have data: assume a success
								// (success with no data won't get notified, that's the best we
								// can do given current implementations)
								if ( !status && options.isLocal && !options.crossDomain ) {
									status = responses.text ? 200 : 404;

								// IE - #1450: sometimes returns 1223 when it should be 204
								} else if ( status === 1223 ) {
									status = 204;
								}
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );
						}
					};

					// Do send the request
					// `xhr.send` may raise an exception, but it will be
					// handled in jQuery.ajax (so no try/catch here)
					if ( !options.async ) {

						// If we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {

						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						window.setTimeout( callback );
					} else {

						// Register the callback, but delay it in case `xhr.send` throws
						// Add to the list of active xhr callbacks
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	} );
}

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch ( e ) {}
}




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery( "head" )[ 0 ] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement( "script" );

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8+
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	if ( !document.implementation.createHTMLDocument ) {
		return false;
	}
	var doc = document.implementation.createHTMLDocument( "" );
	doc.body.innerHTML = "<form></form><form></form>";
	return doc.body.childNodes.length === 2;
} )();


// data: string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	// document.implementation stops scripts or inline event handlers from
	// being executed immediately
	context = context || ( support.createHTMLDocument ?
		document.implementation.createHTMLDocument( "" ) :
		document );

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = jQuery.trim( url.slice( off, url.length ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( self, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};





/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			jQuery.inArray( "auto", [ curCSSTop, curCSSLeft ] ) > -1;

		// need to be able to calculate position if either top or left
		// is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win,
			box = { top: 0, left: 0 },
			elem = this[ 0 ],
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== "undefined" ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
			left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			// Subtract offsetParent scroll positions
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ) -
				offsetParent.scrollTop();
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true ) -
				offsetParent.scrollLeft();
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? ( prop in win ) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
} );

// Support: Safari<7-8+, Chrome<37-44+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
	function( defaultExtra, funcName ) {

		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only,
					// but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}



var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}

return jQuery;
}));

/** @license React v16.1.1
 * react.development.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.React = factory());
}(this, (function () { 'use strict';

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

var objectAssign$1 = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

// TODO: this is special because it gets imported during build.

var ReactVersion = '16.1.1';

/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

{
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

var invariant_1$1 = invariant;

// Exports React.Fragment
var enableReactFragment = false;
// Exports ReactDOM.createRoot



// Mutating mode (React DOM, React ART, React Native):

// Experimental noop mode (currently unused):

// Experimental persistent mode (CS):


// Only used in www builds.

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var emptyObject = {};

{
  Object.freeze(emptyObject);
}

var emptyObject_1 = emptyObject;

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

var lowPriorityWarning$1 = lowPriorityWarning;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

var emptyFunction_1 = emptyFunction;

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */





/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction_1;

{
  var printWarning$1 = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning$1.apply(undefined, [format].concat(args));
    }
  };
}

var warning_1$1 = warning;

var didWarnStateUpdateForUnmountedComponent = {};

function warnNoop(publicInstance, callerName) {
  {
    var constructor = publicInstance.constructor;
    var componentName = constructor && (constructor.displayName || constructor.name) || 'ReactClass';
    var warningKey = componentName + '.' + callerName;
    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
      return;
    }
    warning_1$1(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op.\n\nPlease check the code for the %s component.', callerName, callerName, componentName);
    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

/**
 * Base class helpers for the updating state of a component.
 */
function Component(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject_1;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

Component.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
Component.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant_1$1(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
Component.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    Object.defineProperty(Component.prototype, methodName, {
      get: function () {
        lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
        return undefined;
      }
    });
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

/**
 * Base class helpers for the updating state of a component.
 */
function PureComponent(props, context, updater) {
  // Duplicated from Component.
  this.props = props;
  this.context = context;
  this.refs = emptyObject_1;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = Component.prototype;
var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
pureComponentPrototype.constructor = PureComponent;
// Avoid an extra prototype jump for these methods.
objectAssign$1(pureComponentPrototype, Component.prototype);
pureComponentPrototype.isPureReactComponent = true;

function AsyncComponent(props, context, updater) {
  // Duplicated from Component.
  this.props = props;
  this.context = context;
  this.refs = emptyObject_1;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

var asyncComponentPrototype = AsyncComponent.prototype = new ComponentDummy();
asyncComponentPrototype.constructor = AsyncComponent;
// Avoid an extra prototype jump for these methods.
objectAssign$1(asyncComponentPrototype, Component.prototype);
asyncComponentPrototype.unstable_isAsyncReactComponent = true;
asyncComponentPrototype.render = function () {
  return this.props.children;
};

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE$1 = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown;
var specialPropRefWarningShown;

function hasValidRef(config) {
  {
    if (hasOwnProperty$1.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty$1.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      warning_1$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      warning_1$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE$1,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    });
    // self and source are DEV only properties.
    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    });
    // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.
    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */
function createElement(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty$1.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE$1) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}

/**
 * Return a function that produces ReactElements of a given type.
 * See https://reactjs.org/docs/react-api.html#createfactory
 */


function cloneAndReplaceKey(oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
}

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */
function cloneElement(element, config, children) {
  var propName;

  // Original props are copied
  var props = objectAssign$1({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty$1.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
}

/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
function isValidElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE$1;
}

var ReactDebugCurrentFrame = {};

{
  // Component that is being worked on
  ReactDebugCurrentFrame.getCurrentStack = null;

  ReactDebugCurrentFrame.getStackAddendum = function () {
    var impl = ReactDebugCurrentFrame.getCurrentStack;
    if (impl) {
      return impl();
    }
    return null;
  };
}

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
var REACT_PORTAL_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.portal') || 0xeaca;
var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */
function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

var POOL_SIZE = 10;
var traverseContextPool = [];
function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
  if (traverseContextPool.length) {
    var traverseContext = traverseContextPool.pop();
    traverseContext.result = mapResult;
    traverseContext.keyPrefix = keyPrefix;
    traverseContext.func = mapFunction;
    traverseContext.context = mapContext;
    traverseContext.count = 0;
    return traverseContext;
  } else {
    return {
      result: mapResult,
      keyPrefix: keyPrefix,
      func: mapFunction,
      context: mapContext,
      count: 0
    };
  }
}

function releaseTraverseContext(traverseContext) {
  traverseContext.result = null;
  traverseContext.keyPrefix = null;
  traverseContext.func = null;
  traverseContext.context = null;
  traverseContext.count = 0;
  if (traverseContextPool.length < POOL_SIZE) {
    traverseContextPool.push(traverseContext);
  }
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE || type === 'object' && children.$$typeof === REACT_PORTAL_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = ITERATOR_SYMBOL && children[ITERATOR_SYMBOL] || children[FAUX_ITERATOR_SYMBOL];
    if (typeof iteratorFn === 'function') {
      {
        // Warn about using Maps as children
        if (iteratorFn === children.entries) {
          warning_1$1(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', ReactDebugCurrentFrame.getStackAddendum());
          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(children);
      var step;
      var ii = 0;
      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getComponentKey(child, ii++);
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
      }
    } else if (type === 'object') {
      var addendum = '';
      {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
      }
      var childrenString = '' + children;
      invariant_1$1(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (typeof component === 'object' && component !== null && component.key != null) {
    // Explicit key
    return escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  releaseTraverseContext(traverseContext);
}

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction_1.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (isValidElement(mappedChild)) {
      mappedChild = cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  releaseTraverseContext(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, emptyFunction_1.thatReturnsNull, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction_1.thatReturnsArgument);
  return result;
}

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !isValidElement(children) ? invariant_1$1(false, 'React.Children.only expected to receive a single React element child.') : void 0;
  return children;
}

var describeComponentFrame = function (name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
};

function getComponentName(fiber) {
  var type = fiber.type;

  if (typeof type === 'string') {
    return type;
  }
  if (typeof type === 'function') {
    return type.displayName || type.name;
  }
  return null;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret$1 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



{
  var invariant$2 = invariant_1$1;
  var warning$2 = warning_1$1;
  var ReactPropTypesSecret = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant$2(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning$2(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning$2(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

var checkPropTypes_1$1 = checkPropTypes;

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

{
  var currentlyValidatingElement = null;

  var getDisplayName = function (element) {
    if (element == null) {
      return '#empty';
    } else if (typeof element === 'string' || typeof element === 'number') {
      return '#text';
    } else if (typeof element.type === 'string') {
      return element.type;
    } else if (element.type === REACT_FRAGMENT_TYPE$1) {
      return 'React.Fragment';
    } else {
      return element.type.displayName || element.type.name || 'Unknown';
    }
  };

  var getStackAddendum = function () {
    var stack = '';
    if (currentlyValidatingElement) {
      var name = getDisplayName(currentlyValidatingElement);
      var owner = currentlyValidatingElement._owner;
      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner));
    }
    stack += ReactDebugCurrentFrame.getStackAddendum() || '';
    return stack;
  };

  var REACT_FRAGMENT_TYPE$1 = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.fragment') || 0xeacb;

  var VALID_FRAGMENT_PROPS = new Map([['children', true], ['key', true]]);
}

var ITERATOR_SYMBOL$1 = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL$1 = '@@iterator'; // Before Symbol spec.

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = getComponentName(ReactCurrentOwner.current);
    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = '\n\nCheck the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }
  ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + getComponentName(element._owner) + '.';
  }

  currentlyValidatingElement = element;
  {
    warning_1$1(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum());
  }
  currentlyValidatingElement = null;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = ITERATOR_SYMBOL$1 && node[ITERATOR_SYMBOL$1] || node[FAUX_ITERATOR_SYMBOL$1];
    if (typeof iteratorFn === 'function') {
      // Entry iterators used to provide implicit keys,
      // but now we print a separate warning for them later.
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  var propTypes = componentClass.propTypes;

  if (propTypes) {
    currentlyValidatingElement = element;
    checkPropTypes_1$1(propTypes, element.props, 'prop', name, getStackAddendum);
    currentlyValidatingElement = null;
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    warning_1$1(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
  }
}

/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */
function validateFragmentProps(fragment) {
  currentlyValidatingElement = fragment;

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = Object.keys(fragment.props)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var key = _step.value;

      if (!VALID_FRAGMENT_PROPS.has(key)) {
        warning_1$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.%s', key, getStackAddendum());
        break;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (fragment.ref !== null) {
    warning_1$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.%s', getStackAddendum());
  }

  currentlyValidatingElement = null;
}

function createElementWithValidation(type, props, children) {
  var validType = typeof type === 'string' || typeof type === 'function' || typeof type === 'symbol' || typeof type === 'number';
  // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.
  if (!validType) {
    var info = '';
    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendum(props);
    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    info += getStackAddendum() || '';

    warning_1$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info);
  }

  var element = createElement.apply(this, arguments);

  // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.
  if (element == null) {
    return element;
  }

  // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)
  if (validType) {
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }
  }

  if (typeof type === 'symbol' && type === REACT_FRAGMENT_TYPE$1) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
}

function createFactoryWithValidation(type) {
  var validatedFactory = createElementWithValidation.bind(null, type);
  // Legacy hook TODO: Warn if this is accessed
  validatedFactory.type = type;

  {
    Object.defineProperty(validatedFactory, 'type', {
      enumerable: false,
      get: function () {
        lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
        Object.defineProperty(this, 'type', {
          value: type
        });
        return type;
      }
    });
  }

  return validatedFactory;
}

function cloneElementWithValidation(element, props, children) {
  var newElement = cloneElement.apply(this, arguments);
  for (var i = 2; i < arguments.length; i++) {
    validateChildKeys(arguments[i], newElement.type);
  }
  validatePropTypes(newElement);
  return newElement;
}

var REACT_FRAGMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.fragment') || 0xeacb;

var React = {
  Children: {
    map: mapChildren,
    forEach: forEachChildren,
    count: countChildren,
    toArray: toArray,
    only: onlyChild
  },

  Component: Component,
  PureComponent: PureComponent,
  unstable_AsyncComponent: AsyncComponent,

  createElement: createElementWithValidation,
  cloneElement: cloneElementWithValidation,
  createFactory: createFactoryWithValidation,
  isValidElement: isValidElement,

  version: ReactVersion,

  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
    ReactCurrentOwner: ReactCurrentOwner,
    // Used by renderers to avoid bundling object-assign twice in UMD bundles:
    assign: objectAssign$1
  }
};

if (enableReactFragment) {
  React.Fragment = REACT_FRAGMENT_TYPE;
}

{
  objectAssign$1(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
    // These should not be included in production.
    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
    // TODO: remove in React 17.0.
    ReactComponentTreeHook: {}
  });
}



var React$2 = Object.freeze({
	default: React
});

var React$3 = ( React$2 && React ) || React$2;

// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.
var react = React$3['default'] ? React$3['default'] : React$3;

return react;

})));

/** @license React v16.1.1
 * react-dom.development.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
	typeof define === 'function' && define.amd ? define(['react'], factory) :
	(global.ReactDOM = factory(global.React));
}(this, (function (React) { 'use strict';

/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

{
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

var invariant_1$1 = invariant;

!React ? invariant_1$1(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;

// These attributes should be all lowercase to allow for
// case insensitive checks
var RESERVED_PROPS = {
  children: true,
  dangerouslySetInnerHTML: true,
  defaultValue: true,
  defaultChecked: true,
  innerHTML: true,
  suppressContentEditableWarning: true,
  suppressHydrationWarning: true,
  style: true
};

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_PROPERTY: 0x1,
  HAS_BOOLEAN_VALUE: 0x4,
  HAS_NUMERIC_VALUE: 0x8,
  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,
  HAS_STRING_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    for (var propName in Properties) {
      !!properties.hasOwnProperty(propName) ? invariant_1$1(false, "injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.", propName) : void 0;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE),
        hasStringBooleanValue: checkMask(propConfig, Injection.HAS_STRING_BOOLEAN_VALUE)
      };
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? invariant_1$1(false, "DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s", propName) : void 0;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];

        propertyInfo.attributeName = attributeName;
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      // Downcase references to whitelist properties to check for membership
      // without case-sensitivity. This allows the whitelist to pick up
      // `allowfullscreen`, which should be written using the property configuration
      // for `allowFullscreen`
      properties[propName] = propertyInfo;
    }
  }
};

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
/* eslint-enable max-len */
var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";


var ROOT_ATTRIBUTE_NAME = 'data-reactroot';

/**
 * Map from property "standard name" to an object with info about how to set
 * the property in the DOM. Each object contains:
 *
 * attributeName:
 *   Used when rendering markup or with `*Attribute()`.
 * attributeNamespace
 * propertyName:
 *   Used on DOM node instances. (This includes properties that mutate due to
 *   external factors.)
 * mutationMethod:
 *   If non-null, used instead of the property or `setAttribute()` after
 *   initial render.
 * mustUseProperty:
 *   Whether the property must be accessed and mutated as an object property.
 * hasBooleanValue:
 *   Whether the property should be removed when set to a falsey value.
 * hasNumericValue:
 *   Whether the property must be numeric or parse as a numeric and should be
 *   removed when set to a falsey value.
 * hasPositiveNumericValue:
 *   Whether the property must be positive numeric or parse as a positive
 *   numeric and should be removed when set to a falsey value.
 * hasOverloadedBooleanValue:
 *   Whether the property can be used as a flag as well as with a value.
 *   Removed when strictly equal to false; present without a value when
 *   strictly equal to true; present with a value otherwise.
 */
var properties = {};

/**
 * Checks whether a property name is a writeable attribute.
 * @method
 */
function shouldSetAttribute(name, value) {
  if (isReservedProp(name)) {
    return false;
  }
  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
    return false;
  }
  if (value === null) {
    return true;
  }
  switch (typeof value) {
    case 'boolean':
      return shouldAttributeAcceptBooleanValue(name);
    case 'undefined':
    case 'number':
    case 'string':
    case 'object':
      return true;
    default:
      // function, symbol
      return false;
  }
}

function getPropertyInfo(name) {
  return properties.hasOwnProperty(name) ? properties[name] : null;
}

function shouldAttributeAcceptBooleanValue(name) {
  if (isReservedProp(name)) {
    return true;
  }
  var propertyInfo = getPropertyInfo(name);
  if (propertyInfo) {
    return propertyInfo.hasBooleanValue || propertyInfo.hasStringBooleanValue || propertyInfo.hasOverloadedBooleanValue;
  }
  var prefix = name.toLowerCase().slice(0, 5);
  return prefix === 'data-' || prefix === 'aria-';
}

/**
 * Checks to see if a property name is within the list of properties
 * reserved for internal React operations. These properties should
 * not be set on an HTML element.
 *
 * @private
 * @param {string} name
 * @return {boolean} If the name is within reserved props
 */
function isReservedProp(name) {
  return RESERVED_PROPS.hasOwnProperty(name);
}

var injection = DOMPropertyInjection;

var MUST_USE_PROPERTY = injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = injection.HAS_BOOLEAN_VALUE;
var HAS_NUMERIC_VALUE = injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = injection.HAS_OVERLOADED_BOOLEAN_VALUE;
var HAS_STRING_BOOLEAN_VALUE = injection.HAS_STRING_BOOLEAN_VALUE;

var HTMLDOMPropertyConfig = {
  // When adding attributes to this list, be sure to also add them to
  // the `possibleStandardNames` module to ensure casing and incorrect
  // name warnings.
  Properties: {
    allowFullScreen: HAS_BOOLEAN_VALUE,
    // specifies target context for links with `preload` type
    async: HAS_BOOLEAN_VALUE,
    // Note: there is a special case that prevents it from being written to the DOM
    // on the client side because the browsers are inconsistent. Instead we call focus().
    autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: HAS_OVERLOADED_BOOLEAN_VALUE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    cols: HAS_POSITIVE_NUMERIC_VALUE,
    contentEditable: HAS_STRING_BOOLEAN_VALUE,
    controls: HAS_BOOLEAN_VALUE,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    disabled: HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: HAS_STRING_BOOLEAN_VALUE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    hidden: HAS_BOOLEAN_VALUE,
    loop: HAS_BOOLEAN_VALUE,
    // Caution; `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`.
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    playsInline: HAS_BOOLEAN_VALUE,
    readOnly: HAS_BOOLEAN_VALUE,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    rows: HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: HAS_NUMERIC_VALUE,
    scoped: HAS_BOOLEAN_VALUE,
    seamless: HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    size: HAS_POSITIVE_NUMERIC_VALUE,
    start: HAS_NUMERIC_VALUE,
    // support for projecting regular DOM Elements via V1 named slots ( shadow dom )
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: HAS_STRING_BOOLEAN_VALUE,
    // Style must be explicitly set in the attribute list. React components
    // expect a style object
    style: 0,
    // Keep it in the whitelist because it is case-sensitive for SVG.
    tabIndex: 0,
    // itemScope is for for Microdata support.
    // See http://schema.org/docs/gs.html
    itemScope: HAS_BOOLEAN_VALUE,
    // These attributes must stay in the white-list because they have
    // different attribute names (see DOMAttributeNames below)
    acceptCharset: 0,
    className: 0,
    htmlFor: 0,
    httpEquiv: 0,
    // Attributes with mutation methods must be specified in the whitelist
    // Set the string boolean flag to allow the behavior
    value: HAS_STRING_BOOLEAN_VALUE
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMMutationMethods: {
    value: function (node, value) {
      if (value == null) {
        return node.removeAttribute('value');
      }

      // Number inputs get special treatment due to some edge cases in
      // Chrome. Let everything else assign the value attribute as normal.
      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
      if (node.type !== 'number' || node.hasAttribute('value') === false) {
        node.setAttribute('value', '' + value);
      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
        // Don't assign an attribute if validation reports bad
        // input. Chrome will clear the value. Additionally, don't
        // operate on inputs that have focus, otherwise Chrome might
        // strip off trailing decimal places and cause the user's
        // cursor position to jump to the beginning of the input.
        //
        // In ReactDOMInput, we have an onBlur event that will trigger
        // this function again when focus is lost.
        node.setAttribute('value', '' + value);
      }
    }
  }
};

var HAS_STRING_BOOLEAN_VALUE$1 = injection.HAS_STRING_BOOLEAN_VALUE;


var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

/**
 * This is a list of all SVG attributes that need special casing,
 * namespacing, or boolean value assignment.
 *
 * When adding attributes to this list, be sure to also add them to
 * the `possibleStandardNames` module to ensure casing and incorrect
 * name warnings.
 *
 * SVG Attributes List:
 * https://www.w3.org/TR/SVG/attindex.html
 * SMIL Spec:
 * https://www.w3.org/TR/smil
 */
var ATTRS = ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'x-height', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xmlns:xlink', 'xml:lang', 'xml:space'];

var SVGDOMPropertyConfig = {
  Properties: {
    autoReverse: HAS_STRING_BOOLEAN_VALUE$1,
    externalResourcesRequired: HAS_STRING_BOOLEAN_VALUE$1,
    preserveAlpha: HAS_STRING_BOOLEAN_VALUE$1
  },
  DOMAttributeNames: {
    autoReverse: 'autoReverse',
    externalResourcesRequired: 'externalResourcesRequired',
    preserveAlpha: 'preserveAlpha'
  },
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  }
};

var CAMELIZE = /[\-\:]([a-z])/g;
var capitalize = function (token) {
  return token[1].toUpperCase();
};

ATTRS.forEach(function (original) {
  var reactName = original.replace(CAMELIZE, capitalize);

  SVGDOMPropertyConfig.Properties[reactName] = 0;
  SVGDOMPropertyConfig.DOMAttributeNames[reactName] = original;
});

injection.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
injection.injectDOMPropertyConfig(SVGDOMPropertyConfig);

var ReactErrorUtils = {
  // Used by Fiber to simulate a try-catch.
  _caughtError: null,
  _hasCaughtError: false,

  // Used by event system to capture/rethrow the first error.
  _rethrowError: null,
  _hasRethrowError: false,

  injection: {
    injectErrorUtils: function (injectedErrorUtils) {
      !(typeof injectedErrorUtils.invokeGuardedCallback === 'function') ? invariant_1$1(false, 'Injected invokeGuardedCallback() must be a function.') : void 0;
      invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;
    }
  },

  /**
   * Call a function while guarding against errors that happens within it.
   * Returns an error if it throws, otherwise null.
   *
   * In production, this is implemented using a try-catch. The reason we don't
   * use a try-catch directly is so that we can swap out a different
   * implementation in DEV mode.
   *
   * @param {String} name of the guard to use for logging or debugging
   * @param {Function} func The function to invoke
   * @param {*} context The context to use when calling the function
   * @param {...*} args Arguments for function
   */
  invokeGuardedCallback: function (name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(ReactErrorUtils, arguments);
  },

  /**
   * Same as invokeGuardedCallback, but instead of returning an error, it stores
   * it in a global so it can be rethrown by `rethrowCaughtError` later.
   * TODO: See if _caughtError and _rethrowError can be unified.
   *
   * @param {String} name of the guard to use for logging or debugging
   * @param {Function} func The function to invoke
   * @param {*} context The context to use when calling the function
   * @param {...*} args Arguments for function
   */
  invokeGuardedCallbackAndCatchFirstError: function (name, func, context, a, b, c, d, e, f) {
    ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);
    if (ReactErrorUtils.hasCaughtError()) {
      var error = ReactErrorUtils.clearCaughtError();
      if (!ReactErrorUtils._hasRethrowError) {
        ReactErrorUtils._hasRethrowError = true;
        ReactErrorUtils._rethrowError = error;
      }
    }
  },

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    return rethrowCaughtError.apply(ReactErrorUtils, arguments);
  },

  hasCaughtError: function () {
    return ReactErrorUtils._hasCaughtError;
  },

  clearCaughtError: function () {
    if (ReactErrorUtils._hasCaughtError) {
      var error = ReactErrorUtils._caughtError;
      ReactErrorUtils._caughtError = null;
      ReactErrorUtils._hasCaughtError = false;
      return error;
    } else {
      invariant_1$1(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
    }
  }
};

var invokeGuardedCallback = function (name, func, context, a, b, c, d, e, f) {
  ReactErrorUtils._hasCaughtError = false;
  ReactErrorUtils._caughtError = null;
  var funcArgs = Array.prototype.slice.call(arguments, 3);
  try {
    func.apply(context, funcArgs);
  } catch (error) {
    ReactErrorUtils._caughtError = error;
    ReactErrorUtils._hasCaughtError = true;
  }
};

{
  // In DEV mode, we swap out invokeGuardedCallback for a special version
  // that plays more nicely with the browser's DevTools. The idea is to preserve
  // "Pause on exceptions" behavior. Because React wraps all user-provided
  // functions in invokeGuardedCallback, and the production version of
  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
  // like caught exceptions, and the DevTools won't pause unless the developer
  // takes the extra step of enabling pause on caught exceptions. This is
  // untintuitive, though, because even though React has caught the error, from
  // the developer's perspective, the error is uncaught.
  //
  // To preserve the expected "Pause on exceptions" behavior, we don't use a
  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
  // DOM node, and call the user-provided callback from inside an event handler
  // for that fake event. If the callback throws, the error is "captured" using
  // a global event handler. But because the error happens in a different
  // event loop context, it does not interrupt the normal program flow.
  // Effectively, this gives us try-catch behavior without actually using
  // try-catch. Neat!

  // Check that the browser supports the APIs we need to implement our special
  // DEV version of invokeGuardedCallback
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');

    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
      // Keeps track of whether the user-provided callback threw an error. We
      // set this to true at the beginning, then set it to false right after
      // calling the function. If the function errors, `didError` will never be
      // set to false. This strategy works even if the browser is flaky and
      // fails to call our global error handler, because it doesn't rely on
      // the error event at all.
      var didError = true;

      // Create an event handler for our fake event. We will synchronously
      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
      // call the user-provided callback.
      var funcArgs = Array.prototype.slice.call(arguments, 3);
      function callCallback() {
        // We immediately remove the callback from event listeners so that
        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
        // nested call would trigger the fake event handlers of any call higher
        // in the stack.
        fakeNode.removeEventListener(evtType, callCallback, false);
        func.apply(context, funcArgs);
        didError = false;
      }

      // Create a global error event handler. We use this to capture the value
      // that was thrown. It's possible that this error handler will fire more
      // than once; for example, if non-React code also calls `dispatchEvent`
      // and a handler for that event throws. We should be resilient to most of
      // those cases. Even if our error event handler fires more than once, the
      // last error event is always used. If the callback actually does error,
      // we know that the last error event is the correct one, because it's not
      // possible for anything else to have happened in between our callback
      // erroring and the code that follows the `dispatchEvent` call below. If
      // the callback doesn't error, but the error event was fired, we know to
      // ignore it because `didError` will be false, as described above.
      var error = void 0;
      // Use this to track whether the error event is ever called.
      var didSetError = false;
      var isCrossOriginError = false;

      function onError(event) {
        error = event.error;
        didSetError = true;
        if (error === null && event.colno === 0 && event.lineno === 0) {
          isCrossOriginError = true;
        }
      }

      // Create a fake event type.
      var evtType = 'react-' + (name ? name : 'invokeguardedcallback');

      // Attach our event handlers
      window.addEventListener('error', onError);
      fakeNode.addEventListener(evtType, callCallback, false);

      // Synchronously dispatch our fake event. If the user-provided function
      // errors, it will trigger our global error handler.
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);

      if (didError) {
        if (!didSetError) {
          // The callback errored, but the error event never fired.
          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
        } else if (isCrossOriginError) {
          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
        }
        ReactErrorUtils._hasCaughtError = true;
        ReactErrorUtils._caughtError = error;
      } else {
        ReactErrorUtils._hasCaughtError = false;
        ReactErrorUtils._caughtError = null;
      }

      // Remove our event listeners
      window.removeEventListener('error', onError);
    };

    invokeGuardedCallback = invokeGuardedCallbackDev;
  }
}

var rethrowCaughtError = function () {
  if (ReactErrorUtils._hasRethrowError) {
    var error = ReactErrorUtils._rethrowError;
    ReactErrorUtils._rethrowError = null;
    ReactErrorUtils._hasRethrowError = false;
    throw error;
  }
};

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? invariant_1$1(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;
    if (plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ? invariant_1$1(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
    plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant_1$1(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant_1$1(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
  eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!registrationNameModules[registrationName] ? invariant_1$1(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
  registrationNameModules[registrationName] = pluginModule;
  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  {
    var lowerCasedName = registrationName.toLowerCase();
    possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */

/**
 * Ordered list of injected plugins.
 */
var plugins = [];

/**
 * Mapping from event name to dispatch config
 */
var eventNameDispatchConfigs = {};

/**
 * Mapping from registration name to plugin module
 */
var registrationNameModules = {};

/**
 * Mapping from registration name to event name
 */
var registrationNameDependencies = {};

/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */
var possibleRegistrationNames = {};
// Trust the developer to only use possibleRegistrationNames in true

/**
 * Injects an ordering of plugins (by plugin name). This allows the ordering
 * to be decoupled from injection of the actual plugins so that ordering is
 * always deterministic regardless of packaging, on-the-fly injection, etc.
 *
 * @param {array} InjectedEventPluginOrder
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginOrder}
 */
function injectEventPluginOrder(injectedEventPluginOrder) {
  !!eventPluginOrder ? invariant_1$1(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0;
  // Clone the ordering so it cannot be dynamically mutated.
  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
  recomputePluginOrdering();
}

/**
 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
 * in the ordering injected by `injectEventPluginOrder`.
 *
 * Plugins can be injected as part of page initialization or on-the-fly.
 *
 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginsByName}
 */
function injectEventPluginsByName(injectedNamesToPlugins) {
  var isOrderingDirty = false;
  for (var pluginName in injectedNamesToPlugins) {
    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
      continue;
    }
    var pluginModule = injectedNamesToPlugins[pluginName];
    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
      !!namesToPlugins[pluginName] ? invariant_1$1(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
      namesToPlugins[pluginName] = pluginModule;
      isOrderingDirty = true;
    }
  }
  if (isOrderingDirty) {
    recomputePluginOrdering();
  }
}

var EventPluginRegistry = Object.freeze({
	plugins: plugins,
	eventNameDispatchConfigs: eventNameDispatchConfigs,
	registrationNameModules: registrationNameModules,
	registrationNameDependencies: registrationNameDependencies,
	possibleRegistrationNames: possibleRegistrationNames,
	injectEventPluginOrder: injectEventPluginOrder,
	injectEventPluginsByName: injectEventPluginsByName
});

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction$1 = function emptyFunction() {};

emptyFunction$1.thatReturns = makeEmptyFunction;
emptyFunction$1.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction$1.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction$1.thatReturnsNull = makeEmptyFunction(null);
emptyFunction$1.thatReturnsThis = function () {
  return this;
};
emptyFunction$1.thatReturnsArgument = function (arg) {
  return arg;
};

var emptyFunction_1 = emptyFunction$1;

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */





/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction_1;

{
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

var warning_1$1 = warning;

var getFiberCurrentPropsFromNode = null;
var getInstanceFromNode = null;
var getNodeFromInstance = null;

var injection$2 = {
  injectComponentTree: function (Injected) {
    getFiberCurrentPropsFromNode = Injected.getFiberCurrentPropsFromNode;
    getInstanceFromNode = Injected.getInstanceFromNode;
    getNodeFromInstance = Injected.getNodeFromInstance;

    {
      warning_1$1(getNodeFromInstance && getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');
    }
  }
};






var validateEventDispatches;
{
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    warning_1$1(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.');
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = getNodeFromInstance(inst);
  ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */


/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */


/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? invariant_1$1(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 * @param {function} cb Callback invoked with each element or a collection.
 * @param {?} [scope] Scope used as `this` in a callback.
 */
function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */

/**
 * Methods for injecting dependencies.
 */
var injection$1 = {
  /**
   * @param {array} InjectedEventPluginOrder
   * @public
   */
  injectEventPluginOrder: injectEventPluginOrder,

  /**
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   */
  injectEventPluginsByName: injectEventPluginsByName
};

/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */
function getListener(inst, registrationName) {
  var listener;

  // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
  // live here; needs to be moved to a better place soon
  var stateNode = inst.stateNode;
  if (!stateNode) {
    // Work in progress (ex: onload events in incremental mode).
    return null;
  }
  var props = getFiberCurrentPropsFromNode(stateNode);
  if (!props) {
    // Work in progress.
    return null;
  }
  listener = props[registrationName];
  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
    return null;
  }
  !(!listener || typeof listener === 'function') ? invariant_1$1(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
  return listener;
}

/**
 * Allows registered plugins an opportunity to extract events from top-level
 * native browser events.
 *
 * @return {*} An accumulation of synthetic events.
 * @internal
 */
function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var events;
  for (var i = 0; i < plugins.length; i++) {
    // Not every plugin in the ordering may be loaded at runtime.
    var possiblePlugin = plugins[i];
    if (possiblePlugin) {
      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
      if (extractedEvents) {
        events = accumulateInto(events, extractedEvents);
      }
    }
  }
  return events;
}

/**
 * Enqueues a synthetic event that should be dispatched when
 * `processEventQueue` is invoked.
 *
 * @param {*} events An accumulation of synthetic events.
 * @internal
 */
function enqueueEvents(events) {
  if (events) {
    eventQueue = accumulateInto(eventQueue, events);
  }
}

/**
 * Dispatches all synthetic events on the event queue.
 *
 * @internal
 */
function processEventQueue(simulated) {
  // Set `eventQueue` to null before processing it so that we can tell if more
  // events get enqueued while processing.
  var processingEventQueue = eventQueue;
  eventQueue = null;
  if (simulated) {
    forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
  } else {
    forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
  }
  !!eventQueue ? invariant_1$1(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0;
  // This would be a good time to rethrow if any of the event handlers threw.
  ReactErrorUtils.rethrowCaughtError();
}

var EventPluginHub = Object.freeze({
	injection: injection$1,
	getListener: getListener,
	extractEvents: extractEvents,
	enqueueEvents: enqueueEvents,
	processEventQueue: processEventQueue
});

var IndeterminateComponent = 0; // Before we know whether it is functional or class
var FunctionalComponent = 1;
var ClassComponent = 2;
var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
var HostComponent = 5;
var HostText = 6;
var CallComponent = 7;
var CallHandlerPhase = 8;
var ReturnComponent = 9;
var Fragment = 10;

var randomKey = Math.random().toString(36).slice(2);
var internalInstanceKey = '__reactInternalInstance$' + randomKey;
var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;

function precacheFiberNode$1(hostInst, node) {
  node[internalInstanceKey] = hostInst;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  // Walk up the tree until we find an ancestor whose instance we have cached.
  var parents = [];
  while (!node[internalInstanceKey]) {
    parents.push(node);
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var closest = void 0;
  var inst = node[internalInstanceKey];
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber, this will always be the deepest root.
    return inst;
  }
  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
    closest = inst;
  }

  return closest;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode$1(node) {
  var inst = node[internalInstanceKey];
  if (inst) {
    if (inst.tag === HostComponent || inst.tag === HostText) {
      return inst;
    } else {
      return null;
    }
  }
  return null;
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance$1(inst) {
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber this, is just the state node right now. We assume it will be
    // a host component or host text.
    return inst.stateNode;
  }

  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  invariant_1$1(false, 'getNodeFromInstance: Invalid argument.');
}

function getFiberCurrentPropsFromNode$1(node) {
  return node[internalEventHandlersKey] || null;
}

function updateFiberProps$1(node, props) {
  node[internalEventHandlersKey] = props;
}

var ReactDOMComponentTree = Object.freeze({
	precacheFiberNode: precacheFiberNode$1,
	getClosestInstanceFromNode: getClosestInstanceFromNode,
	getInstanceFromNode: getInstanceFromNode$1,
	getNodeFromInstance: getNodeFromInstance$1,
	getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode$1,
	updateFiberProps: updateFiberProps$1
});

function getParent(inst) {
  do {
    inst = inst['return'];
    // TODO: If this is a HostRoot we might want to bail out.
    // That is depending on if we want nested subtrees (layers) to bubble
    // events to their parent. We could also go through parentNode on the
    // host node but that wouldn't work for React Native and doesn't let us
    // do the portal feature.
  } while (inst && inst.tag !== HostComponent);
  if (inst) {
    return inst;
  }
  return null;
}

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  var depthA = 0;
  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = getParent(instA);
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = getParent(instB);
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB || instA === instB.alternate) {
      return instA;
    }
    instA = getParent(instA);
    instB = getParent(instB);
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */


/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  return getParent(inst);
}

/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = getParent(inst);
  }
  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (true) {
    if (!from) {
      break;
    }
    if (from === common) {
      break;
    }
    var alternate = from.alternate;
    if (alternate !== null && alternate === common) {
      break;
    }
    pathFrom.push(from);
    from = getParent(from);
  }
  var pathTo = [];
  while (true) {
    if (!to) {
      break;
    }
    if (to === common) {
      break;
    }
    var _alternate = to.alternate;
    if (_alternate !== null && _alternate === common) {
      break;
    }
    pathTo.push(to);
    to = getParent(to);
  }
  for (var i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (var _i = pathTo.length; _i-- > 0;) {
    fn(pathTo[_i], 'captured', argTo);
  }
}

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing even a
 * single one.
 */

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  {
    warning_1$1(inst, 'Dispatching inst must not be null');
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? getParentInstance(targetInst) : null;
    traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (inst && event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

var EventPropagators = Object.freeze({
	accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches,
	accumulateDirectDispatches: accumulateDirectDispatches
});

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

var ExecutionEnvironment_1 = ExecutionEnvironment;

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment_1.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

/**
 * This helper object stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */
var compositionState = {
  _root: null,
  _startText: null,
  _fallbackText: null
};

function initialize(nativeEventTarget) {
  compositionState._root = nativeEventTarget;
  compositionState._startText = getText();
  return true;
}

function reset() {
  compositionState._root = null;
  compositionState._startText = null;
  compositionState._fallbackText = null;
}

function getData() {
  if (compositionState._fallbackText) {
    return compositionState._fallbackText;
  }

  var start;
  var startValue = compositionState._startText;
  var startLength = startValue.length;
  var end;
  var endValue = getText();
  var endLength = endValue.length;

  for (start = 0; start < startLength; start++) {
    if (startValue[start] !== endValue[start]) {
      break;
    }
  }

  var minEnd = startLength - start;
  for (end = 1; end <= minEnd; end++) {
    if (startValue[startLength - end] !== endValue[endLength - end]) {
      break;
    }
  }

  var sliceTail = end > 1 ? 1 - end : undefined;
  compositionState._fallbackText = endValue.slice(start, sliceTail);
  return compositionState._fallbackText;
}

function getText() {
  if ('value' in compositionState._root) {
    return compositionState._root.value;
  }
  return compositionState._root[getTextContentAccessor()];
}

var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

var _assign = ReactInternals.assign;

/* eslint valid-typeof: 0 */

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';
var EVENT_POOL_SIZE = 10;

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction_1.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction_1.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction_1.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction_1.thatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction_1.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction_1.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction_1.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction_1.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction_1));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction_1));
    }
  }
});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;
  addEventPoolingTo(Class);
};

/** Proxying after everything set on SyntheticEvent
 * to resolve Proxy issue on some WebKit browsers
 * in which some Event properties are set to undefined (GH#10010)
 */
{
  if (isProxySupported) {
    /*eslint-disable no-func-assign */
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function (target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function (constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function (target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
              warning_1$1(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.');
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
    /*eslint-enable no-func-assign */
  }
}

addEventPoolingTo(SyntheticEvent);

/**
 * Helper to nullify syntheticEvent instance properties when destructing
 *
 * @param {String} propName
 * @param {?object} getVal
 * @return {object} defineProperty object
 */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    warning_1$1(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
  }
}

function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
  var EventConstructor = this;
  if (EventConstructor.eventPool.length) {
    var instance = EventConstructor.eventPool.pop();
    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
    return instance;
  }
  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
}

function releasePooledEvent(event) {
  var EventConstructor = this;
  !(event instanceof EventConstructor) ? invariant_1$1(false, 'Trying to release an event instance  into a pool of a different type.') : void 0;
  event.destructor();
  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
    EventConstructor.eventPool.push(event);
  }
}

function addEventPoolingTo(EventConstructor) {
  EventConstructor.eventPool = [];
  EventConstructor.getPooled = getPooledEvent;
  EventConstructor.release = releasePooledEvent;
}

var SyntheticEvent$1 = SyntheticEvent;

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent$1.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent$1.augmentClass(SyntheticInputEvent, InputEventInterface);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment_1.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment_1.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment_1.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment_1.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case 'topCompositionStart':
      return eventTypes.compositionStart;
    case 'topCompositionEnd':
      return eventTypes.compositionEnd;
    case 'topCompositionUpdate':
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topKeyUp':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case 'topKeyDown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case 'topKeyPress':
    case 'topMouseDown':
    case 'topBlur':
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition status, if any.
var isComposing = false;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!isComposing) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!isComposing && eventType === eventTypes.compositionStart) {
      isComposing = initialize(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (isComposing) {
        fallbackData = getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {TopLevelTypes} topLevelType Record from `BrowserEventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topCompositionEnd':
      return getDataFromCustomEvent(nativeEvent);
    case 'topKeyPress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'topTextInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `BrowserEventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (isComposing) {
    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = getData();
      reset();
      isComposing = false;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case 'topPaste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case 'topKeyPress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (!isKeypressCommand(nativeEvent)) {
        // IE fires the `keypress` event when a user types an emoji via
        // Touch keyboard of Windows.  In such a case, the `char` property
        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
        // is 2, the property `which` does not represent an emoji correctly.
        // In such a case, we directly return the `char` property instead of
        // using `which`.
        if (nativeEvent.char && nativeEvent.char.length > 1) {
          return nativeEvent.char;
        } else if (nativeEvent.which) {
          return String.fromCharCode(nativeEvent.which);
        }
      }
      return null;
    case 'topCompositionEnd':
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
  }
};

// Use to restore controlled state after a change event has fired.

var fiberHostComponent = null;

var ReactControlledComponentInjection = {
  injectFiberControlledHostComponent: function (hostComponentImpl) {
    // The fiber implementation doesn't use dynamic dispatch so we need to
    // inject the implementation.
    fiberHostComponent = hostComponentImpl;
  }
};

var restoreTarget = null;
var restoreQueue = null;

function restoreStateOfTarget(target) {
  // We perform this translation at the end of the event loop so that we
  // always receive the correct fiber here
  var internalInstance = getInstanceFromNode(target);
  if (!internalInstance) {
    // Unmounted
    return;
  }
  !(fiberHostComponent && typeof fiberHostComponent.restoreControlledState === 'function') ? invariant_1$1(false, 'Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
  fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
}

var injection$3 = ReactControlledComponentInjection;

function enqueueStateRestore(target) {
  if (restoreTarget) {
    if (restoreQueue) {
      restoreQueue.push(target);
    } else {
      restoreQueue = [target];
    }
  } else {
    restoreTarget = target;
  }
}

function restoreStateIfNeeded() {
  if (!restoreTarget) {
    return;
  }
  var target = restoreTarget;
  var queuedTargets = restoreQueue;
  restoreTarget = null;
  restoreQueue = null;

  restoreStateOfTarget(target);
  if (queuedTargets) {
    for (var i = 0; i < queuedTargets.length; i++) {
      restoreStateOfTarget(queuedTargets[i]);
    }
  }
}

var ReactControlledComponent = Object.freeze({
	injection: injection$3,
	enqueueStateRestore: enqueueStateRestore,
	restoreStateIfNeeded: restoreStateIfNeeded
});

// Used as a way to call batchedUpdates when we don't have a reference to
// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.

// Defaults
var fiberBatchedUpdates = function (fn, bookkeeping) {
  return fn(bookkeeping);
};

var isNestingBatched = false;
function batchedUpdates(fn, bookkeeping) {
  if (isNestingBatched) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state. Therefore, we add the target to
    // a queue of work.
    return fiberBatchedUpdates(fn, bookkeeping);
  }
  isNestingBatched = true;
  try {
    return fiberBatchedUpdates(fn, bookkeeping);
  } finally {
    // Here we wait until all updates have propagated, which is important
    // when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    // Then we restore state of any controlled component.
    isNestingBatched = false;
    restoreStateIfNeeded();
  }
}

var ReactGenericBatchingInjection = {
  injectFiberBatchedUpdates: function (_batchedUpdates) {
    fiberBatchedUpdates = _batchedUpdates;
  }
};

var injection$4 = ReactGenericBatchingInjection;

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

/**
 * HTML nodeType values that represent the type of the node
 */

var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var DOCUMENT_NODE = 9;
var DOCUMENT_FRAGMENT_NODE = 11;

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === TEXT_NODE ? target.parentNode : target;
}

var useHasFeature;
if (ExecutionEnvironment_1.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment_1.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(node) {
  return node._valueTracker;
}

function detachTracker(node) {
  node._valueTracker = null;
}

function getValueFromNode(node) {
  var value = '';
  if (!node) {
    return value;
  }

  if (isCheckable(node)) {
    value = node.checked ? 'true' : 'false';
  } else {
    value = node.value;
  }

  return value;
}

function trackValueOnNode(node) {
  var valueField = isCheckable(node) ? 'checked' : 'value';
  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

  var currentValue = '' + node[valueField];

  // if someone has already defined a value or Safari, then bail
  // and don't track value will cause over reporting of changes,
  // but it's better then a hard failure
  // (needed for certain tests that spyOn input values and Safari)
  if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
    return;
  }

  Object.defineProperty(node, valueField, {
    enumerable: descriptor.enumerable,
    configurable: true,
    get: function () {
      return descriptor.get.call(this);
    },
    set: function (value) {
      currentValue = '' + value;
      descriptor.set.call(this, value);
    }
  });

  var tracker = {
    getValue: function () {
      return currentValue;
    },
    setValue: function (value) {
      currentValue = '' + value;
    },
    stopTracking: function () {
      detachTracker(node);
      delete node[valueField];
    }
  };
  return tracker;
}

function track(node) {
  if (getTracker(node)) {
    return;
  }

  // TODO: Once it's just Fiber we can move this to node._wrapperState
  node._valueTracker = trackValueOnNode(node);
}

function updateValueIfChanged(node) {
  if (!node) {
    return false;
  }

  var tracker = getTracker(node);
  // if there is no tracker at this point it's unlikely
  // that trying again will succeed
  if (!tracker) {
    return true;
  }

  var lastValue = tracker.getValue();
  var nextValue = getValueFromNode(node);
  if (nextValue !== lastValue) {
    tracker.setValue(nextValue);
    return true;
  }
  return false;
}

var eventTypes$1 = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent$1.getPooled(eventTypes$1.change, inst, nativeEvent, target);
  event.type = 'change';
  // Flag this event loop as needing state restore.
  enqueueStateRestore(target);
  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  enqueueEvents(event);
  processEventQueue(false);
}

function getInstIfValueChanged(targetInst) {
  var targetNode = getNodeFromInstance$1(targetInst);
  if (updateValueIfChanged(targetNode)) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topChange') {
    return targetInst;
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment_1.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
}

/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onpropertychange', handlePropertyChange);
  activeElement = null;
  activeElementInst = null;
}

/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  if (getInstIfValueChanged(activeElementInst)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst);
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
  if (topLevelType === 'topClick') {
    return getInstIfValueChanged(targetInst);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topInput' || topLevelType === 'topChange') {
    return getInstIfValueChanged(targetInst);
  }
}

function handleControlledInputBlur(inst, node) {
  // TODO: In IE, inst is occasionally null. Why?
  if (inst == null) {
    return;
  }

  // Fiber and ReactDOM keep wrapper state in separate places
  var state = inst._wrapperState || node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  // If controlled, assign the value attribute to the current value on blur
  var value = '' + node.value;
  if (node.getAttribute('value') !== value) {
    node.setAttribute('value', value);
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {
  eventTypes: eventTypes$1,

  _isInputEventSupported: isInputEventSupported,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

    var getTargetInstFunc, handleEventFunc;
    if (shouldUseChangeEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForChangeEvent;
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);
      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }

    // When blurring, set the value attribute for number inputs
    if (topLevelType === 'topBlur') {
      handleControlledInputBlur(targetInst, targetNode);
    }
  }
};

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: null,
  detail: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent$1.augmentClass(SyntheticUIEvent, UIEventInterface);

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  pageX: null,
  pageY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: null,
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

var eventTypes$2 = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: ['topMouseOut', 'topMouseOver']
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: ['topMouseOut', 'topMouseOver']
  }
};

var EnterLeaveEventPlugin = {
  eventTypes: eventTypes$2,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    if (topLevelType === 'topMouseOut') {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromNode = from == null ? win : getNodeFromInstance$1(from);
    var toNode = to == null ? win : getNodeFromInstance$1(to);

    var leave = SyntheticMouseEvent.getPooled(eventTypes$2.mouseLeave, from, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = SyntheticMouseEvent.getPooled(eventTypes$2.mouseEnter, to, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }
};

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */

/**
 * This API should be called `delete` but we'd have to make sure to always
 * transform these to strings for IE support. When this transform is fully
 * supported we can rename it.
 */


function get(key) {
  return key._reactInternalFiber;
}

function has(key) {
  return key._reactInternalFiber !== undefined;
}

function set(key, value) {
  key._reactInternalFiber = value;
}

var ReactInternals$1 = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

var ReactCurrentOwner = ReactInternals$1.ReactCurrentOwner;
var ReactDebugCurrentFrame = ReactInternals$1.ReactDebugCurrentFrame;

function getComponentName(fiber) {
  var type = fiber.type;

  if (typeof type === 'string') {
    return type;
  }
  if (typeof type === 'function') {
    return type.displayName || type.name;
  }
  return null;
}

// Don't change these two values:
var NoEffect = 0; //           0b00000000
var PerformedWork = 1; //      0b00000001

// You can change the rest (and add more).
var Placement = 2; //          0b00000010
var Update = 4; //             0b00000100
var PlacementAndUpdate = 6; // 0b00000110
var Deletion = 8; //           0b00001000
var ContentReset = 16; //      0b00010000
var Callback = 32; //          0b00100000
var Err = 64; //               0b01000000
var Ref = 128; //              0b10000000

var MOUNTING = 1;
var MOUNTED = 2;
var UNMOUNTED = 3;

function isFiberMountedImpl(fiber) {
  var node = fiber;
  if (!fiber.alternate) {
    // If there is no alternate, this might be a new tree that isn't inserted
    // yet. If it is, then it will have a pending insertion effect on it.
    if ((node.effectTag & Placement) !== NoEffect) {
      return MOUNTING;
    }
    while (node['return']) {
      node = node['return'];
      if ((node.effectTag & Placement) !== NoEffect) {
        return MOUNTING;
      }
    }
  } else {
    while (node['return']) {
      node = node['return'];
    }
  }
  if (node.tag === HostRoot) {
    // TODO: Check if this was a nested HostRoot when used with
    // renderContainerIntoSubtree.
    return MOUNTED;
  }
  // If we didn't hit the root, that means that we're in an disconnected tree
  // that has been unmounted.
  return UNMOUNTED;
}

function isFiberMounted(fiber) {
  return isFiberMountedImpl(fiber) === MOUNTED;
}

function isMounted(component) {
  {
    var owner = ReactCurrentOwner.current;
    if (owner !== null && owner.tag === ClassComponent) {
      var ownerFiber = owner;
      var instance = ownerFiber.stateNode;
      warning_1$1(instance._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber) || 'A component');
      instance._warnedAboutRefsInRender = true;
    }
  }

  var fiber = get(component);
  if (!fiber) {
    return false;
  }
  return isFiberMountedImpl(fiber) === MOUNTED;
}

function assertIsMounted(fiber) {
  !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant_1$1(false, 'Unable to find node on an unmounted component.') : void 0;
}

function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;
  if (!alternate) {
    // If there is no alternate, then we only need to check if it is mounted.
    var state = isFiberMountedImpl(fiber);
    !(state !== UNMOUNTED) ? invariant_1$1(false, 'Unable to find node on an unmounted component.') : void 0;
    if (state === MOUNTING) {
      return null;
    }
    return fiber;
  }
  // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.
  var a = fiber;
  var b = alternate;
  while (true) {
    var parentA = a['return'];
    var parentB = parentA ? parentA.alternate : null;
    if (!parentA || !parentB) {
      // We're at the root.
      break;
    }

    // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.
    if (parentA.child === parentB.child) {
      var child = parentA.child;
      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          assertIsMounted(parentA);
          return fiber;
        }
        if (child === b) {
          // We've determined that B is the current branch.
          assertIsMounted(parentA);
          return alternate;
        }
        child = child.sibling;
      }
      // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.
      invariant_1$1(false, 'Unable to find node on an unmounted component.');
    }

    if (a['return'] !== b['return']) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;
      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }
        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }
        _child = _child.sibling;
      }
      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;
        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }
          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }
          _child = _child.sibling;
        }
        !didFindChild ? invariant_1$1(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
      }
    }

    !(a.alternate === b) ? invariant_1$1(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  }
  // If the root is not a host container, we're in a disconnected tree. I.e.
  // unmounted.
  !(a.tag === HostRoot) ? invariant_1$1(false, 'Unable to find node on an unmounted component.') : void 0;
  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  }
  // Otherwise B has to be current branch.
  return alternate;
}

function findCurrentHostFiber(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);
  if (!currentParent) {
    return null;
  }

  // Next we'll drill down this component to find the first HostComponent/Text.
  var node = currentParent;
  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child) {
      node.child['return'] = node;
      node = node.child;
      continue;
    }
    if (node === currentParent) {
      return null;
    }
    while (!node.sibling) {
      if (!node['return'] || node['return'] === currentParent) {
        return null;
      }
      node = node['return'];
    }
    node.sibling['return'] = node['return'];
    node = node.sibling;
  }
  // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable
  return null;
}

function findCurrentHostFiberWithNoPortals(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);
  if (!currentParent) {
    return null;
  }

  // Next we'll drill down this component to find the first HostComponent/Text.
  var node = currentParent;
  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child && node.tag !== HostPortal) {
      node.child['return'] = node;
      node = node.child;
      continue;
    }
    if (node === currentParent) {
      return null;
    }
    while (!node.sibling) {
      if (!node['return'] || node['return'] === currentParent) {
        return null;
      }
      node = node['return'];
    }
    node.sibling['return'] = node['return'];
    node = node.sibling;
  }
  // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable
  return null;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */



/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function listen(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function remove() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function capture(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction_1
      };
    }
  },

  registerDefault: function registerDefault() {}
};

var EventListener_1 = EventListener;

var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
var callbackBookkeepingPool = [];

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findRootContainerNode(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst['return']) {
    inst = inst['return'];
  }
  if (inst.tag !== HostRoot) {
    // This can happen if we're in a detached tree.
    return null;
  }
  return inst.stateNode.containerInfo;
}

// Used to store ancestor hierarchy in top level callback
function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
  if (callbackBookkeepingPool.length) {
    var instance = callbackBookkeepingPool.pop();
    instance.topLevelType = topLevelType;
    instance.nativeEvent = nativeEvent;
    instance.targetInst = targetInst;
    return instance;
  }
  return {
    topLevelType: topLevelType,
    nativeEvent: nativeEvent,
    targetInst: targetInst,
    ancestors: []
  };
}

function releaseTopLevelCallbackBookKeeping(instance) {
  instance.topLevelType = null;
  instance.nativeEvent = null;
  instance.targetInst = null;
  instance.ancestors.length = 0;
  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
    callbackBookkeepingPool.push(instance);
  }
}

function handleTopLevelImpl(bookKeeping) {
  var targetInst = bookKeeping.targetInst;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    if (!ancestor) {
      bookKeeping.ancestors.push(ancestor);
      break;
    }
    var root = findRootContainerNode(ancestor);
    if (!root) {
      break;
    }
    bookKeeping.ancestors.push(ancestor);
    ancestor = getClosestInstanceFromNode(root);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    _handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

// TODO: can we stop exporting these?
var _enabled = true;
var _handleTopLevel = void 0;

function setHandleTopLevel(handleTopLevel) {
  _handleTopLevel = handleTopLevel;
}

function setEnabled(enabled) {
  _enabled = !!enabled;
}

function isEnabled() {
  return _enabled;
}

/**
 * Traps top-level events by using event bubbling.
 *
 * @param {string} topLevelType Record from `BrowserEventConstants`.
 * @param {string} handlerBaseName Event name (e.g. "click").
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */
function trapBubbledEvent(topLevelType, handlerBaseName, element) {
  if (!element) {
    return null;
  }
  return EventListener_1.listen(element, handlerBaseName, dispatchEvent.bind(null, topLevelType));
}

/**
 * Traps a top-level event by using event capturing.
 *
 * @param {string} topLevelType Record from `BrowserEventConstants`.
 * @param {string} handlerBaseName Event name (e.g. "click").
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */
function trapCapturedEvent(topLevelType, handlerBaseName, element) {
  if (!element) {
    return null;
  }
  return EventListener_1.capture(element, handlerBaseName, dispatchEvent.bind(null, topLevelType));
}

function dispatchEvent(topLevelType, nativeEvent) {
  if (!_enabled) {
    return;
  }

  var nativeEventTarget = getEventTarget(nativeEvent);
  var targetInst = getClosestInstanceFromNode(nativeEventTarget);
  if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) {
    // If we get an event (ex: img onload) before committing that
    // component's mount, ignore it for now (that is, treat it as if it was an
    // event on a non-React tree). We might also consider queueing events and
    // dispatching them after the mount.
    targetInst = null;
  }

  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);

  try {
    // Event queue being processed in the same cycle allows
    // `preventDefault`.
    batchedUpdates(handleTopLevelImpl, bookKeeping);
  } finally {
    releaseTopLevelCallbackBookKeeping(bookKeeping);
  }
}

var ReactDOMEventListener = Object.freeze({
	get _enabled () { return _enabled; },
	get _handleTopLevel () { return _handleTopLevel; },
	setHandleTopLevel: setHandleTopLevel,
	setEnabled: setEnabled,
	isEnabled: isEnabled,
	trapBubbledEvent: trapBubbledEvent,
	trapCapturedEvent: trapCapturedEvent,
	dispatchEvent: dispatchEvent
});

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (ExecutionEnvironment_1.canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return '';
}

/**
 * Types of raw signals from the browser caught at the top level.
 *
 * For events like 'submit' which don't consistently bubble (which we
 * trap at a lower node than `document`), binding at `document` would
 * cause duplicate events so we don't include them here.
 */
var topLevelTypes$1 = {
  topAbort: 'abort',
  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
  topBlur: 'blur',
  topCancel: 'cancel',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topClose: 'close',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoad: 'load',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topToggle: 'toggle',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

var BrowserEventConstants = {
  topLevelTypes: topLevelTypes$1
};

function runEventQueueInBatch(events) {
  enqueueEvents(events);
  processEventQueue(false);
}

/**
 * Streams a fired top-level event to `EventPluginHub` where plugins have the
 * opportunity to create `ReactEvent`s to be dispatched.
 */
function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
  runEventQueueInBatch(events);
}

var topLevelTypes = BrowserEventConstants.topLevelTypes;

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactDOMEventListener, which is injected and can therefore support
 *    pluggable event sources. This is the only work that occurs in the main
 *    thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var reactTopListenersCounter = 0;

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * We listen for bubbled touch events on the document object.
 *
 * Firefox v8.01 (and possibly others) exhibited strange behavior when
 * mounting `onmousemove` events at some node that was not the document
 * element. The symptoms were that if your mouse is not moving over something
 * contained within that mount point (for example on the background) the
 * top-level listeners for `onmousemove` won't be called. However, if you
 * register the `mousemove` on the document object, then it will of course
 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
 * top-level listeners to the document object only, at least for these
 * movement types of events and possibly all events.
 *
 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
 *
 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
 * they bubble to document.
 *
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @param {object} contentDocumentHandle Document which owns the container
 */
function listenTo(registrationName, contentDocumentHandle) {
  var mountAt = contentDocumentHandle;
  var isListening = getListeningForDocument(mountAt);
  var dependencies = registrationNameDependencies[registrationName];

  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];
    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
      if (dependency === 'topWheel') {
        if (isEventSupported('wheel')) {
          trapBubbledEvent('topWheel', 'wheel', mountAt);
        } else if (isEventSupported('mousewheel')) {
          trapBubbledEvent('topWheel', 'mousewheel', mountAt);
        } else {
          // Firefox needs to capture a different mouse scroll event.
          // @see http://www.quirksmode.org/dom/events/tests/scroll.html
          trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
        }
      } else if (dependency === 'topScroll') {
        trapCapturedEvent('topScroll', 'scroll', mountAt);
      } else if (dependency === 'topFocus' || dependency === 'topBlur') {
        trapCapturedEvent('topFocus', 'focus', mountAt);
        trapCapturedEvent('topBlur', 'blur', mountAt);

        // to make sure blur and focus event listeners are only attached once
        isListening.topBlur = true;
        isListening.topFocus = true;
      } else if (dependency === 'topCancel') {
        if (isEventSupported('cancel', true)) {
          trapCapturedEvent('topCancel', 'cancel', mountAt);
        }
        isListening.topCancel = true;
      } else if (dependency === 'topClose') {
        if (isEventSupported('close', true)) {
          trapCapturedEvent('topClose', 'close', mountAt);
        }
        isListening.topClose = true;
      } else if (topLevelTypes.hasOwnProperty(dependency)) {
        trapBubbledEvent(dependency, topLevelTypes[dependency], mountAt);
      }

      isListening[dependency] = true;
    }
  }
}

function isListeningToAllDependencies(registrationName, mountAt) {
  var isListening = getListeningForDocument(mountAt);
  var dependencies = registrationNameDependencies[registrationName];
  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];
    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
      return false;
    }
  }
  return true;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?DOMDocument} doc Defaults to current document.
 * @return {?DOMElement}
 */
function getActiveElement(doc) /*?DOMElement*/{
  doc = doc || (typeof document !== 'undefined' ? document : undefined);
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

var getActiveElement_1$1 = getActiveElement;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */



var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

var shallowEqual_1$1 = shallowEqual;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

var isNode_1 = isNode;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */



/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode_1(object) && object.nodeType == 3;
}

var isTextNode_1 = isTextNode;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode_1(outerNode)) {
    return false;
  } else if (isTextNode_1(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

var containsNode_1$1 = containsNode;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * @param {DOMElement} node input/textarea to focus
 */

function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

var focusNode_1$1 = focusNode;

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === TEXT_NODE) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */
function getOffsets(outerNode) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
  // expose properties, triggering a "Permission denied error" if any of its
  // properties are accessed. The only seemingly possible way to avoid erroring
  // is to access a property that typically works for non-anonymous divs and
  // catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    anchorNode.nodeType;
    focusNode.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
}

/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */
function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
  var length = 0;
  var start = -1;
  var end = -1;
  var indexWithinAnchor = 0;
  var indexWithinFocus = 0;
  var node = outerNode;
  var parentNode = null;

  outer: while (true) {
    var next = null;

    while (true) {
      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
        start = length + anchorOffset;
      }
      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
        end = length + focusOffset;
      }

      if (node.nodeType === TEXT_NODE) {
        length += node.nodeValue.length;
      }

      if ((next = node.firstChild) === null) {
        break;
      }
      // Moving from `node` to its first child `next`.
      parentNode = node;
      node = next;
    }

    while (true) {
      if (node === outerNode) {
        // If `outerNode` has children, this is always the second time visiting
        // it. If it has no children, this is still the first loop, and the only
        // valid selection is anchorNode and focusNode both equal to this node
        // and both offsets 0, in which case we will have handled above.
        break outer;
      }
      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
        start = length;
      }
      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
        end = length;
      }
      if ((next = node.nextSibling) !== null) {
        break;
      }
      node = parentNode;
      parentNode = node.parentNode;
    }

    // Moving from `node` to its next sibling `next`.
    node = next;
  }

  if (start === -1 || end === -1) {
    // This should never happen. (Would happen if the anchor/focus nodes aren't
    // actually inside the passed-in node.)
    return null;
  }

  return {
    start: start,
    end: end
  };
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
      return;
    }
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

function isInDocument(node) {
  return containsNode_1$1(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

function hasSelectionCapabilities(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
}

function getSelectionInformation() {
  var focusedElem = getActiveElement_1$1();
  return {
    focusedElem: focusedElem,
    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
  };
}

/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */
function restoreSelection(priorSelectionInformation) {
  var curFocusedElem = getActiveElement_1$1();
  var priorFocusedElem = priorSelectionInformation.focusedElem;
  var priorSelectionRange = priorSelectionInformation.selectionRange;
  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
    if (hasSelectionCapabilities(priorFocusedElem)) {
      setSelection(priorFocusedElem, priorSelectionRange);
    }

    // Focusing a node can change the scroll position, which is undesirable
    var ancestors = [];
    var ancestor = priorFocusedElem;
    while (ancestor = ancestor.parentNode) {
      if (ancestor.nodeType === ELEMENT_NODE) {
        ancestors.push({
          element: ancestor,
          left: ancestor.scrollLeft,
          top: ancestor.scrollTop
        });
      }
    }

    focusNode_1$1(priorFocusedElem);

    for (var i = 0; i < ancestors.length; i++) {
      var info = ancestors[i];
      info.element.scrollLeft = info.left;
      info.element.scrollTop = info.top;
    }
  }
}

/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */
function getSelection$1(input) {
  var selection = void 0;

  if ('selectionStart' in input) {
    // Modern browser with input or textarea.
    selection = {
      start: input.selectionStart,
      end: input.selectionEnd
    };
  } else {
    // Content editable or old IE textarea.
    selection = getOffsets(input);
  }

  return selection || { start: 0, end: 0 };
}

/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */
function setSelection(input, offsets) {
  var start = offsets.start,
      end = offsets.end;

  if (end === undefined) {
    end = start;
  }

  if ('selectionStart' in input) {
    input.selectionStart = start;
    input.selectionEnd = Math.min(end, input.value.length);
  } else {
    setOffsets(input, offsets);
  }
}

var skipSelectionChangeEvent = ExecutionEnvironment_1.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes$3 = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
  }
};

var activeElement$1 = null;
var activeElementInst$1 = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement_1$1()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement$1);
  if (!lastSelection || !shallowEqual_1$1(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent$1.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement$1;

    accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {
  eventTypes: eventTypes$3,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : nativeEventTarget.nodeType === DOCUMENT_NODE ? nativeEventTarget : nativeEventTarget.ownerDocument;
    // Track whether all listeners exists for this plugin. If none exist, we do
    // not extract events. See #3639.
    if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
      return null;
    }

    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case 'topFocus':
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement$1 = targetNode;
          activeElementInst$1 = targetInst;
          lastSelection = null;
        }
        break;
      case 'topBlur':
        activeElement$1 = null;
        activeElementInst$1 = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case 'topMouseDown':
        mouseDown = true;
        break;
      case 'topContextMenu':
      case 'topMouseUp':
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case 'topSelectionChange':
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case 'topKeyDown':
      case 'topKeyUp':
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  }
};

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var AnimationEventInterface = {
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent$1.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent$1.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  '8': 'Backspace',
  '9': 'Tab',
  '12': 'Clear',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '19': 'Pause',
  '20': 'CapsLock',
  '27': 'Escape',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'ArrowLeft',
  '38': 'ArrowUp',
  '39': 'ArrowRight',
  '40': 'ArrowDown',
  '45': 'Insert',
  '46': 'Delete',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '224': 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var TransitionEventInterface = {
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent$1.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: ['topAbort'],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = {
 *   'topAbort': { sameConfig }
 * };
 */
var eventTypes$4 = {};
var topLevelEventsToDispatchConfig = {};
['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'cancel', 'canPlay', 'canPlayThrough', 'click', 'close', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'toggle', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;
  var topEvent = 'top' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent]
  };
  eventTypes$4[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
});

// Only used in DEV for exhaustiveness validation.
var knownHTMLTopLevelTypes = ['topAbort', 'topCancel', 'topCanPlay', 'topCanPlayThrough', 'topClose', 'topDurationChange', 'topEmptied', 'topEncrypted', 'topEnded', 'topError', 'topInput', 'topInvalid', 'topLoad', 'topLoadedData', 'topLoadedMetadata', 'topLoadStart', 'topPause', 'topPlay', 'topPlaying', 'topProgress', 'topRateChange', 'topReset', 'topSeeked', 'topSeeking', 'topStalled', 'topSubmit', 'topSuspend', 'topTimeUpdate', 'topToggle', 'topVolumeChange', 'topWaiting'];

var SimpleEventPlugin = {
  eventTypes: eventTypes$4,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case 'topKeyPress':
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case 'topKeyDown':
      case 'topKeyUp':
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case 'topBlur':
      case 'topFocus':
        EventConstructor = SyntheticFocusEvent;
        break;
      case 'topClick':
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case 'topDoubleClick':
      case 'topMouseDown':
      case 'topMouseMove':
      case 'topMouseUp':
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case 'topMouseOut':
      case 'topMouseOver':
      case 'topContextMenu':
        EventConstructor = SyntheticMouseEvent;
        break;
      case 'topDrag':
      case 'topDragEnd':
      case 'topDragEnter':
      case 'topDragExit':
      case 'topDragLeave':
      case 'topDragOver':
      case 'topDragStart':
      case 'topDrop':
        EventConstructor = SyntheticDragEvent;
        break;
      case 'topTouchCancel':
      case 'topTouchEnd':
      case 'topTouchMove':
      case 'topTouchStart':
        EventConstructor = SyntheticTouchEvent;
        break;
      case 'topAnimationEnd':
      case 'topAnimationIteration':
      case 'topAnimationStart':
        EventConstructor = SyntheticAnimationEvent;
        break;
      case 'topTransitionEnd':
        EventConstructor = SyntheticTransitionEvent;
        break;
      case 'topScroll':
        EventConstructor = SyntheticUIEvent;
        break;
      case 'topWheel':
        EventConstructor = SyntheticWheelEvent;
        break;
      case 'topCopy':
      case 'topCut':
      case 'topPaste':
        EventConstructor = SyntheticClipboardEvent;
        break;
      default:
        {
          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
            warning_1$1(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
          }
        }
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent$1;
        break;
    }
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    accumulateTwoPhaseDispatches(event);
    return event;
  }
};

setHandleTopLevel(handleTopLevel);

/**
 * Inject modules for resolving DOM hierarchy and plugin ordering.
 */
injection$1.injectEventPluginOrder(DOMEventPluginOrder);
injection$2.injectComponentTree(ReactDOMComponentTree);

/**
 * Some important event plugins included by default (without having to require
 * them).
 */
injection$1.injectEventPluginsByName({
  SimpleEventPlugin: SimpleEventPlugin,
  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
  ChangeEventPlugin: ChangeEventPlugin,
  SelectEventPlugin: SelectEventPlugin,
  BeforeInputEventPlugin: BeforeInputEventPlugin
});

var enableAsyncSubtreeAPI = true;
var enableAsyncSchedulingByDefaultInReactDOM = false;
// Exports React.Fragment
var enableReactFragment = false;
// Exports ReactDOM.createRoot
var enableCreateRoot = false;
var enableUserTimingAPI = true;

// Mutating mode (React DOM, React ART, React Native):
var enableMutatingReconciler = true;
// Experimental noop mode (currently unused):
var enableNoopReconciler = false;
// Experimental persistent mode (CS):
var enablePersistentReconciler = false;

// Only used in www builds.

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var emptyObject = {};

{
  Object.freeze(emptyObject);
}

var emptyObject_1 = emptyObject;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret$1 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



{
  var invariant$2 = invariant_1$1;
  var warning$2 = warning_1$1;
  var ReactPropTypesSecret = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant$2(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning$2(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning$2(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

var checkPropTypes_1$1 = checkPropTypes;

var valueStack = [];

{
  var fiberStack = [];
}

var index = -1;

function createCursor(defaultValue) {
  return {
    current: defaultValue
  };
}



function pop(cursor, fiber) {
  if (index < 0) {
    {
      warning_1$1(false, 'Unexpected pop.');
    }
    return;
  }

  {
    if (fiber !== fiberStack[index]) {
      warning_1$1(false, 'Unexpected Fiber popped.');
    }
  }

  cursor.current = valueStack[index];

  valueStack[index] = null;

  {
    fiberStack[index] = null;
  }

  index--;
}

function push(cursor, value, fiber) {
  index++;

  valueStack[index] = cursor.current;

  {
    fiberStack[index] = fiber;
  }

  cursor.current = value;
}

function reset$1() {
  while (index > -1) {
    valueStack[index] = null;

    {
      fiberStack[index] = null;
    }

    index--;
  }
}

var describeComponentFrame = function (name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
};

function describeFiber(fiber) {
  switch (fiber.tag) {
    case IndeterminateComponent:
    case FunctionalComponent:
    case ClassComponent:
    case HostComponent:
      var owner = fiber._debugOwner;
      var source = fiber._debugSource;
      var name = getComponentName(fiber);
      var ownerName = null;
      if (owner) {
        ownerName = getComponentName(owner);
      }
      return describeComponentFrame(name, source, ownerName);
    default:
      return '';
  }
}

// This function can only be called with a work-in-progress fiber and
// only during begin or complete phase. Do not call it under any other
// circumstances.
function getStackAddendumByWorkInProgressFiber(workInProgress) {
  var info = '';
  var node = workInProgress;
  do {
    info += describeFiber(node);
    // Otherwise this return pointer might point to the wrong tree:
    node = node['return'];
  } while (node);
  return info;
}

function getCurrentFiberOwnerName() {
  {
    var fiber = ReactDebugCurrentFiber.current;
    if (fiber === null) {
      return null;
    }
    var owner = fiber._debugOwner;
    if (owner !== null && typeof owner !== 'undefined') {
      return getComponentName(owner);
    }
  }
  return null;
}

function getCurrentFiberStackAddendum() {
  {
    var fiber = ReactDebugCurrentFiber.current;
    if (fiber === null) {
      return null;
    }
    // Safe because if current fiber exists, we are reconciling,
    // and it is guaranteed to be the work-in-progress version.
    return getStackAddendumByWorkInProgressFiber(fiber);
  }
  return null;
}

function resetCurrentFiber() {
  ReactDebugCurrentFrame.getCurrentStack = null;
  ReactDebugCurrentFiber.current = null;
  ReactDebugCurrentFiber.phase = null;
}

function setCurrentFiber(fiber) {
  ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackAddendum;
  ReactDebugCurrentFiber.current = fiber;
  ReactDebugCurrentFiber.phase = null;
}

function setCurrentPhase(phase) {
  ReactDebugCurrentFiber.phase = phase;
}

var ReactDebugCurrentFiber = {
  current: null,
  phase: null,
  resetCurrentFiber: resetCurrentFiber,
  setCurrentFiber: setCurrentFiber,
  setCurrentPhase: setCurrentPhase,
  getCurrentFiberOwnerName: getCurrentFiberOwnerName,
  getCurrentFiberStackAddendum: getCurrentFiberStackAddendum
};

// Prefix measurements so that it's possible to filter them.
// Longer prefixes are hard to read in DevTools.
var reactEmoji = '\u269B';
var warningEmoji = '\u26D4';
var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

// Keep track of current fiber so that we know the path to unwind on pause.
// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
var currentFiber = null;
// If we're in the middle of user code, which fiber and method is it?
// Reusing `currentFiber` would be confusing for this because user code fiber
// can change during commit phase too, but we don't need to unwind it (since
// lifecycles in the commit phase don't resemble a tree).
var currentPhase = null;
var currentPhaseFiber = null;
// Did lifecycle hook schedule an update? This is often a performance problem,
// so we will keep track of it, and include it in the report.
// Track commits caused by cascading updates.
var isCommitting = false;
var hasScheduledUpdateInCurrentCommit = false;
var hasScheduledUpdateInCurrentPhase = false;
var commitCountInCurrentWorkLoop = 0;
var effectCountInCurrentCommit = 0;
var isWaitingForCallback = false;
// During commits, we only show a measurement once per method name
// to avoid stretch the commit phase with measurement overhead.
var labelsInCurrentCommit = new Set();

var formatMarkName = function (markName) {
  return reactEmoji + ' ' + markName;
};

var formatLabel = function (label, warning) {
  var prefix = warning ? warningEmoji + ' ' : reactEmoji + ' ';
  var suffix = warning ? ' Warning: ' + warning : '';
  return '' + prefix + label + suffix;
};

var beginMark = function (markName) {
  performance.mark(formatMarkName(markName));
};

var clearMark = function (markName) {
  performance.clearMarks(formatMarkName(markName));
};

var endMark = function (label, markName, warning) {
  var formattedMarkName = formatMarkName(markName);
  var formattedLabel = formatLabel(label, warning);
  try {
    performance.measure(formattedLabel, formattedMarkName);
  } catch (err) {}
  // If previous mark was missing for some reason, this will throw.
  // This could only happen if React crashed in an unexpected place earlier.
  // Don't pile on with more errors.

  // Clear marks immediately to avoid growing buffer.
  performance.clearMarks(formattedMarkName);
  performance.clearMeasures(formattedLabel);
};

var getFiberMarkName = function (label, debugID) {
  return label + ' (#' + debugID + ')';
};

var getFiberLabel = function (componentName, isMounted, phase) {
  if (phase === null) {
    // These are composite component total time measurements.
    return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
  } else {
    // Composite component methods.
    return componentName + '.' + phase;
  }
};

var beginFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);

  if (isCommitting && labelsInCurrentCommit.has(label)) {
    // During the commit phase, we don't show duplicate labels because
    // there is a fixed overhead for every measurement, and we don't
    // want to stretch the commit phase beyond necessary.
    return false;
  }
  labelsInCurrentCommit.add(label);

  var markName = getFiberMarkName(label, debugID);
  beginMark(markName);
  return true;
};

var clearFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  clearMark(markName);
};

var endFiberMark = function (fiber, phase, warning) {
  var componentName = getComponentName(fiber) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  endMark(label, markName, warning);
};

var shouldIgnoreFiber = function (fiber) {
  // Host components should be skipped in the timeline.
  // We could check typeof fiber.type, but does this work with RN?
  switch (fiber.tag) {
    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case ReturnComponent:
    case Fragment:
      return true;
    default:
      return false;
  }
};

var clearPendingPhaseMeasurement = function () {
  if (currentPhase !== null && currentPhaseFiber !== null) {
    clearFiberMark(currentPhaseFiber, currentPhase);
  }
  currentPhaseFiber = null;
  currentPhase = null;
  hasScheduledUpdateInCurrentPhase = false;
};

var pauseTimers = function () {
  // Stops all currently active measurements so that they can be resumed
  // if we continue in a later deferred loop from the same unit of work.
  var fiber = currentFiber;
  while (fiber) {
    if (fiber._debugIsCurrentlyTiming) {
      endFiberMark(fiber, null, null);
    }
    fiber = fiber['return'];
  }
};

var resumeTimersRecursively = function (fiber) {
  if (fiber['return'] !== null) {
    resumeTimersRecursively(fiber['return']);
  }
  if (fiber._debugIsCurrentlyTiming) {
    beginFiberMark(fiber, null);
  }
};

var resumeTimers = function () {
  // Resumes all measurements that were active during the last deferred loop.
  if (currentFiber !== null) {
    resumeTimersRecursively(currentFiber);
  }
};

function recordEffect() {
  if (enableUserTimingAPI) {
    effectCountInCurrentCommit++;
  }
}

function recordScheduleUpdate() {
  if (enableUserTimingAPI) {
    if (isCommitting) {
      hasScheduledUpdateInCurrentCommit = true;
    }
    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
      hasScheduledUpdateInCurrentPhase = true;
    }
  }
}

function startRequestCallbackTimer() {
  if (enableUserTimingAPI) {
    if (supportsUserTiming && !isWaitingForCallback) {
      isWaitingForCallback = true;
      beginMark('(Waiting for async callback...)');
    }
  }
}

function stopRequestCallbackTimer(didExpire) {
  if (enableUserTimingAPI) {
    if (supportsUserTiming) {
      isWaitingForCallback = false;
      var warning = didExpire ? 'React was blocked by main thread' : null;
      endMark('(Waiting for async callback...)', '(Waiting for async callback...)', warning);
    }
  }
}

function startWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, this is the fiber to unwind from.
    currentFiber = fiber;
    if (!beginFiberMark(fiber, null)) {
      return;
    }
    fiber._debugIsCurrentlyTiming = true;
  }
}

function cancelWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // Remember we shouldn't complete measurement for this fiber.
    // Otherwise flamechart will be deep even for small updates.
    fiber._debugIsCurrentlyTiming = false;
    clearFiberMark(fiber, null);
  }
}

function stopWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, its parent is the fiber to unwind from.
    currentFiber = fiber['return'];
    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }
    fiber._debugIsCurrentlyTiming = false;
    endFiberMark(fiber, null, null);
  }
}

function stopFailedWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, its parent is the fiber to unwind from.
    currentFiber = fiber['return'];
    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }
    fiber._debugIsCurrentlyTiming = false;
    var warning = 'An error was thrown inside this error boundary';
    endFiberMark(fiber, null, warning);
  }
}

function startPhaseTimer(fiber, phase) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    clearPendingPhaseMeasurement();
    if (!beginFiberMark(fiber, phase)) {
      return;
    }
    currentPhaseFiber = fiber;
    currentPhase = phase;
  }
}

function stopPhaseTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    if (currentPhase !== null && currentPhaseFiber !== null) {
      var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
      endFiberMark(currentPhaseFiber, currentPhase, warning);
    }
    currentPhase = null;
    currentPhaseFiber = null;
  }
}

function startWorkLoopTimer(nextUnitOfWork) {
  if (enableUserTimingAPI) {
    currentFiber = nextUnitOfWork;
    if (!supportsUserTiming) {
      return;
    }
    commitCountInCurrentWorkLoop = 0;
    // This is top level call.
    // Any other measurements are performed within.
    beginMark('(React Tree Reconciliation)');
    // Resume any measurements that were in progress during the last loop.
    resumeTimers();
  }
}

function stopWorkLoopTimer(interruptedBy) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var warning = null;
    if (interruptedBy !== null) {
      if (interruptedBy.tag === HostRoot) {
        warning = 'A top-level update interrupted the previous render';
      } else {
        var componentName = getComponentName(interruptedBy) || 'Unknown';
        warning = 'An update to ' + componentName + ' interrupted the previous render';
      }
    } else if (commitCountInCurrentWorkLoop > 1) {
      warning = 'There were cascading updates';
    }
    commitCountInCurrentWorkLoop = 0;
    // Pause any measurements until the next loop.
    pauseTimers();
    endMark('(React Tree Reconciliation)', '(React Tree Reconciliation)', warning);
  }
}

function startCommitTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    isCommitting = true;
    hasScheduledUpdateInCurrentCommit = false;
    labelsInCurrentCommit.clear();
    beginMark('(Committing Changes)');
  }
}

function stopCommitTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var warning = null;
    if (hasScheduledUpdateInCurrentCommit) {
      warning = 'Lifecycle hook scheduled a cascading update';
    } else if (commitCountInCurrentWorkLoop > 0) {
      warning = 'Caused by a cascading update in earlier commit';
    }
    hasScheduledUpdateInCurrentCommit = false;
    commitCountInCurrentWorkLoop++;
    isCommitting = false;
    labelsInCurrentCommit.clear();

    endMark('(Committing Changes)', '(Committing Changes)', warning);
  }
}

function startCommitHostEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    effectCountInCurrentCommit = 0;
    beginMark('(Committing Host Effects)');
  }
}

function stopCommitHostEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
  }
}

function startCommitLifeCyclesTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    effectCountInCurrentCommit = 0;
    beginMark('(Calling Lifecycle Methods)');
  }
}

function stopCommitLifeCyclesTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
  }
}

{
  var warnedAboutMissingGetChildContext = {};
}

// A cursor to the current merged context object on the stack.
var contextStackCursor = createCursor(emptyObject_1);
// A cursor to a boolean indicating whether the context has changed.
var didPerformWorkStackCursor = createCursor(false);
// Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.
var previousContext = emptyObject_1;

function getUnmaskedContext(workInProgress) {
  var hasOwnContext = isContextProvider(workInProgress);
  if (hasOwnContext) {
    // If the fiber is a context provider itself, when we read its context
    // we have already pushed its own child context on the stack. A context
    // provider should not "see" its own child context. Therefore we read the
    // previous (parent) context instead for a context provider.
    return previousContext;
  }
  return contextStackCursor.current;
}

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
  var instance = workInProgress.stateNode;
  instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
  instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
}

function getMaskedContext(workInProgress, unmaskedContext) {
  var type = workInProgress.type;
  var contextTypes = type.contextTypes;
  if (!contextTypes) {
    return emptyObject_1;
  }

  // Avoid recreating masked context unless unmasked context has changed.
  // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
  // This may trigger infinite loops if componentWillReceiveProps calls setState.
  var instance = workInProgress.stateNode;
  if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
    return instance.__reactInternalMemoizedMaskedChildContext;
  }

  var context = {};
  for (var key in contextTypes) {
    context[key] = unmaskedContext[key];
  }

  {
    var name = getComponentName(workInProgress) || 'Unknown';
    checkPropTypes_1$1(contextTypes, context, 'context', name, ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
  }

  // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // Context is created before the class component is instantiated so check for instance.
  if (instance) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return context;
}

function hasContextChanged() {
  return didPerformWorkStackCursor.current;
}

function isContextConsumer(fiber) {
  return fiber.tag === ClassComponent && fiber.type.contextTypes != null;
}

function isContextProvider(fiber) {
  return fiber.tag === ClassComponent && fiber.type.childContextTypes != null;
}

function popContextProvider(fiber) {
  if (!isContextProvider(fiber)) {
    return;
  }

  pop(didPerformWorkStackCursor, fiber);
  pop(contextStackCursor, fiber);
}

function popTopLevelContextObject(fiber) {
  pop(didPerformWorkStackCursor, fiber);
  pop(contextStackCursor, fiber);
}

function pushTopLevelContextObject(fiber, context, didChange) {
  !(contextStackCursor.cursor == null) ? invariant_1$1(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  push(contextStackCursor, context, fiber);
  push(didPerformWorkStackCursor, didChange, fiber);
}

function processChildContext(fiber, parentContext) {
  var instance = fiber.stateNode;
  var childContextTypes = fiber.type.childContextTypes;

  // TODO (bvaughn) Replace this behavior with an invariant() in the future.
  // It has only been added in Fiber to match the (unintentional) behavior in Stack.
  if (typeof instance.getChildContext !== 'function') {
    {
      var componentName = getComponentName(fiber) || 'Unknown';

      if (!warnedAboutMissingGetChildContext[componentName]) {
        warnedAboutMissingGetChildContext[componentName] = true;
        warning_1$1(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
      }
    }
    return parentContext;
  }

  var childContext = void 0;
  {
    ReactDebugCurrentFiber.setCurrentPhase('getChildContext');
  }
  startPhaseTimer(fiber, 'getChildContext');
  childContext = instance.getChildContext();
  stopPhaseTimer();
  {
    ReactDebugCurrentFiber.setCurrentPhase(null);
  }
  for (var contextKey in childContext) {
    !(contextKey in childContextTypes) ? invariant_1$1(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(fiber) || 'Unknown', contextKey) : void 0;
  }
  {
    var name = getComponentName(fiber) || 'Unknown';
    checkPropTypes_1$1(childContextTypes, childContext, 'child context', name,
    // In practice, there is one case in which we won't get a stack. It's when
    // somebody calls unstable_renderSubtreeIntoContainer() and we process
    // context from the parent component instance. The stack will be missing
    // because it's outside of the reconciliation, and so the pointer has not
    // been set. This is rare and doesn't matter. We'll also remove that API.
    ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
  }

  return _assign({}, parentContext, childContext);
}

function pushContextProvider(workInProgress) {
  if (!isContextProvider(workInProgress)) {
    return false;
  }

  var instance = workInProgress.stateNode;
  // We push the context as early as possible to ensure stack integrity.
  // If the instance does not exist yet, we will push null at first,
  // and replace it on the stack later when invalidating the context.
  var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject_1;

  // Remember the parent context so we can merge with it later.
  // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
  previousContext = contextStackCursor.current;
  push(contextStackCursor, memoizedMergedChildContext, workInProgress);
  push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);

  return true;
}

function invalidateContextProvider(workInProgress, didChange) {
  var instance = workInProgress.stateNode;
  !instance ? invariant_1$1(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  if (didChange) {
    // Merge parent and own context.
    // Skip this if we're not updating due to sCU.
    // This avoids unnecessarily recomputing memoized values.
    var mergedContext = processChildContext(workInProgress, previousContext);
    instance.__reactInternalMemoizedMergedChildContext = mergedContext;

    // Replace the old (or empty) context with the new one.
    // It is important to unwind the context in the reverse order.
    pop(didPerformWorkStackCursor, workInProgress);
    pop(contextStackCursor, workInProgress);
    // Now push the new context and mark that it has changed.
    push(contextStackCursor, mergedContext, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  } else {
    pop(didPerformWorkStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  }
}

function resetContext() {
  previousContext = emptyObject_1;
  contextStackCursor.current = emptyObject_1;
  didPerformWorkStackCursor.current = false;
}

function findCurrentUnmaskedContext(fiber) {
  // Currently this is only used with renderSubtreeIntoContainer; not sure if it
  // makes sense elsewhere
  !(isFiberMounted(fiber) && fiber.tag === ClassComponent) ? invariant_1$1(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  var node = fiber;
  while (node.tag !== HostRoot) {
    if (isContextProvider(node)) {
      return node.stateNode.__reactInternalMemoizedMergedChildContext;
    }
    var parent = node['return'];
    !parent ? invariant_1$1(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    node = parent;
  }
  return node.stateNode.context;
}

var NoWork = 0; // TODO: Use an opaque type once ESLint et al support the syntax

var Sync = 1;
var Never = 2147483647; // Max int32: Math.pow(2, 31) - 1

var UNIT_SIZE = 10;
var MAGIC_NUMBER_OFFSET = 2;

// 1 unit of expiration time represents 10ms.
function msToExpirationTime(ms) {
  // Always add an offset so that we don't clash with the magic number for NoWork.
  return (ms / UNIT_SIZE | 0) + MAGIC_NUMBER_OFFSET;
}

function ceiling(num, precision) {
  return ((num / precision | 0) + 1) * precision;
}

function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
  return ceiling(currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
}

var NoContext = 0;
var AsyncUpdates = 1;

{
  var hasBadMapPolyfill = false;
  try {
    var nonExtensibleObject = Object.preventExtensions({});
    /* eslint-disable no-new */
    new Map([[nonExtensibleObject, null]]);
    new Set([nonExtensibleObject]);
    /* eslint-enable no-new */
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

// A Fiber is work on a Component that needs to be done or was done. There can
// be more than one per component.


{
  var debugCounter = 1;
}

function FiberNode(tag, key, internalContextTag) {
  // Instance
  this.tag = tag;
  this.key = key;
  this.type = null;
  this.stateNode = null;

  // Fiber
  this['return'] = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;

  this.ref = null;

  this.pendingProps = null;
  this.memoizedProps = null;
  this.updateQueue = null;
  this.memoizedState = null;

  this.internalContextTag = internalContextTag;

  // Effects
  this.effectTag = NoEffect;
  this.nextEffect = null;

  this.firstEffect = null;
  this.lastEffect = null;

  this.expirationTime = NoWork;

  this.alternate = null;

  {
    this._debugID = debugCounter++;
    this._debugSource = null;
    this._debugOwner = null;
    this._debugIsCurrentlyTiming = false;
    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
      Object.preventExtensions(this);
    }
  }
}

// This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.
var createFiber = function (tag, key, internalContextTag) {
  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
  return new FiberNode(tag, key, internalContextTag);
};

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

// This is used to create an alternate fiber to do work on.
function createWorkInProgress(current, pendingProps, expirationTime) {
  var workInProgress = current.alternate;
  if (workInProgress === null) {
    // We use a double buffering pooling technique because we know that we'll
    // only ever need at most two versions of a tree. We pool the "other" unused
    // node that we're free to reuse. This is lazily created to avoid allocating
    // extra objects for things that are never updated. It also allow us to
    // reclaim the extra memory if needed.
    workInProgress = createFiber(current.tag, current.key, current.internalContextTag);
    workInProgress.type = current.type;
    workInProgress.stateNode = current.stateNode;

    {
      // DEV-only fields
      workInProgress._debugID = current._debugID;
      workInProgress._debugSource = current._debugSource;
      workInProgress._debugOwner = current._debugOwner;
    }

    workInProgress.alternate = current;
    current.alternate = workInProgress;
  } else {
    // We already have an alternate.
    // Reset the effect tag.
    workInProgress.effectTag = NoEffect;

    // The effect list is no longer valid.
    workInProgress.nextEffect = null;
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;
  }

  workInProgress.expirationTime = expirationTime;
  workInProgress.pendingProps = pendingProps;

  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue;

  // These will be overridden during the parent's reconciliation
  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;

  return workInProgress;
}

function createHostRootFiber() {
  var fiber = createFiber(HostRoot, null, NoContext);
  return fiber;
}

function createFiberFromElement(element, internalContextTag, expirationTime) {
  var owner = null;
  {
    owner = element._owner;
  }

  var fiber = void 0;
  var type = element.type,
      key = element.key;

  if (typeof type === 'function') {
    fiber = shouldConstruct(type) ? createFiber(ClassComponent, key, internalContextTag) : createFiber(IndeterminateComponent, key, internalContextTag);
    fiber.type = type;
    fiber.pendingProps = element.props;
  } else if (typeof type === 'string') {
    fiber = createFiber(HostComponent, key, internalContextTag);
    fiber.type = type;
    fiber.pendingProps = element.props;
  } else if (typeof type === 'object' && type !== null && typeof type.tag === 'number') {
    // Currently assumed to be a continuation and therefore is a fiber already.
    // TODO: The yield system is currently broken for updates in some cases.
    // The reified yield stores a fiber, but we don't know which fiber that is;
    // the current or a workInProgress? When the continuation gets rendered here
    // we don't know if we can reuse that fiber or if we need to clone it.
    // There is probably a clever way to restructure this.
    fiber = type;
    fiber.pendingProps = element.props;
  } else {
    var info = '';
    {
      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
      }
      var ownerName = owner ? getComponentName(owner) : null;
      if (ownerName) {
        info += '\n\nCheck the render method of `' + ownerName + '`.';
      }
    }
    invariant_1$1(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
  }

  {
    fiber._debugSource = element._source;
    fiber._debugOwner = element._owner;
  }

  fiber.expirationTime = expirationTime;

  return fiber;
}

function createFiberFromFragment(elements, internalContextTag, expirationTime, key) {
  var fiber = createFiber(Fragment, key, internalContextTag);
  fiber.pendingProps = elements;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromText(content, internalContextTag, expirationTime) {
  var fiber = createFiber(HostText, null, internalContextTag);
  fiber.pendingProps = content;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromHostInstanceForDeletion() {
  var fiber = createFiber(HostComponent, null, NoContext);
  fiber.type = 'DELETED';
  return fiber;
}

function createFiberFromCall(call, internalContextTag, expirationTime) {
  var fiber = createFiber(CallComponent, call.key, internalContextTag);
  fiber.type = call.handler;
  fiber.pendingProps = call;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromReturn(returnNode, internalContextTag, expirationTime) {
  var fiber = createFiber(ReturnComponent, null, internalContextTag);
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromPortal(portal, internalContextTag, expirationTime) {
  var fiber = createFiber(HostPortal, portal.key, internalContextTag);
  fiber.pendingProps = portal.children || [];
  fiber.expirationTime = expirationTime;
  fiber.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null, // Used by persistent updates
    implementation: portal.implementation
  };
  return fiber;
}

function createFiberRoot(containerInfo, hydrate) {
  // Cyclic construction. This cheats the type system right now because
  // stateNode is any.
  var uninitializedFiber = createHostRootFiber();
  var root = {
    current: uninitializedFiber,
    containerInfo: containerInfo,
    pendingChildren: null,
    remainingExpirationTime: NoWork,
    isReadyForCommit: false,
    finishedWork: null,
    context: null,
    pendingContext: null,
    hydrate: hydrate,
    nextScheduledRoot: null
  };
  uninitializedFiber.stateNode = root;
  return root;
}

var onCommitFiberRoot = null;
var onCommitFiberUnmount = null;
var hasLoggedError = false;

function catchErrors(fn) {
  return function (arg) {
    try {
      return fn(arg);
    } catch (err) {
      if (true && !hasLoggedError) {
        hasLoggedError = true;
        warning_1$1(false, 'React DevTools encountered an error: %s', err);
      }
    }
  };
}

function injectInternals(internals) {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
    // No DevTools
    return false;
  }
  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (hook.isDisabled) {
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // https://github.com/facebook/react/issues/3877
    return true;
  }
  if (!hook.supportsFiber) {
    {
      warning_1$1(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
    }
    // DevTools exists, even though it doesn't support Fiber.
    return true;
  }
  try {
    var rendererID = hook.inject(internals);
    // We have successfully injected, so now it is safe to set up hooks.
    onCommitFiberRoot = catchErrors(function (root) {
      return hook.onCommitFiberRoot(rendererID, root);
    });
    onCommitFiberUnmount = catchErrors(function (fiber) {
      return hook.onCommitFiberUnmount(rendererID, fiber);
    });
  } catch (err) {
    // Catch all errors because it is unsafe to throw during initialization.
    {
      warning_1$1(false, 'React DevTools encountered an error: %s.', err);
    }
  }
  // DevTools exists
  return true;
}

function onCommitRoot(root) {
  if (typeof onCommitFiberRoot === 'function') {
    onCommitFiberRoot(root);
  }
}

function onCommitUnmount(fiber) {
  if (typeof onCommitFiberUnmount === 'function') {
    onCommitFiberUnmount(fiber);
  }
}

{
  var didWarnUpdateInsideUpdate = false;
}

// Callbacks are not validated until invocation


// Singly linked-list of updates. When an update is scheduled, it is added to
// the queue of the current fiber and the work-in-progress fiber. The two queues
// are separate but they share a persistent structure.
//
// During reconciliation, updates are removed from the work-in-progress fiber,
// but they remain on the current fiber. That ensures that if a work-in-progress
// is aborted, the aborted updates are recovered by cloning from current.
//
// The work-in-progress queue is always a subset of the current queue.
//
// When the tree is committed, the work-in-progress becomes the current.


function createUpdateQueue(baseState) {
  var queue = {
    baseState: baseState,
    expirationTime: NoWork,
    first: null,
    last: null,
    callbackList: null,
    hasForceUpdate: false,
    isInitialized: false
  };
  {
    queue.isProcessing = false;
  }
  return queue;
}

function insertUpdateIntoQueue(queue, update) {
  // Append the update to the end of the list.
  if (queue.last === null) {
    // Queue is empty
    queue.first = queue.last = update;
  } else {
    queue.last.next = update;
    queue.last = update;
  }
  if (queue.expirationTime === NoWork || queue.expirationTime > update.expirationTime) {
    queue.expirationTime = update.expirationTime;
  }
}

function insertUpdateIntoFiber(fiber, update) {
  // We'll have at least one and at most two distinct update queues.
  var alternateFiber = fiber.alternate;
  var queue1 = fiber.updateQueue;
  if (queue1 === null) {
    // TODO: We don't know what the base state will be until we begin work.
    // It depends on which fiber is the next current. Initialize with an empty
    // base state, then set to the memoizedState when rendering. Not super
    // happy with this approach.
    queue1 = fiber.updateQueue = createUpdateQueue(null);
  }

  var queue2 = void 0;
  if (alternateFiber !== null) {
    queue2 = alternateFiber.updateQueue;
    if (queue2 === null) {
      queue2 = alternateFiber.updateQueue = createUpdateQueue(null);
    }
  } else {
    queue2 = null;
  }
  queue2 = queue2 !== queue1 ? queue2 : null;

  // Warn if an update is scheduled from inside an updater function.
  {
    if ((queue1.isProcessing || queue2 !== null && queue2.isProcessing) && !didWarnUpdateInsideUpdate) {
      warning_1$1(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
      didWarnUpdateInsideUpdate = true;
    }
  }

  // If there's only one queue, add the update to that queue and exit.
  if (queue2 === null) {
    insertUpdateIntoQueue(queue1, update);
    return;
  }

  // If either queue is empty, we need to add to both queues.
  if (queue1.last === null || queue2.last === null) {
    insertUpdateIntoQueue(queue1, update);
    insertUpdateIntoQueue(queue2, update);
    return;
  }

  // If both lists are not empty, the last update is the same for both lists
  // because of structural sharing. So, we should only append to one of
  // the lists.
  insertUpdateIntoQueue(queue1, update);
  // But we still need to update the `last` pointer of queue2.
  queue2.last = update;
}

function getUpdateExpirationTime(fiber) {
  if (fiber.tag !== ClassComponent && fiber.tag !== HostRoot) {
    return NoWork;
  }
  var updateQueue = fiber.updateQueue;
  if (updateQueue === null) {
    return NoWork;
  }
  return updateQueue.expirationTime;
}

function getStateFromUpdate(update, instance, prevState, props) {
  var partialState = update.partialState;
  if (typeof partialState === 'function') {
    var updateFn = partialState;
    return updateFn.call(instance, prevState, props);
  } else {
    return partialState;
  }
}

function processUpdateQueue(current, workInProgress, queue, instance, props, renderExpirationTime) {
  if (current !== null && current.updateQueue === queue) {
    // We need to create a work-in-progress queue, by cloning the current queue.
    var currentQueue = queue;
    queue = workInProgress.updateQueue = {
      baseState: currentQueue.baseState,
      expirationTime: currentQueue.expirationTime,
      first: currentQueue.first,
      last: currentQueue.last,
      isInitialized: currentQueue.isInitialized,
      // These fields are no longer valid because they were already committed.
      // Reset them.
      callbackList: null,
      hasForceUpdate: false
    };
  }

  {
    // Set this flag so we can warn if setState is called inside the update
    // function of another setState.
    queue.isProcessing = true;
  }

  // Reset the remaining expiration time. If we skip over any updates, we'll
  // increase this accordingly.
  queue.expirationTime = NoWork;

  // TODO: We don't know what the base state will be until we begin work.
  // It depends on which fiber is the next current. Initialize with an empty
  // base state, then set to the memoizedState when rendering. Not super
  // happy with this approach.
  var state = void 0;
  if (queue.isInitialized) {
    state = queue.baseState;
  } else {
    state = queue.baseState = workInProgress.memoizedState;
    queue.isInitialized = true;
  }
  var dontMutatePrevState = true;
  var update = queue.first;
  var didSkip = false;
  while (update !== null) {
    var updateExpirationTime = update.expirationTime;
    if (updateExpirationTime > renderExpirationTime) {
      // This update does not have sufficient priority. Skip it.
      var remainingExpirationTime = queue.expirationTime;
      if (remainingExpirationTime === NoWork || remainingExpirationTime > updateExpirationTime) {
        // Update the remaining expiration time.
        queue.expirationTime = updateExpirationTime;
      }
      if (!didSkip) {
        didSkip = true;
        queue.baseState = state;
      }
      // Continue to the next update.
      update = update.next;
      continue;
    }

    // This update does have sufficient priority.

    // If no previous updates were skipped, drop this update from the queue by
    // advancing the head of the list.
    if (!didSkip) {
      queue.first = update.next;
      if (queue.first === null) {
        queue.last = null;
      }
    }

    // Process the update
    var _partialState = void 0;
    if (update.isReplace) {
      state = getStateFromUpdate(update, instance, state, props);
      dontMutatePrevState = true;
    } else {
      _partialState = getStateFromUpdate(update, instance, state, props);
      if (_partialState) {
        if (dontMutatePrevState) {
          // $FlowFixMe: Idk how to type this properly.
          state = _assign({}, state, _partialState);
        } else {
          state = _assign(state, _partialState);
        }
        dontMutatePrevState = false;
      }
    }
    if (update.isForced) {
      queue.hasForceUpdate = true;
    }
    if (update.callback !== null) {
      // Append to list of callbacks.
      var _callbackList = queue.callbackList;
      if (_callbackList === null) {
        _callbackList = queue.callbackList = [];
      }
      _callbackList.push(update);
    }
    update = update.next;
  }

  if (queue.callbackList !== null) {
    workInProgress.effectTag |= Callback;
  } else if (queue.first === null && !queue.hasForceUpdate) {
    // The queue is empty. We can reset it.
    workInProgress.updateQueue = null;
  }

  if (!didSkip) {
    didSkip = true;
    queue.baseState = state;
  }

  {
    // No longer processing.
    queue.isProcessing = false;
  }

  return state;
}

function commitCallbacks(queue, context) {
  var callbackList = queue.callbackList;
  if (callbackList === null) {
    return;
  }
  // Set the list to null to make sure they don't get called more than once.
  queue.callbackList = null;
  for (var i = 0; i < callbackList.length; i++) {
    var update = callbackList[i];
    var _callback = update.callback;
    // This update might be processed again. Clear the callback so it's only
    // called once.
    update.callback = null;
    !(typeof _callback === 'function') ? invariant_1$1(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback) : void 0;
    _callback.call(context);
  }
}

var fakeInternalInstance = {};
var isArray = Array.isArray;

{
  var didWarnAboutStateAssignmentForComponent = {};

  var warnOnInvalidCallback = function (callback, callerName) {
    warning_1$1(callback === null || typeof callback === 'function', '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
  };

  // This is so gross but it's at least non-critical and can be removed if
  // it causes problems. This is meant to give a nicer error message for
  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
  // ...)) which otherwise throws a "_processChildContext is not a function"
  // exception.
  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
    enumerable: false,
    value: function () {
      invariant_1$1(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
    }
  });
  Object.freeze(fakeInternalInstance);
}

var ReactFiberClassComponent = function (scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState) {
  // Class component state updater
  var updater = {
    isMounted: isMounted,
    enqueueSetState: function (instance, partialState, callback) {
      var fiber = get(instance);
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'setState');
      }
      var expirationTime = computeExpirationForFiber(fiber);
      var update = {
        expirationTime: expirationTime,
        partialState: partialState,
        callback: callback,
        isReplace: false,
        isForced: false,
        nextCallback: null,
        next: null
      };
      insertUpdateIntoFiber(fiber, update);
      scheduleWork(fiber, expirationTime);
    },
    enqueueReplaceState: function (instance, state, callback) {
      var fiber = get(instance);
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'replaceState');
      }
      var expirationTime = computeExpirationForFiber(fiber);
      var update = {
        expirationTime: expirationTime,
        partialState: state,
        callback: callback,
        isReplace: true,
        isForced: false,
        nextCallback: null,
        next: null
      };
      insertUpdateIntoFiber(fiber, update);
      scheduleWork(fiber, expirationTime);
    },
    enqueueForceUpdate: function (instance, callback) {
      var fiber = get(instance);
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'forceUpdate');
      }
      var expirationTime = computeExpirationForFiber(fiber);
      var update = {
        expirationTime: expirationTime,
        partialState: null,
        callback: callback,
        isReplace: false,
        isForced: true,
        nextCallback: null,
        next: null
      };
      insertUpdateIntoFiber(fiber, update);
      scheduleWork(fiber, expirationTime);
    }
  };

  function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
    if (oldProps === null || workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate) {
      // If the workInProgress already has an Update effect, return true
      return true;
    }

    var instance = workInProgress.stateNode;
    var type = workInProgress.type;
    if (typeof instance.shouldComponentUpdate === 'function') {
      startPhaseTimer(workInProgress, 'shouldComponentUpdate');
      var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext);
      stopPhaseTimer();

      {
        warning_1$1(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(workInProgress) || 'Unknown');
      }

      return shouldUpdate;
    }

    if (type.prototype && type.prototype.isPureReactComponent) {
      return !shallowEqual_1$1(oldProps, newProps) || !shallowEqual_1$1(oldState, newState);
    }

    return true;
  }

  function checkClassInstance(workInProgress) {
    var instance = workInProgress.stateNode;
    var type = workInProgress.type;
    {
      var name = getComponentName(workInProgress);
      var renderPresent = instance.render;

      if (!renderPresent) {
        if (type.prototype && typeof type.prototype.render === 'function') {
          warning_1$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
        } else {
          warning_1$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
        }
      }

      var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
      warning_1$1(noGetInitialStateOnES6, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
      var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
      warning_1$1(noGetDefaultPropsOnES6, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
      var noInstancePropTypes = !instance.propTypes;
      warning_1$1(noInstancePropTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
      var noInstanceContextTypes = !instance.contextTypes;
      warning_1$1(noInstanceContextTypes, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
      var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
      warning_1$1(noComponentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
      if (type.prototype && type.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
        warning_1$1(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(workInProgress) || 'A pure component');
      }
      var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
      warning_1$1(noComponentDidUnmount, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
      var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
      warning_1$1(noComponentDidReceiveProps, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
      var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
      warning_1$1(noComponentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
      var hasMutatedProps = instance.props !== workInProgress.pendingProps;
      warning_1$1(instance.props === undefined || !hasMutatedProps, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
      var noInstanceDefaultProps = !instance.defaultProps;
      warning_1$1(noInstanceDefaultProps, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
    }

    var state = instance.state;
    if (state && (typeof state !== 'object' || isArray(state))) {
      invariant_1$1(false, '%s.state: must be set to an object or null', getComponentName(workInProgress));
    }
    if (typeof instance.getChildContext === 'function') {
      !(typeof workInProgress.type.childContextTypes === 'object') ? invariant_1$1(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', getComponentName(workInProgress)) : void 0;
    }
  }

  function resetInputPointers(workInProgress, instance) {
    instance.props = workInProgress.memoizedProps;
    instance.state = workInProgress.memoizedState;
  }

  function adoptClassInstance(workInProgress, instance) {
    instance.updater = updater;
    workInProgress.stateNode = instance;
    // The instance needs access to the fiber so that it can schedule updates
    set(instance, workInProgress);
    {
      instance._reactInternalInstance = fakeInternalInstance;
    }
  }

  function constructClassInstance(workInProgress, props) {
    var ctor = workInProgress.type;
    var unmaskedContext = getUnmaskedContext(workInProgress);
    var needsContext = isContextConsumer(workInProgress);
    var context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : emptyObject_1;
    var instance = new ctor(props, context);
    adoptClassInstance(workInProgress, instance);

    // Cache unmasked context so we can avoid recreating masked context unless necessary.
    // ReactFiberContext usually updates this cache but can't for newly-created instances.
    if (needsContext) {
      cacheContext(workInProgress, unmaskedContext, context);
    }

    return instance;
  }

  function callComponentWillMount(workInProgress, instance) {
    startPhaseTimer(workInProgress, 'componentWillMount');
    var oldState = instance.state;
    instance.componentWillMount();

    stopPhaseTimer();

    if (oldState !== instance.state) {
      {
        warning_1$1(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress));
      }
      updater.enqueueReplaceState(instance, instance.state, null);
    }
  }

  function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
    startPhaseTimer(workInProgress, 'componentWillReceiveProps');
    var oldState = instance.state;
    instance.componentWillReceiveProps(newProps, newContext);
    stopPhaseTimer();

    if (instance.state !== oldState) {
      {
        var componentName = getComponentName(workInProgress) || 'Component';
        if (!didWarnAboutStateAssignmentForComponent[componentName]) {
          warning_1$1(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
          didWarnAboutStateAssignmentForComponent[componentName] = true;
        }
      }
      updater.enqueueReplaceState(instance, instance.state, null);
    }
  }

  // Invokes the mount life-cycles on a previously never rendered instance.
  function mountClassInstance(workInProgress, renderExpirationTime) {
    var current = workInProgress.alternate;

    {
      checkClassInstance(workInProgress);
    }

    var instance = workInProgress.stateNode;
    var state = instance.state || null;

    var props = workInProgress.pendingProps;
    !props ? invariant_1$1(false, 'There must be pending props for an initial mount. This error is likely caused by a bug in React. Please file an issue.') : void 0;

    var unmaskedContext = getUnmaskedContext(workInProgress);

    instance.props = props;
    instance.state = workInProgress.memoizedState = state;
    instance.refs = emptyObject_1;
    instance.context = getMaskedContext(workInProgress, unmaskedContext);

    if (enableAsyncSubtreeAPI && workInProgress.type != null && workInProgress.type.prototype != null && workInProgress.type.prototype.unstable_isAsyncReactComponent === true) {
      workInProgress.internalContextTag |= AsyncUpdates;
    }

    if (typeof instance.componentWillMount === 'function') {
      callComponentWillMount(workInProgress, instance);
      // If we had additional state updates during this life-cycle, let's
      // process them now.
      var updateQueue = workInProgress.updateQueue;
      if (updateQueue !== null) {
        instance.state = processUpdateQueue(current, workInProgress, updateQueue, instance, props, renderExpirationTime);
      }
    }
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
  }

  // Called on a preexisting class instance. Returns false if a resumed render
  // could be reused.
  // function resumeMountClassInstance(
  //   workInProgress: Fiber,
  //   priorityLevel: PriorityLevel,
  // ): boolean {
  //   const instance = workInProgress.stateNode;
  //   resetInputPointers(workInProgress, instance);

  //   let newState = workInProgress.memoizedState;
  //   let newProps = workInProgress.pendingProps;
  //   if (!newProps) {
  //     // If there isn't any new props, then we'll reuse the memoized props.
  //     // This could be from already completed work.
  //     newProps = workInProgress.memoizedProps;
  //     invariant(
  //       newProps != null,
  //       'There should always be pending or memoized props. This error is ' +
  //         'likely caused by a bug in React. Please file an issue.',
  //     );
  //   }
  //   const newUnmaskedContext = getUnmaskedContext(workInProgress);
  //   const newContext = getMaskedContext(workInProgress, newUnmaskedContext);

  //   const oldContext = instance.context;
  //   const oldProps = workInProgress.memoizedProps;

  //   if (
  //     typeof instance.componentWillReceiveProps === 'function' &&
  //     (oldProps !== newProps || oldContext !== newContext)
  //   ) {
  //     callComponentWillReceiveProps(
  //       workInProgress,
  //       instance,
  //       newProps,
  //       newContext,
  //     );
  //   }

  //   // Process the update queue before calling shouldComponentUpdate
  //   const updateQueue = workInProgress.updateQueue;
  //   if (updateQueue !== null) {
  //     newState = processUpdateQueue(
  //       workInProgress,
  //       updateQueue,
  //       instance,
  //       newState,
  //       newProps,
  //       priorityLevel,
  //     );
  //   }

  //   // TODO: Should we deal with a setState that happened after the last
  //   // componentWillMount and before this componentWillMount? Probably
  //   // unsupported anyway.

  //   if (
  //     !checkShouldComponentUpdate(
  //       workInProgress,
  //       workInProgress.memoizedProps,
  //       newProps,
  //       workInProgress.memoizedState,
  //       newState,
  //       newContext,
  //     )
  //   ) {
  //     // Update the existing instance's state, props, and context pointers even
  //     // though we're bailing out.
  //     instance.props = newProps;
  //     instance.state = newState;
  //     instance.context = newContext;
  //     return false;
  //   }

  //   // Update the input pointers now so that they are correct when we call
  //   // componentWillMount
  //   instance.props = newProps;
  //   instance.state = newState;
  //   instance.context = newContext;

  //   if (typeof instance.componentWillMount === 'function') {
  //     callComponentWillMount(workInProgress, instance);
  //     // componentWillMount may have called setState. Process the update queue.
  //     const newUpdateQueue = workInProgress.updateQueue;
  //     if (newUpdateQueue !== null) {
  //       newState = processUpdateQueue(
  //         workInProgress,
  //         newUpdateQueue,
  //         instance,
  //         newState,
  //         newProps,
  //         priorityLevel,
  //       );
  //     }
  //   }

  //   if (typeof instance.componentDidMount === 'function') {
  //     workInProgress.effectTag |= Update;
  //   }

  //   instance.state = newState;

  //   return true;
  // }

  // Invokes the update life-cycles and returns false if it shouldn't rerender.
  function updateClassInstance(current, workInProgress, renderExpirationTime) {
    var instance = workInProgress.stateNode;
    resetInputPointers(workInProgress, instance);

    var oldProps = workInProgress.memoizedProps;
    var newProps = workInProgress.pendingProps;
    if (!newProps) {
      // If there aren't any new props, then we'll reuse the memoized props.
      // This could be from already completed work.
      newProps = oldProps;
      !(newProps != null) ? invariant_1$1(false, 'There should always be pending or memoized props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    }
    var oldContext = instance.context;
    var newUnmaskedContext = getUnmaskedContext(workInProgress);
    var newContext = getMaskedContext(workInProgress, newUnmaskedContext);

    // Note: During these life-cycles, instance.props/instance.state are what
    // ever the previously attempted to render - not the "current". However,
    // during componentDidUpdate we pass the "current" props.

    if (typeof instance.componentWillReceiveProps === 'function' && (oldProps !== newProps || oldContext !== newContext)) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
    }

    // Compute the next state using the memoized state and the update queue.
    var oldState = workInProgress.memoizedState;
    // TODO: Previous state can be null.
    var newState = void 0;
    if (workInProgress.updateQueue !== null) {
      newState = processUpdateQueue(current, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
    } else {
      newState = oldState;
    }

    if (oldProps === newProps && oldState === newState && !hasContextChanged() && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {
      // If an update was already in progress, we should schedule an Update
      // effect even though we're bailing out, so that cWU/cDU are called.
      if (typeof instance.componentDidUpdate === 'function') {
        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
          workInProgress.effectTag |= Update;
        }
      }
      return false;
    }

    var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);

    if (shouldUpdate) {
      if (typeof instance.componentWillUpdate === 'function') {
        startPhaseTimer(workInProgress, 'componentWillUpdate');
        instance.componentWillUpdate(newProps, newState, newContext);
        stopPhaseTimer();
      }
      if (typeof instance.componentDidUpdate === 'function') {
        workInProgress.effectTag |= Update;
      }
    } else {
      // If an update was already in progress, we should schedule an Update
      // effect even though we're bailing out, so that cWU/cDU are called.
      if (typeof instance.componentDidUpdate === 'function') {
        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
          workInProgress.effectTag |= Update;
        }
      }

      // If shouldComponentUpdate returned false, we should still update the
      // memoized props/state to indicate that this work can be reused.
      memoizeProps(workInProgress, newProps);
      memoizeState(workInProgress, newState);
    }

    // Update the existing instance's state, props, and context pointers even
    // if shouldComponentUpdate returns false.
    instance.props = newProps;
    instance.state = newState;
    instance.context = newContext;

    return shouldUpdate;
  }

  return {
    adoptClassInstance: adoptClassInstance,
    constructClassInstance: constructClassInstance,
    mountClassInstance: mountClassInstance,
    // resumeMountClassInstance,
    updateClassInstance: updateClassInstance
  };
};

// The Symbol used to tag the special React types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_PORTAL_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.portal') || 0xeaca;

function createPortal$1(children, containerInfo,
// TODO: figure out the API for cross-renderer implementation.
implementation) {
  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  return {
    // This tag allow us to uniquely identify this as a React Portal
    $$typeof: REACT_PORTAL_TYPE,
    key: key == null ? null : '' + key,
    children: children,
    containerInfo: containerInfo,
    implementation: implementation
  };
}

var getCurrentFiberStackAddendum$1 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;


{
  var didWarnAboutMaps = false;
  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */
  var ownerHasKeyUseWarning = {};
  var ownerHasFunctionTypeWarning = {};

  var warnForMissingKey = function (child) {
    if (child === null || typeof child !== 'object') {
      return;
    }
    if (!child._store || child._store.validated || child.key != null) {
      return;
    }
    !(typeof child._store === 'object') ? invariant_1$1(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    child._store.validated = true;

    var currentComponentErrorInfo = 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + (getCurrentFiberStackAddendum$1() || '');
    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }
    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

    warning_1$1(false, 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.%s', getCurrentFiberStackAddendum$1());
  };
}

var isArray$1 = Array.isArray;

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE;
var REACT_CALL_TYPE;
var REACT_RETURN_TYPE;
var REACT_FRAGMENT_TYPE;
if (typeof Symbol === 'function' && Symbol['for']) {
  REACT_ELEMENT_TYPE = Symbol['for']('react.element');
  REACT_CALL_TYPE = Symbol['for']('react.call');
  REACT_RETURN_TYPE = Symbol['for']('react.return');
  REACT_FRAGMENT_TYPE = Symbol['for']('react.fragment');
} else {
  REACT_ELEMENT_TYPE = 0xeac7;
  REACT_CALL_TYPE = 0xeac8;
  REACT_RETURN_TYPE = 0xeac9;
  REACT_FRAGMENT_TYPE = 0xeacb;
}

function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable === 'undefined') {
    return null;
  }
  var iteratorFn = ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
  return null;
}

function coerceRef(current, element) {
  var mixedRef = element.ref;
  if (mixedRef !== null && typeof mixedRef !== 'function') {
    if (element._owner) {
      var owner = element._owner;
      var inst = void 0;
      if (owner) {
        var ownerFiber = owner;
        !(ownerFiber.tag === ClassComponent) ? invariant_1$1(false, 'Stateless function components cannot have refs.') : void 0;
        inst = ownerFiber.stateNode;
      }
      !inst ? invariant_1$1(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
      var stringRef = '' + mixedRef;
      // Check if previous string ref matches new string ref
      if (current !== null && current.ref !== null && current.ref._stringRef === stringRef) {
        return current.ref;
      }
      var ref = function (value) {
        var refs = inst.refs === emptyObject_1 ? inst.refs = {} : inst.refs;
        if (value === null) {
          delete refs[stringRef];
        } else {
          refs[stringRef] = value;
        }
      };
      ref._stringRef = stringRef;
      return ref;
    } else {
      !(typeof mixedRef === 'string') ? invariant_1$1(false, 'Expected ref to be a function or a string.') : void 0;
      !element._owner ? invariant_1$1(false, 'Element ref was specified as a string (%s) but no owner was set. You may have multiple copies of React loaded. (details: https://fb.me/react-refs-must-have-owner).', mixedRef) : void 0;
    }
  }
  return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
  if (returnFiber.type !== 'textarea') {
    var addendum = '';
    {
      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + (getCurrentFiberStackAddendum$1() || '');
    }
    invariant_1$1(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
  }
}

function warnOnFunctionType() {
  var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + (getCurrentFiberStackAddendum$1() || '');

  if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
    return;
  }
  ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

  warning_1$1(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.%s', getCurrentFiberStackAddendum$1() || '');
}

// This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.
function ChildReconciler(shouldClone, shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return;
    }
    if (!shouldClone) {
      // When we're reconciling in place we have a work in progress copy. We
      // actually want the current copy. If there is no current copy, then we
      // don't need to track deletion side-effects.
      if (childToDelete.alternate === null) {
        return;
      }
      childToDelete = childToDelete.alternate;
    }
    // Deletions are added in reversed order so we add it to the front.
    // At this point, the return fiber's effect list is empty except for
    // deletions, so we can just append the deletion to the list. The remaining
    // effects aren't added until the complete phase. Once we implement
    // resuming, this may not be true.
    var last = returnFiber.lastEffect;
    if (last !== null) {
      last.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    childToDelete.nextEffect = null;
    childToDelete.effectTag = Deletion;
  }

  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return null;
    }

    // TODO: For the shouldClone case, this could be micro-optimized a bit by
    // assuming that after the first child we've already added everything.
    var childToDelete = currentFirstChild;
    while (childToDelete !== null) {
      deleteChild(returnFiber, childToDelete);
      childToDelete = childToDelete.sibling;
    }
    return null;
  }

  function mapRemainingChildren(returnFiber, currentFirstChild) {
    // Add the remaining children to a temporary map so that we can find them by
    // keys quickly. Implicit (null) keys get added to this set with their index
    var existingChildren = new Map();

    var existingChild = currentFirstChild;
    while (existingChild !== null) {
      if (existingChild.key !== null) {
        existingChildren.set(existingChild.key, existingChild);
      } else {
        existingChildren.set(existingChild.index, existingChild);
      }
      existingChild = existingChild.sibling;
    }
    return existingChildren;
  }

  function useFiber(fiber, pendingProps, expirationTime) {
    // We currently set sibling to null and index to 0 here because it is easy
    // to forget to do before returning it. E.g. for the single child case.
    if (shouldClone) {
      var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
      clone.index = 0;
      clone.sibling = null;
      return clone;
    } else {
      // We override the expiration time even if it is earlier, because if
      // we're reconciling at a later time that means that this was
      // down-prioritized.
      fiber.expirationTime = expirationTime;
      fiber.effectTag = NoEffect;
      fiber.index = 0;
      fiber.sibling = null;
      fiber.pendingProps = pendingProps;
      return fiber;
    }
  }

  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;
    if (!shouldTrackSideEffects) {
      // Noop.
      return lastPlacedIndex;
    }
    var current = newFiber.alternate;
    if (current !== null) {
      var oldIndex = current.index;
      if (oldIndex < lastPlacedIndex) {
        // This is a move.
        newFiber.effectTag = Placement;
        return lastPlacedIndex;
      } else {
        // This item can stay in place.
        return oldIndex;
      }
    } else {
      // This is an insertion.
      newFiber.effectTag = Placement;
      return lastPlacedIndex;
    }
  }

  function placeSingleChild(newFiber) {
    // This is simpler for the single child case. We only need to do a
    // placement for inserting new children.
    if (shouldTrackSideEffects && newFiber.alternate === null) {
      newFiber.effectTag = Placement;
    }
    return newFiber;
  }

  function updateTextNode(returnFiber, current, textContent, expirationTime) {
    if (current === null || current.tag !== HostText) {
      // Insert
      var created = createFiberFromText(textContent, returnFiber.internalContextTag, expirationTime);
      created['return'] = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, textContent, expirationTime);
      existing['return'] = returnFiber;
      return existing;
    }
  }

  function updateElement(returnFiber, current, element, expirationTime) {
    if (current !== null && current.type === element.type) {
      // Move based on index
      var existing = useFiber(current, element.props, expirationTime);
      existing.ref = coerceRef(current, element);
      existing['return'] = returnFiber;
      {
        existing._debugSource = element._source;
        existing._debugOwner = element._owner;
      }
      return existing;
    } else {
      // Insert
      var created = createFiberFromElement(element, returnFiber.internalContextTag, expirationTime);
      created.ref = coerceRef(current, element);
      created['return'] = returnFiber;
      return created;
    }
  }

  function updateCall(returnFiber, current, call, expirationTime) {
    // TODO: Should this also compare handler to determine whether to reuse?
    if (current === null || current.tag !== CallComponent) {
      // Insert
      var created = createFiberFromCall(call, returnFiber.internalContextTag, expirationTime);
      created['return'] = returnFiber;
      return created;
    } else {
      // Move based on index
      var existing = useFiber(current, call, expirationTime);
      existing['return'] = returnFiber;
      return existing;
    }
  }

  function updateReturn(returnFiber, current, returnNode, expirationTime) {
    if (current === null || current.tag !== ReturnComponent) {
      // Insert
      var created = createFiberFromReturn(returnNode, returnFiber.internalContextTag, expirationTime);
      created.type = returnNode.value;
      created['return'] = returnFiber;
      return created;
    } else {
      // Move based on index
      var existing = useFiber(current, null, expirationTime);
      existing.type = returnNode.value;
      existing['return'] = returnFiber;
      return existing;
    }
  }

  function updatePortal(returnFiber, current, portal, expirationTime) {
    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
      // Insert
      var created = createFiberFromPortal(portal, returnFiber.internalContextTag, expirationTime);
      created['return'] = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, portal.children || [], expirationTime);
      existing['return'] = returnFiber;
      return existing;
    }
  }

  function updateFragment(returnFiber, current, fragment, expirationTime, key) {
    if (current === null || current.tag !== Fragment) {
      // Insert
      var created = createFiberFromFragment(fragment, returnFiber.internalContextTag, expirationTime, key);
      created['return'] = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, fragment, expirationTime);
      existing['return'] = returnFiber;
      return existing;
    }
  }

  function createChild(returnFiber, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      var created = createFiberFromText('' + newChild, returnFiber.internalContextTag, expirationTime);
      created['return'] = returnFiber;
      return created;
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.type === REACT_FRAGMENT_TYPE) {
              var _created = createFiberFromFragment(newChild.props.children, returnFiber.internalContextTag, expirationTime, newChild.key);
              _created['return'] = returnFiber;
              return _created;
            } else {
              var _created2 = createFiberFromElement(newChild, returnFiber.internalContextTag, expirationTime);
              _created2.ref = coerceRef(null, newChild);
              _created2['return'] = returnFiber;
              return _created2;
            }
          }

        case REACT_CALL_TYPE:
          {
            var _created3 = createFiberFromCall(newChild, returnFiber.internalContextTag, expirationTime);
            _created3['return'] = returnFiber;
            return _created3;
          }

        case REACT_RETURN_TYPE:
          {
            var _created4 = createFiberFromReturn(newChild, returnFiber.internalContextTag, expirationTime);
            _created4.type = newChild.value;
            _created4['return'] = returnFiber;
            return _created4;
          }

        case REACT_PORTAL_TYPE:
          {
            var _created5 = createFiberFromPortal(newChild, returnFiber.internalContextTag, expirationTime);
            _created5['return'] = returnFiber;
            return _created5;
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _created6 = createFiberFromFragment(newChild, returnFiber.internalContextTag, expirationTime, null);
        _created6['return'] = returnFiber;
        return _created6;
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
    // Update the fiber if the keys match, otherwise return null.

    var key = oldFiber !== null ? oldFiber.key : null;

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      if (key !== null) {
        return null;
      }
      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.key === key) {
              if (newChild.type === REACT_FRAGMENT_TYPE) {
                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
              }
              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }

        case REACT_CALL_TYPE:
          {
            if (newChild.key === key) {
              return updateCall(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }

        case REACT_RETURN_TYPE:
          {
            // Returns don't have keys. If the previous node is implicitly keyed
            // we can continue to replace it without aborting even if it is not a
            // yield.
            if (key === null) {
              return updateReturn(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }

        case REACT_PORTAL_TYPE:
          {
            if (newChild.key === key) {
              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        if (key !== null) {
          return null;
        }

        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys, so we neither have to check the old nor
      // new node for the key. If both are text nodes, they match.
      var matchedFiber = existingChildren.get(newIdx) || null;
      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
            if (newChild.type === REACT_FRAGMENT_TYPE) {
              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
            }
            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
          }

        case REACT_CALL_TYPE:
          {
            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
            return updateCall(returnFiber, _matchedFiber2, newChild, expirationTime);
          }

        case REACT_RETURN_TYPE:
          {
            // Returns don't have keys, so we neither have to check the old nor
            // new node for the key. If both are returns, they match.
            var _matchedFiber3 = existingChildren.get(newIdx) || null;
            return updateReturn(returnFiber, _matchedFiber3, newChild, expirationTime);
          }

        case REACT_PORTAL_TYPE:
          {
            var _matchedFiber4 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
            return updatePortal(returnFiber, _matchedFiber4, newChild, expirationTime);
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _matchedFiber5 = existingChildren.get(newIdx) || null;
        return updateFragment(returnFiber, _matchedFiber5, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  /**
   * Warns if there is a duplicate or missing key
   */
  function warnOnInvalidKey(child, knownKeys) {
    {
      if (typeof child !== 'object' || child === null) {
        return knownKeys;
      }
      switch (child.$$typeof) {
        case REACT_ELEMENT_TYPE:
        case REACT_CALL_TYPE:
        case REACT_PORTAL_TYPE:
          warnForMissingKey(child);
          var key = child.key;
          if (typeof key !== 'string') {
            break;
          }
          if (knownKeys === null) {
            knownKeys = new Set();
            knownKeys.add(key);
            break;
          }
          if (!knownKeys.has(key)) {
            knownKeys.add(key);
            break;
          }
          warning_1$1(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted â the behavior is unsupported and ' + 'could change in a future version.%s', key, getCurrentFiberStackAddendum$1());
          break;
        default:
          break;
      }
    }
    return knownKeys;
  }

  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
    // This algorithm can't optimize by searching from boths ends since we
    // don't have backpointers on fibers. I'm trying to see how far we can get
    // with that model. If it ends up not being worth the tradeoffs, we can
    // add it later.

    // Even with a two ended optimization, we'd want to optimize for the case
    // where there are few changes and brute force the comparison instead of
    // going for the Map. It'd like to explore hitting that path first in
    // forward-only mode and only go for the Map once we notice that we need
    // lots of look ahead. This doesn't handle reversal as well as two ended
    // search but that's unusual. Besides, for the two ended optimization to
    // work on Iterables, we'd need to copy the whole set.

    // In this first iteration, we'll just live with hitting the bad case
    // (adding everything to a Map) in for every insert/move.

    // If you change this code, also update reconcileChildrenIterator() which
    // uses the same algorithm.

    {
      // First, validate keys.
      var knownKeys = null;
      for (var i = 0; i < newChildren.length; i++) {
        var child = newChildren[i];
        knownKeys = warnOnInvalidKey(child, knownKeys);
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;

    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;
    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }
      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }
        break;
      }
      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }
      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }
      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (newIdx === newChildren.length) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
        if (!_newFiber) {
          continue;
        }
        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber;
        } else {
          previousNewFiber.sibling = _newFiber;
        }
        previousNewFiber = _newFiber;
      }
      return resultingFirstChild;
    }

    // Add all children to a key map for quick lookups.
    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

    // Keep scanning and use the map to restore deleted items as moves.
    for (; newIdx < newChildren.length; newIdx++) {
      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
      if (_newFiber2) {
        if (shouldTrackSideEffects) {
          if (_newFiber2.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren['delete'](_newFiber2.key === null ? newIdx : _newFiber2.key);
          }
        }
        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber2;
        } else {
          previousNewFiber.sibling = _newFiber2;
        }
        previousNewFiber = _newFiber2;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
    // This is the same implementation as reconcileChildrenArray(),
    // but using the iterator instead.

    var iteratorFn = getIteratorFn(newChildrenIterable);
    !(typeof iteratorFn === 'function') ? invariant_1$1(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;

    {
      // Warn about using Maps as children
      if (typeof newChildrenIterable.entries === 'function') {
        var possibleMap = newChildrenIterable;
        if (possibleMap.entries === iteratorFn) {
          warning_1$1(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', getCurrentFiberStackAddendum$1());
          didWarnAboutMaps = true;
        }
      }

      // First, validate keys.
      // We'll get a different iterator later for the main pass.
      var _newChildren = iteratorFn.call(newChildrenIterable);
      if (_newChildren) {
        var knownKeys = null;
        var _step = _newChildren.next();
        for (; !_step.done; _step = _newChildren.next()) {
          var child = _step.value;
          knownKeys = warnOnInvalidKey(child, knownKeys);
        }
      }
    }

    var newChildren = iteratorFn.call(newChildrenIterable);
    !(newChildren != null) ? invariant_1$1(false, 'An iterable object provided no iterator.') : void 0;

    var resultingFirstChild = null;
    var previousNewFiber = null;

    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;

    var step = newChildren.next();
    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }
      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (!oldFiber) {
          oldFiber = nextOldFiber;
        }
        break;
      }
      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }
      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }
      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (step.done) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
        if (_newFiber3 === null) {
          continue;
        }
        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber3;
        } else {
          previousNewFiber.sibling = _newFiber3;
        }
        previousNewFiber = _newFiber3;
      }
      return resultingFirstChild;
    }

    // Add all children to a key map for quick lookups.
    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

    // Keep scanning and use the map to restore deleted items as moves.
    for (; !step.done; newIdx++, step = newChildren.next()) {
      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
      if (_newFiber4 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber4.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren['delete'](_newFiber4.key === null ? newIdx : _newFiber4.key);
          }
        }
        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber4;
        } else {
          previousNewFiber.sibling = _newFiber4;
        }
        previousNewFiber = _newFiber4;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
    // There's no need to check for keys on text nodes since we don't have a
    // way to define them.
    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
      // We already have an existing node so let's just update it and delete
      // the rest.
      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
      var existing = useFiber(currentFirstChild, textContent, expirationTime);
      existing['return'] = returnFiber;
      return existing;
    }
    // The existing first child is not a text node so we need to create one
    // and delete the existing ones.
    deleteRemainingChildren(returnFiber, currentFirstChild);
    var created = createFiberFromText(textContent, returnFiber.internalContextTag, expirationTime);
    created['return'] = returnFiber;
    return created;
  }

  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
    var key = element.key;
    var child = currentFirstChild;
    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.type === element.type) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
          existing.ref = coerceRef(child, element);
          existing['return'] = returnFiber;
          {
            existing._debugSource = element._source;
            existing._debugOwner = element._owner;
          }
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }
      child = child.sibling;
    }

    if (element.type === REACT_FRAGMENT_TYPE) {
      var created = createFiberFromFragment(element.props.children, returnFiber.internalContextTag, expirationTime, element.key);
      created['return'] = returnFiber;
      return created;
    } else {
      var _created7 = createFiberFromElement(element, returnFiber.internalContextTag, expirationTime);
      _created7.ref = coerceRef(currentFirstChild, element);
      _created7['return'] = returnFiber;
      return _created7;
    }
  }

  function reconcileSingleCall(returnFiber, currentFirstChild, call, expirationTime) {
    var key = call.key;
    var child = currentFirstChild;
    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === CallComponent) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, call, expirationTime);
          existing['return'] = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }
      child = child.sibling;
    }

    var created = createFiberFromCall(call, returnFiber.internalContextTag, expirationTime);
    created['return'] = returnFiber;
    return created;
  }

  function reconcileSingleReturn(returnFiber, currentFirstChild, returnNode, expirationTime) {
    // There's no need to check for keys on yields since they're stateless.
    var child = currentFirstChild;
    if (child !== null) {
      if (child.tag === ReturnComponent) {
        deleteRemainingChildren(returnFiber, child.sibling);
        var existing = useFiber(child, null, expirationTime);
        existing.type = returnNode.value;
        existing['return'] = returnFiber;
        return existing;
      } else {
        deleteRemainingChildren(returnFiber, child);
      }
    }

    var created = createFiberFromReturn(returnNode, returnFiber.internalContextTag, expirationTime);
    created.type = returnNode.value;
    created['return'] = returnFiber;
    return created;
  }

  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
    var key = portal.key;
    var child = currentFirstChild;
    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, portal.children || [], expirationTime);
          existing['return'] = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }
      child = child.sibling;
    }

    var created = createFiberFromPortal(portal, returnFiber.internalContextTag, expirationTime);
    created['return'] = returnFiber;
    return created;
  }

  // This API will tag the children with the side-effect of the reconciliation
  // itself. They will be added to the side-effect list as we pass through the
  // children and the parent.
  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
    // This function is not recursive.
    // If the top level item is an array, we treat it as a set of children,
    // not as a fragment. Nested arrays on the other hand will be treated as
    // fragment nodes. Recursion happens at the normal flow.

    // Handle top level unkeyed fragments as if they were arrays.
    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
    // We treat the ambiguous cases above the same.
    if (enableReactFragment && typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null) {
      newChild = newChild.props.children;
    }

    // Handle object types
    var isObject = typeof newChild === 'object' && newChild !== null;

    if (isObject) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

        case REACT_CALL_TYPE:
          return placeSingleChild(reconcileSingleCall(returnFiber, currentFirstChild, newChild, expirationTime));
        case REACT_RETURN_TYPE:
          return placeSingleChild(reconcileSingleReturn(returnFiber, currentFirstChild, newChild, expirationTime));
        case REACT_PORTAL_TYPE:
          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
      }
    }

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
    }

    if (isArray$1(newChild)) {
      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (getIteratorFn(newChild)) {
      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (isObject) {
      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }
    if (typeof newChild === 'undefined') {
      // If the new child is undefined, and the return fiber is a composite
      // component, throw an error. If Fiber return types are disabled,
      // we already threw above.
      switch (returnFiber.tag) {
        case ClassComponent:
          {
            {
              var instance = returnFiber.stateNode;
              if (instance.render._isMockFunction) {
                // We allow auto-mocks to proceed as if they're returning null.
                break;
              }
            }
          }
        // Intentionally fall through to the next case, which handles both
        // functions and classes
        // eslint-disable-next-lined no-fallthrough
        case FunctionalComponent:
          {
            var Component = returnFiber.type;
            invariant_1$1(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
          }
      }
    }

    // Remaining cases are all treated as empty.
    return deleteRemainingChildren(returnFiber, currentFirstChild);
  }

  return reconcileChildFibers;
}

var reconcileChildFibers = ChildReconciler(true, true);

var reconcileChildFibersInPlace = ChildReconciler(false, true);

var mountChildFibersInPlace = ChildReconciler(false, false);

function cloneChildFibers(current, workInProgress) {
  !(current === null || workInProgress.child === current.child) ? invariant_1$1(false, 'Resuming work not yet implemented.') : void 0;

  if (workInProgress.child === null) {
    return;
  }

  var currentChild = workInProgress.child;
  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
  workInProgress.child = newChild;

  newChild['return'] = workInProgress;
  while (currentChild.sibling !== null) {
    currentChild = currentChild.sibling;
    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
    newChild['return'] = workInProgress;
  }
  newChild.sibling = null;
}

{
  var warnedAboutStatelessRefs = {};
}

var ReactFiberBeginWork = function (config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber) {
  var shouldSetTextContent = config.shouldSetTextContent,
      useSyncScheduling = config.useSyncScheduling,
      shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree;
  var pushHostContext = hostContext.pushHostContext,
      pushHostContainer = hostContext.pushHostContainer;
  var enterHydrationState = hydrationContext.enterHydrationState,
      resetHydrationState = hydrationContext.resetHydrationState,
      tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;

  var _ReactFiberClassCompo = ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState),
      adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance,
      constructClassInstance = _ReactFiberClassCompo.constructClassInstance,
      mountClassInstance = _ReactFiberClassCompo.mountClassInstance,
      updateClassInstance = _ReactFiberClassCompo.updateClassInstance;

  // TODO: Remove this and use reconcileChildrenAtExpirationTime directly.


  function reconcileChildren(current, workInProgress, nextChildren) {
    reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, workInProgress.expirationTime);
  }

  function reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime) {
    if (current === null) {
      // If this is a fresh new component that hasn't been rendered yet, we
      // won't update its child set by applying minimal side-effects. Instead,
      // we will add them all to the child before it gets rendered. That means
      // we can optimize this reconciliation pass by not tracking side-effects.
      workInProgress.child = mountChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, renderExpirationTime);
    } else if (current.child === workInProgress.child) {
      // If the current child is the same as the work in progress, it means that
      // we haven't yet started any work on these children. Therefore, we use
      // the clone algorithm to create a copy of all the current children.

      // If we had any progressed work already, that is invalid at this point so
      // let's throw it out.
      workInProgress.child = reconcileChildFibers(workInProgress, workInProgress.child, nextChildren, renderExpirationTime);
    } else {
      // If, on the other hand, it is already using a clone, that means we've
      // already begun some work on this tree and we can continue where we left
      // off by reconciling against the existing children.
      workInProgress.child = reconcileChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, renderExpirationTime);
    }
  }

  function updateFragment(current, workInProgress) {
    var nextChildren = workInProgress.pendingProps;
    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
      if (nextChildren === null) {
        nextChildren = workInProgress.memoizedProps;
      }
    } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }
    reconcileChildren(current, workInProgress, nextChildren);
    memoizeProps(workInProgress, nextChildren);
    return workInProgress.child;
  }

  function markRef(current, workInProgress) {
    var ref = workInProgress.ref;
    if (ref !== null && (!current || current.ref !== ref)) {
      // Schedule a Ref effect
      workInProgress.effectTag |= Ref;
    }
  }

  function updateFunctionalComponent(current, workInProgress) {
    var fn = workInProgress.type;
    var nextProps = workInProgress.pendingProps;

    var memoizedProps = workInProgress.memoizedProps;
    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
      if (nextProps === null) {
        nextProps = memoizedProps;
      }
    } else {
      if (nextProps === null || memoizedProps === nextProps) {
        return bailoutOnAlreadyFinishedWork(current, workInProgress);
      }
      // TODO: consider bringing fn.shouldComponentUpdate() back.
      // It used to be here.
    }

    var unmaskedContext = getUnmaskedContext(workInProgress);
    var context = getMaskedContext(workInProgress, unmaskedContext);

    var nextChildren;

    {
      ReactCurrentOwner.current = workInProgress;
      ReactDebugCurrentFiber.setCurrentPhase('render');
      nextChildren = fn(nextProps, context);
      ReactDebugCurrentFiber.setCurrentPhase(null);
    }
    // React DevTools reads this flag.
    workInProgress.effectTag |= PerformedWork;
    reconcileChildren(current, workInProgress, nextChildren);
    memoizeProps(workInProgress, nextProps);
    return workInProgress.child;
  }

  function updateClassComponent(current, workInProgress, renderExpirationTime) {
    // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.
    var hasContext = pushContextProvider(workInProgress);

    var shouldUpdate = void 0;
    if (current === null) {
      if (!workInProgress.stateNode) {
        // In the initial pass we might need to construct the instance.
        constructClassInstance(workInProgress, workInProgress.pendingProps);
        mountClassInstance(workInProgress, renderExpirationTime);
        shouldUpdate = true;
      } else {
        invariant_1$1(false, 'Resuming work not yet implemented.');
        // In a resume, we'll already have an instance we can reuse.
        // shouldUpdate = resumeMountClassInstance(workInProgress, renderExpirationTime);
      }
    } else {
      shouldUpdate = updateClassInstance(current, workInProgress, renderExpirationTime);
    }
    return finishClassComponent(current, workInProgress, shouldUpdate, hasContext);
  }

  function finishClassComponent(current, workInProgress, shouldUpdate, hasContext) {
    // Refs should update even if shouldComponentUpdate returns false
    markRef(current, workInProgress);

    if (!shouldUpdate) {
      // Context providers should defer to sCU for rendering
      if (hasContext) {
        invalidateContextProvider(workInProgress, false);
      }

      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }

    var instance = workInProgress.stateNode;

    // Rerender
    ReactCurrentOwner.current = workInProgress;
    var nextChildren = void 0;
    {
      ReactDebugCurrentFiber.setCurrentPhase('render');
      nextChildren = instance.render();
      ReactDebugCurrentFiber.setCurrentPhase(null);
    }
    // React DevTools reads this flag.
    workInProgress.effectTag |= PerformedWork;
    reconcileChildren(current, workInProgress, nextChildren);
    // Memoize props and state using the values we just used to render.
    // TODO: Restructure so we never read values from the instance.
    memoizeState(workInProgress, instance.state);
    memoizeProps(workInProgress, instance.props);

    // The context might have changed so we need to recalculate it.
    if (hasContext) {
      invalidateContextProvider(workInProgress, true);
    }

    return workInProgress.child;
  }

  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    if (root.pendingContext) {
      pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
    } else if (root.context) {
      // Should always be set
      pushTopLevelContextObject(workInProgress, root.context, false);
    }
    pushHostContainer(workInProgress, root.containerInfo);
  }

  function updateHostRoot(current, workInProgress, renderExpirationTime) {
    pushHostRootContext(workInProgress);
    var updateQueue = workInProgress.updateQueue;
    if (updateQueue !== null) {
      var prevState = workInProgress.memoizedState;
      var state = processUpdateQueue(current, workInProgress, updateQueue, null, null, renderExpirationTime);
      if (prevState === state) {
        // If the state is the same as before, that's a bailout because we had
        // no work that expires at this time.
        resetHydrationState();
        return bailoutOnAlreadyFinishedWork(current, workInProgress);
      }
      var element = state.element;
      var root = workInProgress.stateNode;
      if ((current === null || current.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
        // If we don't have any current children this might be the first pass.
        // We always try to hydrate. If this isn't a hydration pass there won't
        // be any children to hydrate which is effectively the same thing as
        // not hydrating.

        // This is a bit of a hack. We track the host root as a placement to
        // know that we're currently in a mounting state. That way isMounted
        // works as expected. We must reset this before committing.
        // TODO: Delete this when we delete isMounted and findDOMNode.
        workInProgress.effectTag |= Placement;

        // Ensure that children mount into this root without tracking
        // side-effects. This ensures that we don't store Placement effects on
        // nodes that will be hydrated.
        workInProgress.child = mountChildFibersInPlace(workInProgress, workInProgress.child, element, renderExpirationTime);
      } else {
        // Otherwise reset hydration state in case we aborted and resumed another
        // root.
        resetHydrationState();
        reconcileChildren(current, workInProgress, element);
      }
      memoizeState(workInProgress, state);
      return workInProgress.child;
    }
    resetHydrationState();
    // If there is no update queue, that's a bailout because the root has no props.
    return bailoutOnAlreadyFinishedWork(current, workInProgress);
  }

  function updateHostComponent(current, workInProgress, renderExpirationTime) {
    pushHostContext(workInProgress);

    if (current === null) {
      tryToClaimNextHydratableInstance(workInProgress);
    }

    var type = workInProgress.type;
    var memoizedProps = workInProgress.memoizedProps;
    var nextProps = workInProgress.pendingProps;
    if (nextProps === null) {
      nextProps = memoizedProps;
      !(nextProps !== null) ? invariant_1$1(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    }
    var prevProps = current !== null ? current.memoizedProps : null;

    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
    } else if (nextProps === null || memoizedProps === nextProps) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }

    var nextChildren = nextProps.children;
    var isDirectTextChild = shouldSetTextContent(type, nextProps);

    if (isDirectTextChild) {
      // We special case a direct text child of a host node. This is a common
      // case. We won't handle it as a reified child. We will instead handle
      // this in the host environment that also have access to this prop. That
      // avoids allocating another HostText fiber and traversing it.
      nextChildren = null;
    } else if (prevProps && shouldSetTextContent(type, prevProps)) {
      // If we're switching from a direct text child to a normal child, or to
      // empty, we need to schedule the text content to be reset.
      workInProgress.effectTag |= ContentReset;
    }

    markRef(current, workInProgress);

    // Check the host config to see if the children are offscreen/hidden.
    if (renderExpirationTime !== Never && !useSyncScheduling && shouldDeprioritizeSubtree(type, nextProps)) {
      // Down-prioritize the children.
      workInProgress.expirationTime = Never;
      // Bailout and come back to this fiber later.
      return null;
    }

    reconcileChildren(current, workInProgress, nextChildren);
    memoizeProps(workInProgress, nextProps);
    return workInProgress.child;
  }

  function updateHostText(current, workInProgress) {
    if (current === null) {
      tryToClaimNextHydratableInstance(workInProgress);
    }
    var nextProps = workInProgress.pendingProps;
    if (nextProps === null) {
      nextProps = workInProgress.memoizedProps;
    }
    memoizeProps(workInProgress, nextProps);
    // Nothing to do here. This is terminal. We'll do the completion step
    // immediately after.
    return null;
  }

  function mountIndeterminateComponent(current, workInProgress, renderExpirationTime) {
    !(current === null) ? invariant_1$1(false, 'An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    var fn = workInProgress.type;
    var props = workInProgress.pendingProps;
    var unmaskedContext = getUnmaskedContext(workInProgress);
    var context = getMaskedContext(workInProgress, unmaskedContext);

    var value;

    {
      if (fn.prototype && typeof fn.prototype.render === 'function') {
        var componentName = getComponentName(workInProgress);
        warning_1$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
      }
      ReactCurrentOwner.current = workInProgress;
      value = fn(props, context);
    }
    // React DevTools reads this flag.
    workInProgress.effectTag |= PerformedWork;

    if (typeof value === 'object' && value !== null && typeof value.render === 'function') {
      // Proceed under the assumption that this is a class instance
      workInProgress.tag = ClassComponent;

      // Push context providers early to prevent context stack mismatches.
      // During mounting we don't know the child context yet as the instance doesn't exist.
      // We will invalidate the child context in finishClassComponent() right after rendering.
      var hasContext = pushContextProvider(workInProgress);
      adoptClassInstance(workInProgress, value);
      mountClassInstance(workInProgress, renderExpirationTime);
      return finishClassComponent(current, workInProgress, true, hasContext);
    } else {
      // Proceed under the assumption that this is a functional component
      workInProgress.tag = FunctionalComponent;
      {
        var Component = workInProgress.type;

        if (Component) {
          warning_1$1(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component');
        }
        if (workInProgress.ref !== null) {
          var info = '';
          var ownerName = ReactDebugCurrentFiber.getCurrentFiberOwnerName();
          if (ownerName) {
            info += '\n\nCheck the render method of `' + ownerName + '`.';
          }

          var warningKey = ownerName || workInProgress._debugID || '';
          var debugSource = workInProgress._debugSource;
          if (debugSource) {
            warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
          }
          if (!warnedAboutStatelessRefs[warningKey]) {
            warnedAboutStatelessRefs[warningKey] = true;
            warning_1$1(false, 'Stateless function components cannot be given refs. ' + 'Attempts to access this ref will fail.%s%s', info, ReactDebugCurrentFiber.getCurrentFiberStackAddendum());
          }
        }
      }
      reconcileChildren(current, workInProgress, value);
      memoizeProps(workInProgress, props);
      return workInProgress.child;
    }
  }

  function updateCallComponent(current, workInProgress, renderExpirationTime) {
    var nextCall = workInProgress.pendingProps;
    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
      if (nextCall === null) {
        nextCall = current && current.memoizedProps;
        !(nextCall !== null) ? invariant_1$1(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      }
    } else if (nextCall === null || workInProgress.memoizedProps === nextCall) {
      nextCall = workInProgress.memoizedProps;
      // TODO: When bailing out, we might need to return the stateNode instead
      // of the child. To check it for work.
      // return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }

    var nextChildren = nextCall.children;

    // The following is a fork of reconcileChildrenAtExpirationTime but using
    // stateNode to store the child.
    if (current === null) {
      workInProgress.stateNode = mountChildFibersInPlace(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);
    } else if (current.child === workInProgress.child) {
      workInProgress.stateNode = reconcileChildFibers(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);
    } else {
      workInProgress.stateNode = reconcileChildFibersInPlace(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);
    }

    memoizeProps(workInProgress, nextCall);
    // This doesn't take arbitrary time so we could synchronously just begin
    // eagerly do the work of workInProgress.child as an optimization.
    return workInProgress.stateNode;
  }

  function updatePortalComponent(current, workInProgress, renderExpirationTime) {
    pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
    var nextChildren = workInProgress.pendingProps;
    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
      if (nextChildren === null) {
        nextChildren = current && current.memoizedProps;
        !(nextChildren != null) ? invariant_1$1(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      }
    } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }

    if (current === null) {
      // Portals are special because we don't append the children during mount
      // but at commit. Therefore we need to track insertions which the normal
      // flow doesn't do during mount. This doesn't happen at the root because
      // the root always starts with a "current" with a null child.
      // TODO: Consider unifying this with how the root works.
      workInProgress.child = reconcileChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, renderExpirationTime);
      memoizeProps(workInProgress, nextChildren);
    } else {
      reconcileChildren(current, workInProgress, nextChildren);
      memoizeProps(workInProgress, nextChildren);
    }
    return workInProgress.child;
  }

  /*
  function reuseChildrenEffects(returnFiber : Fiber, firstChild : Fiber) {
    let child = firstChild;
    do {
      // Ensure that the first and last effect of the parent corresponds
      // to the children's first and last effect.
      if (!returnFiber.firstEffect) {
        returnFiber.firstEffect = child.firstEffect;
      }
      if (child.lastEffect) {
        if (returnFiber.lastEffect) {
          returnFiber.lastEffect.nextEffect = child.firstEffect;
        }
        returnFiber.lastEffect = child.lastEffect;
      }
    } while (child = child.sibling);
  }
  */

  function bailoutOnAlreadyFinishedWork(current, workInProgress) {
    cancelWorkTimer(workInProgress);

    // TODO: We should ideally be able to bail out early if the children have no
    // more work to do. However, since we don't have a separation of this
    // Fiber's priority and its children yet - we don't know without doing lots
    // of the same work we do anyway. Once we have that separation we can just
    // bail out here if the children has no more work at this priority level.
    // if (workInProgress.priorityOfChildren <= priorityLevel) {
    //   // If there are side-effects in these children that have not yet been
    //   // committed we need to ensure that they get properly transferred up.
    //   if (current && current.child !== workInProgress.child) {
    //     reuseChildrenEffects(workInProgress, child);
    //   }
    //   return null;
    // }

    cloneChildFibers(current, workInProgress);
    return workInProgress.child;
  }

  function bailoutOnLowPriority(current, workInProgress) {
    cancelWorkTimer(workInProgress);

    // TODO: Handle HostComponent tags here as well and call pushHostContext()?
    // See PR 8590 discussion for context
    switch (workInProgress.tag) {
      case HostRoot:
        pushHostRootContext(workInProgress);
        break;
      case ClassComponent:
        pushContextProvider(workInProgress);
        break;
      case HostPortal:
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        break;
    }
    // TODO: What if this is currently in progress?
    // How can that happen? How is this not being cloned?
    return null;
  }

  // TODO: Delete memoizeProps/State and move to reconcile/bailout instead
  function memoizeProps(workInProgress, nextProps) {
    workInProgress.memoizedProps = nextProps;
  }

  function memoizeState(workInProgress, nextState) {
    workInProgress.memoizedState = nextState;
    // Don't reset the updateQueue, in case there are pending updates. Resetting
    // is handled by processUpdateQueue.
  }

  function beginWork(current, workInProgress, renderExpirationTime) {
    if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
      return bailoutOnLowPriority(current, workInProgress);
    }

    switch (workInProgress.tag) {
      case IndeterminateComponent:
        return mountIndeterminateComponent(current, workInProgress, renderExpirationTime);
      case FunctionalComponent:
        return updateFunctionalComponent(current, workInProgress);
      case ClassComponent:
        return updateClassComponent(current, workInProgress, renderExpirationTime);
      case HostRoot:
        return updateHostRoot(current, workInProgress, renderExpirationTime);
      case HostComponent:
        return updateHostComponent(current, workInProgress, renderExpirationTime);
      case HostText:
        return updateHostText(current, workInProgress);
      case CallHandlerPhase:
        // This is a restart. Reset the tag to the initial phase.
        workInProgress.tag = CallComponent;
      // Intentionally fall through since this is now the same.
      case CallComponent:
        return updateCallComponent(current, workInProgress, renderExpirationTime);
      case ReturnComponent:
        // A return component is just a placeholder, we can just run through the
        // next one immediately.
        return null;
      case HostPortal:
        return updatePortalComponent(current, workInProgress, renderExpirationTime);
      case Fragment:
        return updateFragment(current, workInProgress);
      default:
        invariant_1$1(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
    }
  }

  function beginFailedWork(current, workInProgress, renderExpirationTime) {
    // Push context providers here to avoid a push/pop context mismatch.
    switch (workInProgress.tag) {
      case ClassComponent:
        pushContextProvider(workInProgress);
        break;
      case HostRoot:
        pushHostRootContext(workInProgress);
        break;
      default:
        invariant_1$1(false, 'Invalid type of work. This error is likely caused by a bug in React. Please file an issue.');
    }

    // Add an error effect so we can handle the error during the commit phase
    workInProgress.effectTag |= Err;

    // This is a weird case where we do "resume" work â work that failed on
    // our first attempt. Because we no longer have a notion of "progressed
    // deletions," reset the child to the current child to make sure we delete
    // it again. TODO: Find a better way to handle this, perhaps during a more
    // general overhaul of error handling.
    if (current === null) {
      workInProgress.child = null;
    } else if (workInProgress.child !== current.child) {
      workInProgress.child = current.child;
    }

    if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
      return bailoutOnLowPriority(current, workInProgress);
    }

    // If we don't bail out, we're going be recomputing our children so we need
    // to drop our effect list.
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;

    // Unmount the current children as if the component rendered null
    var nextChildren = null;
    reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime);

    if (workInProgress.tag === ClassComponent) {
      var instance = workInProgress.stateNode;
      workInProgress.memoizedProps = instance.props;
      workInProgress.memoizedState = instance.state;
    }

    return workInProgress.child;
  }

  return {
    beginWork: beginWork,
    beginFailedWork: beginFailedWork
  };
};

var ReactFiberCompleteWork = function (config, hostContext, hydrationContext) {
  var createInstance = config.createInstance,
      createTextInstance = config.createTextInstance,
      appendInitialChild = config.appendInitialChild,
      finalizeInitialChildren = config.finalizeInitialChildren,
      prepareUpdate = config.prepareUpdate,
      mutation = config.mutation,
      persistence = config.persistence;
  var getRootHostContainer = hostContext.getRootHostContainer,
      popHostContext = hostContext.popHostContext,
      getHostContext = hostContext.getHostContext,
      popHostContainer = hostContext.popHostContainer;
  var prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
      prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
      popHydrationState = hydrationContext.popHydrationState;


  function markUpdate(workInProgress) {
    // Tag the fiber with an update effect. This turns a Placement into
    // an UpdateAndPlacement.
    workInProgress.effectTag |= Update;
  }

  function markRef(workInProgress) {
    workInProgress.effectTag |= Ref;
  }

  function appendAllReturns(returns, workInProgress) {
    var node = workInProgress.stateNode;
    if (node) {
      node['return'] = workInProgress;
    }
    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText || node.tag === HostPortal) {
        invariant_1$1(false, 'A call cannot have host component children.');
      } else if (node.tag === ReturnComponent) {
        returns.push(node.type);
      } else if (node.child !== null) {
        node.child['return'] = node;
        node = node.child;
        continue;
      }
      while (node.sibling === null) {
        if (node['return'] === null || node['return'] === workInProgress) {
          return;
        }
        node = node['return'];
      }
      node.sibling['return'] = node['return'];
      node = node.sibling;
    }
  }

  function moveCallToHandlerPhase(current, workInProgress, renderExpirationTime) {
    var call = workInProgress.memoizedProps;
    !call ? invariant_1$1(false, 'Should be resolved by now. This error is likely caused by a bug in React. Please file an issue.') : void 0;

    // First step of the call has completed. Now we need to do the second.
    // TODO: It would be nice to have a multi stage call represented by a
    // single component, or at least tail call optimize nested ones. Currently
    // that requires additional fields that we don't want to add to the fiber.
    // So this requires nested handlers.
    // Note: This doesn't mutate the alternate node. I don't think it needs to
    // since this stage is reset for every pass.
    workInProgress.tag = CallHandlerPhase;

    // Build up the returns.
    // TODO: Compare this to a generator or opaque helpers like Children.
    var returns = [];
    appendAllReturns(returns, workInProgress);
    var fn = call.handler;
    var props = call.props;
    var nextChildren = fn(props, returns);

    var currentFirstChild = current !== null ? current.child : null;
    workInProgress.child = reconcileChildFibers(workInProgress, currentFirstChild, nextChildren, renderExpirationTime);
    return workInProgress.child;
  }

  function appendAllChildren(parent, workInProgress) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;
    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendInitialChild(parent, node.stateNode);
      } else if (node.tag === HostPortal) {
        // If we have a portal child, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.child !== null) {
        node.child['return'] = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) {
        return;
      }
      while (node.sibling === null) {
        if (node['return'] === null || node['return'] === workInProgress) {
          return;
        }
        node = node['return'];
      }
      node.sibling['return'] = node['return'];
      node = node.sibling;
    }
  }

  var updateHostContainer = void 0;
  var updateHostComponent = void 0;
  var updateHostText = void 0;
  if (mutation) {
    if (enableMutatingReconciler) {
      // Mutation mode
      updateHostContainer = function (workInProgress) {
        // Noop
      };
      updateHostComponent = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
        // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload;
        // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) {
          markUpdate(workInProgress);
        }
      };
      updateHostText = function (current, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) {
          markUpdate(workInProgress);
        }
      };
    } else {
      invariant_1$1(false, 'Mutating reconciler is disabled.');
    }
  } else if (persistence) {
    if (enablePersistentReconciler) {
      // Persistent host tree mode
      var cloneInstance = persistence.cloneInstance,
          createContainerChildSet = persistence.createContainerChildSet,
          appendChildToContainerChildSet = persistence.appendChildToContainerChildSet,
          finalizeContainerChildren = persistence.finalizeContainerChildren;

      // An unfortunate fork of appendAllChildren because we have two different parent types.

      var appendAllChildrenToContainer = function (containerChildSet, workInProgress) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while (node !== null) {
          if (node.tag === HostComponent || node.tag === HostText) {
            appendChildToContainerChildSet(containerChildSet, node.stateNode);
          } else if (node.tag === HostPortal) {
            // If we have a portal child, then we don't want to traverse
            // down its children. Instead, we'll get insertions from each child in
            // the portal directly.
          } else if (node.child !== null) {
            node.child['return'] = node;
            node = node.child;
            continue;
          }
          if (node === workInProgress) {
            return;
          }
          while (node.sibling === null) {
            if (node['return'] === null || node['return'] === workInProgress) {
              return;
            }
            node = node['return'];
          }
          node.sibling['return'] = node['return'];
          node = node.sibling;
        }
      };
      updateHostContainer = function (workInProgress) {
        var portalOrRoot = workInProgress.stateNode;
        var childrenUnchanged = workInProgress.firstEffect === null;
        if (childrenUnchanged) {
          // No changes, just reuse the existing instance.
        } else {
          var container = portalOrRoot.containerInfo;
          var newChildSet = createContainerChildSet(container);
          if (finalizeContainerChildren(container, newChildSet)) {
            markUpdate(workInProgress);
          }
          portalOrRoot.pendingChildren = newChildSet;
          // If children might have changed, we have to add them all to the set.
          appendAllChildrenToContainer(newChildSet, workInProgress);
          // Schedule an update on the container to swap out the container.
          markUpdate(workInProgress);
        }
      };
      updateHostComponent = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
        // If there are no effects associated with this node, then none of our children had any updates.
        // This guarantees that we can reuse all of them.
        var childrenUnchanged = workInProgress.firstEffect === null;
        var currentInstance = current.stateNode;
        if (childrenUnchanged && updatePayload === null) {
          // No changes, just reuse the existing instance.
          // Note that this might release a previous clone.
          workInProgress.stateNode = currentInstance;
        } else {
          var recyclableInstance = workInProgress.stateNode;
          var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);
          if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance)) {
            markUpdate(workInProgress);
          }
          workInProgress.stateNode = newInstance;
          if (childrenUnchanged) {
            // If there are no other effects in this tree, we need to flag this node as having one.
            // Even though we're not going to use it for anything.
            // Otherwise parents won't know that there are new children to propagate upwards.
            markUpdate(workInProgress);
          } else {
            // If children might have changed, we have to add them all to the set.
            appendAllChildren(newInstance, workInProgress);
          }
        }
      };
      updateHostText = function (current, workInProgress, oldText, newText) {
        if (oldText !== newText) {
          // If the text content differs, we'll create a new text instance for it.
          var rootContainerInstance = getRootHostContainer();
          var currentHostContext = getHostContext();
          workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
          // We'll have to mark it as having an effect, even though we won't use the effect for anything.
          // This lets the parents know that at least one of their children has changed.
          markUpdate(workInProgress);
        }
      };
    } else {
      invariant_1$1(false, 'Persistent reconciler is disabled.');
    }
  } else {
    if (enableNoopReconciler) {
      // No host operations
      updateHostContainer = function (workInProgress) {
        // Noop
      };
      updateHostComponent = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
        // Noop
      };
      updateHostText = function (current, workInProgress, oldText, newText) {
        // Noop
      };
    } else {
      invariant_1$1(false, 'Noop reconciler is disabled.');
    }
  }

  function completeWork(current, workInProgress, renderExpirationTime) {
    // Get the latest props.
    var newProps = workInProgress.pendingProps;
    if (newProps === null) {
      newProps = workInProgress.memoizedProps;
    } else if (workInProgress.expirationTime !== Never || renderExpirationTime === Never) {
      // Reset the pending props, unless this was a down-prioritization.
      workInProgress.pendingProps = null;
    }

    switch (workInProgress.tag) {
      case FunctionalComponent:
        return null;
      case ClassComponent:
        {
          // We are leaving this subtree, so pop context if any.
          popContextProvider(workInProgress);
          return null;
        }
      case HostRoot:
        {
          popHostContainer(workInProgress);
          popTopLevelContextObject(workInProgress);
          var fiberRoot = workInProgress.stateNode;
          if (fiberRoot.pendingContext) {
            fiberRoot.context = fiberRoot.pendingContext;
            fiberRoot.pendingContext = null;
          }

          if (current === null || current.child === null) {
            // If we hydrated, pop so that we can delete any remaining children
            // that weren't hydrated.
            popHydrationState(workInProgress);
            // This resets the hacky state to fix isMounted before committing.
            // TODO: Delete this when we delete isMounted and findDOMNode.
            workInProgress.effectTag &= ~Placement;
          }
          updateHostContainer(workInProgress);
          return null;
        }
      case HostComponent:
        {
          popHostContext(workInProgress);
          var rootContainerInstance = getRootHostContainer();
          var type = workInProgress.type;
          if (current !== null && workInProgress.stateNode != null) {
            // If we have an alternate, that means this is an update and we need to
            // schedule a side-effect to do the updates.
            var oldProps = current.memoizedProps;
            // If we get updated because one of our children updated, we don't
            // have newProps so we'll have to reuse them.
            // TODO: Split the update API as separate for the props vs. children.
            // Even better would be if children weren't special cased at all tho.
            var instance = workInProgress.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);

            updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance);

            if (current.ref !== workInProgress.ref) {
              markRef(workInProgress);
            }
          } else {
            if (!newProps) {
              !(workInProgress.stateNode !== null) ? invariant_1$1(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
              // This can happen when we abort work.
              return null;
            }

            var _currentHostContext = getHostContext();
            // TODO: Move createInstance to beginWork and keep it on a context
            // "stack" as the parent. Then append children as we go in beginWork
            // or completeWork depending on we want to add then top->down or
            // bottom->up. Top->down is faster in IE11.
            var wasHydrated = popHydrationState(workInProgress);
            if (wasHydrated) {
              // TODO: Move this and createInstance step into the beginPhase
              // to consolidate.
              if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, _currentHostContext)) {
                // If changes to the hydrated node needs to be applied at the
                // commit-phase we mark this as such.
                markUpdate(workInProgress);
              }
            } else {
              var _instance = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);

              appendAllChildren(_instance, workInProgress);

              // Certain renderers require commit-time effects for initial mount.
              // (eg DOM renderer supports auto-focus for certain elements).
              // Make sure such renderers get scheduled for later work.
              if (finalizeInitialChildren(_instance, type, newProps, rootContainerInstance)) {
                markUpdate(workInProgress);
              }
              workInProgress.stateNode = _instance;
            }

            if (workInProgress.ref !== null) {
              // If there is a ref on a host node we need to schedule a callback
              markRef(workInProgress);
            }
          }
          return null;
        }
      case HostText:
        {
          var newText = newProps;
          if (current && workInProgress.stateNode != null) {
            var oldText = current.memoizedProps;
            // If we have an alternate, that means this is an update and we need
            // to schedule a side-effect to do the updates.
            updateHostText(current, workInProgress, oldText, newText);
          } else {
            if (typeof newText !== 'string') {
              !(workInProgress.stateNode !== null) ? invariant_1$1(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
              // This can happen when we abort work.
              return null;
            }
            var _rootContainerInstance = getRootHostContainer();
            var _currentHostContext2 = getHostContext();
            var _wasHydrated = popHydrationState(workInProgress);
            if (_wasHydrated) {
              if (prepareToHydrateHostTextInstance(workInProgress)) {
                markUpdate(workInProgress);
              }
            } else {
              workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);
            }
          }
          return null;
        }
      case CallComponent:
        return moveCallToHandlerPhase(current, workInProgress, renderExpirationTime);
      case CallHandlerPhase:
        // Reset the tag to now be a first phase call.
        workInProgress.tag = CallComponent;
        return null;
      case ReturnComponent:
        // Does nothing.
        return null;
      case Fragment:
        return null;
      case HostPortal:
        popHostContainer(workInProgress);
        updateHostContainer(workInProgress);
        return null;
      // Error cases
      case IndeterminateComponent:
        invariant_1$1(false, 'An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.');
      // eslint-disable-next-line no-fallthrough
      default:
        invariant_1$1(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
    }
  }

  return {
    completeWork: completeWork
  };
};

var invokeGuardedCallback$2 = ReactErrorUtils.invokeGuardedCallback;
var hasCaughtError$1 = ReactErrorUtils.hasCaughtError;
var clearCaughtError$1 = ReactErrorUtils.clearCaughtError;


var ReactFiberCommitWork = function (config, captureError) {
  var getPublicInstance = config.getPublicInstance,
      mutation = config.mutation,
      persistence = config.persistence;


  var callComponentWillUnmountWithTimer = function (current, instance) {
    startPhaseTimer(current, 'componentWillUnmount');
    instance.props = current.memoizedProps;
    instance.state = current.memoizedState;
    instance.componentWillUnmount();
    stopPhaseTimer();
  };

  // Capture errors so they don't interrupt unmounting.
  function safelyCallComponentWillUnmount(current, instance) {
    {
      invokeGuardedCallback$2(null, callComponentWillUnmountWithTimer, null, current, instance);
      if (hasCaughtError$1()) {
        var unmountError = clearCaughtError$1();
        captureError(current, unmountError);
      }
    }
  }

  function safelyDetachRef(current) {
    var ref = current.ref;
    if (ref !== null) {
      {
        invokeGuardedCallback$2(null, ref, null, null);
        if (hasCaughtError$1()) {
          var refError = clearCaughtError$1();
          captureError(current, refError);
        }
      }
    }
  }

  function commitLifeCycles(current, finishedWork) {
    switch (finishedWork.tag) {
      case ClassComponent:
        {
          var instance = finishedWork.stateNode;
          if (finishedWork.effectTag & Update) {
            if (current === null) {
              startPhaseTimer(finishedWork, 'componentDidMount');
              instance.props = finishedWork.memoizedProps;
              instance.state = finishedWork.memoizedState;
              instance.componentDidMount();
              stopPhaseTimer();
            } else {
              var prevProps = current.memoizedProps;
              var prevState = current.memoizedState;
              startPhaseTimer(finishedWork, 'componentDidUpdate');
              instance.props = finishedWork.memoizedProps;
              instance.state = finishedWork.memoizedState;
              instance.componentDidUpdate(prevProps, prevState);
              stopPhaseTimer();
            }
          }
          var updateQueue = finishedWork.updateQueue;
          if (updateQueue !== null) {
            commitCallbacks(updateQueue, instance);
          }
          return;
        }
      case HostRoot:
        {
          var _updateQueue = finishedWork.updateQueue;
          if (_updateQueue !== null) {
            var _instance = finishedWork.child !== null ? finishedWork.child.stateNode : null;
            commitCallbacks(_updateQueue, _instance);
          }
          return;
        }
      case HostComponent:
        {
          var _instance2 = finishedWork.stateNode;

          // Renderers may schedule work to be done after host components are mounted
          // (eg DOM renderer may schedule auto-focus for inputs and form controls).
          // These effects should only be committed when components are first mounted,
          // aka when there is no current/alternate.
          if (current === null && finishedWork.effectTag & Update) {
            var type = finishedWork.type;
            var props = finishedWork.memoizedProps;
            commitMount(_instance2, type, props, finishedWork);
          }

          return;
        }
      case HostText:
        {
          // We have no life-cycles associated with text.
          return;
        }
      case HostPortal:
        {
          // We have no life-cycles associated with portals.
          return;
        }
      default:
        {
          invariant_1$1(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
        }
    }
  }

  function commitAttachRef(finishedWork) {
    var ref = finishedWork.ref;
    if (ref !== null) {
      var instance = finishedWork.stateNode;
      switch (finishedWork.tag) {
        case HostComponent:
          ref(getPublicInstance(instance));
          break;
        default:
          ref(instance);
      }
    }
  }

  function commitDetachRef(current) {
    var currentRef = current.ref;
    if (currentRef !== null) {
      currentRef(null);
    }
  }

  // User-originating errors (lifecycles and refs) should not interrupt
  // deletion, so don't let them throw. Host-originating errors should
  // interrupt deletion, so it's okay
  function commitUnmount(current) {
    if (typeof onCommitUnmount === 'function') {
      onCommitUnmount(current);
    }

    switch (current.tag) {
      case ClassComponent:
        {
          safelyDetachRef(current);
          var instance = current.stateNode;
          if (typeof instance.componentWillUnmount === 'function') {
            safelyCallComponentWillUnmount(current, instance);
          }
          return;
        }
      case HostComponent:
        {
          safelyDetachRef(current);
          return;
        }
      case CallComponent:
        {
          commitNestedUnmounts(current.stateNode);
          return;
        }
      case HostPortal:
        {
          // TODO: this is recursive.
          // We are also not using this parent because
          // the portal will get pushed immediately.
          if (enableMutatingReconciler && mutation) {
            unmountHostComponents(current);
          } else if (enablePersistentReconciler && persistence) {
            emptyPortalContainer(current);
          }
          return;
        }
    }
  }

  function commitNestedUnmounts(root) {
    // While we're inside a removed host node we don't want to call
    // removeChild on the inner nodes because they're removed by the top
    // call anyway. We also want to call componentWillUnmount on all
    // composites before this host node is removed from the tree. Therefore
    var node = root;
    while (true) {
      commitUnmount(node);
      // Visit children because they may contain more composite or host nodes.
      // Skip portals because commitUnmount() currently visits them recursively.
      if (node.child !== null && (
      // If we use mutation we drill down into portals using commitUnmount above.
      // If we don't use mutation we drill down into portals here instead.
      !mutation || node.tag !== HostPortal)) {
        node.child['return'] = node;
        node = node.child;
        continue;
      }
      if (node === root) {
        return;
      }
      while (node.sibling === null) {
        if (node['return'] === null || node['return'] === root) {
          return;
        }
        node = node['return'];
      }
      node.sibling['return'] = node['return'];
      node = node.sibling;
    }
  }

  function detachFiber(current) {
    // Cut off the return pointers to disconnect it from the tree. Ideally, we
    // should clear the child pointer of the parent alternate to let this
    // get GC:ed but we don't know which for sure which parent is the current
    // one so we'll settle for GC:ing the subtree of this child. This child
    // itself will be GC:ed when the parent updates the next time.
    current['return'] = null;
    current.child = null;
    if (current.alternate) {
      current.alternate.child = null;
      current.alternate['return'] = null;
    }
  }

  if (!mutation) {
    var commitContainer = void 0;
    if (persistence) {
      var replaceContainerChildren = persistence.replaceContainerChildren,
          createContainerChildSet = persistence.createContainerChildSet;

      var emptyPortalContainer = function (current) {
        var portal = current.stateNode;
        var containerInfo = portal.containerInfo;

        var emptyChildSet = createContainerChildSet(containerInfo);
        replaceContainerChildren(containerInfo, emptyChildSet);
      };
      commitContainer = function (finishedWork) {
        switch (finishedWork.tag) {
          case ClassComponent:
            {
              return;
            }
          case HostComponent:
            {
              return;
            }
          case HostText:
            {
              return;
            }
          case HostRoot:
          case HostPortal:
            {
              var portalOrRoot = finishedWork.stateNode;
              var containerInfo = portalOrRoot.containerInfo,
                  _pendingChildren = portalOrRoot.pendingChildren;

              replaceContainerChildren(containerInfo, _pendingChildren);
              return;
            }
          default:
            {
              invariant_1$1(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
            }
        }
      };
    } else {
      commitContainer = function (finishedWork) {
        // Noop
      };
    }
    if (enablePersistentReconciler || enableNoopReconciler) {
      return {
        commitResetTextContent: function (finishedWork) {},
        commitPlacement: function (finishedWork) {},
        commitDeletion: function (current) {
          // Detach refs and call componentWillUnmount() on the whole subtree.
          commitNestedUnmounts(current);
          detachFiber(current);
        },
        commitWork: function (current, finishedWork) {
          commitContainer(finishedWork);
        },

        commitLifeCycles: commitLifeCycles,
        commitAttachRef: commitAttachRef,
        commitDetachRef: commitDetachRef
      };
    } else if (persistence) {
      invariant_1$1(false, 'Persistent reconciler is disabled.');
    } else {
      invariant_1$1(false, 'Noop reconciler is disabled.');
    }
  }
  var commitMount = mutation.commitMount,
      commitUpdate = mutation.commitUpdate,
      resetTextContent = mutation.resetTextContent,
      commitTextUpdate = mutation.commitTextUpdate,
      appendChild = mutation.appendChild,
      appendChildToContainer = mutation.appendChildToContainer,
      insertBefore = mutation.insertBefore,
      insertInContainerBefore = mutation.insertInContainerBefore,
      removeChild = mutation.removeChild,
      removeChildFromContainer = mutation.removeChildFromContainer;


  function getHostParentFiber(fiber) {
    var parent = fiber['return'];
    while (parent !== null) {
      if (isHostParent(parent)) {
        return parent;
      }
      parent = parent['return'];
    }
    invariant_1$1(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
  }

  function isHostParent(fiber) {
    return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
  }

  function getHostSibling(fiber) {
    // We're going to search forward into the tree until we find a sibling host
    // node. Unfortunately, if multiple insertions are done in a row we have to
    // search past them. This leads to exponential search for the next sibling.
    var node = fiber;
    siblings: while (true) {
      // If we didn't find anything, let's try the next sibling.
      while (node.sibling === null) {
        if (node['return'] === null || isHostParent(node['return'])) {
          // If we pop out of the root or hit the parent the fiber we are the
          // last sibling.
          return null;
        }
        node = node['return'];
      }
      node.sibling['return'] = node['return'];
      node = node.sibling;
      while (node.tag !== HostComponent && node.tag !== HostText) {
        // If it is not host node and, we might have a host node inside it.
        // Try to search down until we find one.
        if (node.effectTag & Placement) {
          // If we don't have a child, try the siblings instead.
          continue siblings;
        }
        // If we don't have a child, try the siblings instead.
        // We also skip portals because they are not part of this host tree.
        if (node.child === null || node.tag === HostPortal) {
          continue siblings;
        } else {
          node.child['return'] = node;
          node = node.child;
        }
      }
      // Check if this host node is stable or about to be placed.
      if (!(node.effectTag & Placement)) {
        // Found it!
        return node.stateNode;
      }
    }
  }

  function commitPlacement(finishedWork) {
    // Recursively insert all host nodes into the parent.
    var parentFiber = getHostParentFiber(finishedWork);
    var parent = void 0;
    var isContainer = void 0;
    switch (parentFiber.tag) {
      case HostComponent:
        parent = parentFiber.stateNode;
        isContainer = false;
        break;
      case HostRoot:
        parent = parentFiber.stateNode.containerInfo;
        isContainer = true;
        break;
      case HostPortal:
        parent = parentFiber.stateNode.containerInfo;
        isContainer = true;
        break;
      default:
        invariant_1$1(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
    }
    if (parentFiber.effectTag & ContentReset) {
      // Reset the text content of the parent before doing any insertions
      resetTextContent(parent);
      // Clear ContentReset from the effect tag
      parentFiber.effectTag &= ~ContentReset;
    }

    var before = getHostSibling(finishedWork);
    // We only have the top Fiber that was inserted but we need recurse down its
    // children to find all the terminal nodes.
    var node = finishedWork;
    while (true) {
      if (node.tag === HostComponent || node.tag === HostText) {
        if (before) {
          if (isContainer) {
            insertInContainerBefore(parent, node.stateNode, before);
          } else {
            insertBefore(parent, node.stateNode, before);
          }
        } else {
          if (isContainer) {
            appendChildToContainer(parent, node.stateNode);
          } else {
            appendChild(parent, node.stateNode);
          }
        }
      } else if (node.tag === HostPortal) {
        // If the insertion itself is a portal, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.child !== null) {
        node.child['return'] = node;
        node = node.child;
        continue;
      }
      if (node === finishedWork) {
        return;
      }
      while (node.sibling === null) {
        if (node['return'] === null || node['return'] === finishedWork) {
          return;
        }
        node = node['return'];
      }
      node.sibling['return'] = node['return'];
      node = node.sibling;
    }
  }

  function unmountHostComponents(current) {
    // We only have the top Fiber that was inserted but we need recurse down its
    var node = current;

    // Each iteration, currentParent is populated with node's host parent if not
    // currentParentIsValid.
    var currentParentIsValid = false;
    var currentParent = void 0;
    var currentParentIsContainer = void 0;

    while (true) {
      if (!currentParentIsValid) {
        var parent = node['return'];
        findParent: while (true) {
          !(parent !== null) ? invariant_1$1(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          switch (parent.tag) {
            case HostComponent:
              currentParent = parent.stateNode;
              currentParentIsContainer = false;
              break findParent;
            case HostRoot:
              currentParent = parent.stateNode.containerInfo;
              currentParentIsContainer = true;
              break findParent;
            case HostPortal:
              currentParent = parent.stateNode.containerInfo;
              currentParentIsContainer = true;
              break findParent;
          }
          parent = parent['return'];
        }
        currentParentIsValid = true;
      }

      if (node.tag === HostComponent || node.tag === HostText) {
        commitNestedUnmounts(node);
        // After all the children have unmounted, it is now safe to remove the
        // node from the tree.
        if (currentParentIsContainer) {
          removeChildFromContainer(currentParent, node.stateNode);
        } else {
          removeChild(currentParent, node.stateNode);
        }
        // Don't visit children because we already visited them.
      } else if (node.tag === HostPortal) {
        // When we go into a portal, it becomes the parent to remove from.
        // We will reassign it back when we pop the portal on the way up.
        currentParent = node.stateNode.containerInfo;
        // Visit children because portals might contain host components.
        if (node.child !== null) {
          node.child['return'] = node;
          node = node.child;
          continue;
        }
      } else {
        commitUnmount(node);
        // Visit children because we may find more host components below.
        if (node.child !== null) {
          node.child['return'] = node;
          node = node.child;
          continue;
        }
      }
      if (node === current) {
        return;
      }
      while (node.sibling === null) {
        if (node['return'] === null || node['return'] === current) {
          return;
        }
        node = node['return'];
        if (node.tag === HostPortal) {
          // When we go out of the portal, we need to restore the parent.
          // Since we don't keep a stack of them, we will search for it.
          currentParentIsValid = false;
        }
      }
      node.sibling['return'] = node['return'];
      node = node.sibling;
    }
  }

  function commitDeletion(current) {
    // Recursively delete all host nodes from the parent.
    // Detach refs and call componentWillUnmount() on the whole subtree.
    unmountHostComponents(current);
    detachFiber(current);
  }

  function commitWork(current, finishedWork) {
    switch (finishedWork.tag) {
      case ClassComponent:
        {
          return;
        }
      case HostComponent:
        {
          var instance = finishedWork.stateNode;
          if (instance != null) {
            // Commit the work prepared earlier.
            var newProps = finishedWork.memoizedProps;
            // For hydration we reuse the update path but we treat the oldProps
            // as the newProps. The updatePayload will contain the real change in
            // this case.
            var oldProps = current !== null ? current.memoizedProps : newProps;
            var type = finishedWork.type;
            // TODO: Type the updateQueue to be specific to host components.
            var updatePayload = finishedWork.updateQueue;
            finishedWork.updateQueue = null;
            if (updatePayload !== null) {
              commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
            }
          }
          return;
        }
      case HostText:
        {
          !(finishedWork.stateNode !== null) ? invariant_1$1(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          var textInstance = finishedWork.stateNode;
          var newText = finishedWork.memoizedProps;
          // For hydration we reuse the update path but we treat the oldProps
          // as the newProps. The updatePayload will contain the real change in
          // this case.
          var oldText = current !== null ? current.memoizedProps : newText;
          commitTextUpdate(textInstance, oldText, newText);
          return;
        }
      case HostRoot:
        {
          return;
        }
      default:
        {
          invariant_1$1(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
        }
    }
  }

  function commitResetTextContent(current) {
    resetTextContent(current.stateNode);
  }

  if (enableMutatingReconciler) {
    return {
      commitResetTextContent: commitResetTextContent,
      commitPlacement: commitPlacement,
      commitDeletion: commitDeletion,
      commitWork: commitWork,
      commitLifeCycles: commitLifeCycles,
      commitAttachRef: commitAttachRef,
      commitDetachRef: commitDetachRef
    };
  } else {
    invariant_1$1(false, 'Mutating reconciler is disabled.');
  }
};

var NO_CONTEXT = {};

var ReactFiberHostContext = function (config) {
  var getChildHostContext = config.getChildHostContext,
      getRootHostContext = config.getRootHostContext;


  var contextStackCursor = createCursor(NO_CONTEXT);
  var contextFiberStackCursor = createCursor(NO_CONTEXT);
  var rootInstanceStackCursor = createCursor(NO_CONTEXT);

  function requiredContext(c) {
    !(c !== NO_CONTEXT) ? invariant_1$1(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    return c;
  }

  function getRootHostContainer() {
    var rootInstance = requiredContext(rootInstanceStackCursor.current);
    return rootInstance;
  }

  function pushHostContainer(fiber, nextRootInstance) {
    // Push current root instance onto the stack;
    // This allows us to reset root when portals are popped.
    push(rootInstanceStackCursor, nextRootInstance, fiber);

    var nextRootContext = getRootHostContext(nextRootInstance);

    // Track the context and the Fiber that provided it.
    // This enables us to pop only Fibers that provide unique contexts.
    push(contextFiberStackCursor, fiber, fiber);
    push(contextStackCursor, nextRootContext, fiber);
  }

  function popHostContainer(fiber) {
    pop(contextStackCursor, fiber);
    pop(contextFiberStackCursor, fiber);
    pop(rootInstanceStackCursor, fiber);
  }

  function getHostContext() {
    var context = requiredContext(contextStackCursor.current);
    return context;
  }

  function pushHostContext(fiber) {
    var rootInstance = requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor.current);
    var nextContext = getChildHostContext(context, fiber.type, rootInstance);

    // Don't push this Fiber's context unless it's unique.
    if (context === nextContext) {
      return;
    }

    // Track the context and the Fiber that provided it.
    // This enables us to pop only Fibers that provide unique contexts.
    push(contextFiberStackCursor, fiber, fiber);
    push(contextStackCursor, nextContext, fiber);
  }

  function popHostContext(fiber) {
    // Do not pop unless this Fiber provided the current context.
    // pushHostContext() only pushes Fibers that provide unique contexts.
    if (contextFiberStackCursor.current !== fiber) {
      return;
    }

    pop(contextStackCursor, fiber);
    pop(contextFiberStackCursor, fiber);
  }

  function resetHostContainer() {
    contextStackCursor.current = NO_CONTEXT;
    rootInstanceStackCursor.current = NO_CONTEXT;
  }

  return {
    getHostContext: getHostContext,
    getRootHostContainer: getRootHostContainer,
    popHostContainer: popHostContainer,
    popHostContext: popHostContext,
    pushHostContainer: pushHostContainer,
    pushHostContext: pushHostContext,
    resetHostContainer: resetHostContainer
  };
};

var ReactFiberHydrationContext = function (config) {
  var shouldSetTextContent = config.shouldSetTextContent,
      hydration = config.hydration;

  // If this doesn't have hydration mode.

  if (!hydration) {
    return {
      enterHydrationState: function () {
        return false;
      },
      resetHydrationState: function () {},
      tryToClaimNextHydratableInstance: function () {},
      prepareToHydrateHostInstance: function () {
        invariant_1$1(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
      },
      prepareToHydrateHostTextInstance: function () {
        invariant_1$1(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
      },
      popHydrationState: function (fiber) {
        return false;
      }
    };
  }

  var canHydrateInstance = hydration.canHydrateInstance,
      canHydrateTextInstance = hydration.canHydrateTextInstance,
      getNextHydratableSibling = hydration.getNextHydratableSibling,
      getFirstHydratableChild = hydration.getFirstHydratableChild,
      hydrateInstance = hydration.hydrateInstance,
      hydrateTextInstance = hydration.hydrateTextInstance,
      didNotMatchHydratedContainerTextInstance = hydration.didNotMatchHydratedContainerTextInstance,
      didNotMatchHydratedTextInstance = hydration.didNotMatchHydratedTextInstance,
      didNotHydrateContainerInstance = hydration.didNotHydrateContainerInstance,
      didNotHydrateInstance = hydration.didNotHydrateInstance,
      didNotFindHydratableContainerInstance = hydration.didNotFindHydratableContainerInstance,
      didNotFindHydratableContainerTextInstance = hydration.didNotFindHydratableContainerTextInstance,
      didNotFindHydratableInstance = hydration.didNotFindHydratableInstance,
      didNotFindHydratableTextInstance = hydration.didNotFindHydratableTextInstance;

  // The deepest Fiber on the stack involved in a hydration context.
  // This may have been an insertion or a hydration.

  var hydrationParentFiber = null;
  var nextHydratableInstance = null;
  var isHydrating = false;

  function enterHydrationState(fiber) {
    var parentInstance = fiber.stateNode.containerInfo;
    nextHydratableInstance = getFirstHydratableChild(parentInstance);
    hydrationParentFiber = fiber;
    isHydrating = true;
    return true;
  }

  function deleteHydratableInstance(returnFiber, instance) {
    {
      switch (returnFiber.tag) {
        case HostRoot:
          didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
          break;
        case HostComponent:
          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
          break;
      }
    }

    var childToDelete = createFiberFromHostInstanceForDeletion();
    childToDelete.stateNode = instance;
    childToDelete['return'] = returnFiber;
    childToDelete.effectTag = Deletion;

    // This might seem like it belongs on progressedFirstDeletion. However,
    // these children are not part of the reconciliation list of children.
    // Even if we abort and rereconcile the children, that will try to hydrate
    // again and the nodes are still in the host tree so these will be
    // recreated.
    if (returnFiber.lastEffect !== null) {
      returnFiber.lastEffect.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
  }

  function insertNonHydratedInstance(returnFiber, fiber) {
    fiber.effectTag |= Placement;
    {
      switch (returnFiber.tag) {
        case HostRoot:
          {
            var parentContainer = returnFiber.stateNode.containerInfo;
            switch (fiber.tag) {
              case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                didNotFindHydratableContainerInstance(parentContainer, type, props);
                break;
              case HostText:
                var text = fiber.pendingProps;
                didNotFindHydratableContainerTextInstance(parentContainer, text);
                break;
            }
            break;
          }
        case HostComponent:
          {
            var parentType = returnFiber.type;
            var parentProps = returnFiber.memoizedProps;
            var parentInstance = returnFiber.stateNode;
            switch (fiber.tag) {
              case HostComponent:
                var _type = fiber.type;
                var _props = fiber.pendingProps;
                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                break;
              case HostText:
                var _text = fiber.pendingProps;
                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                break;
            }
            break;
          }
        default:
          return;
      }
    }
  }

  function tryHydrate(fiber, nextInstance) {
    switch (fiber.tag) {
      case HostComponent:
        {
          var type = fiber.type;
          var props = fiber.pendingProps;
          var instance = canHydrateInstance(nextInstance, type, props);
          if (instance !== null) {
            fiber.stateNode = instance;
            return true;
          }
          return false;
        }
      case HostText:
        {
          var text = fiber.pendingProps;
          var textInstance = canHydrateTextInstance(nextInstance, text);
          if (textInstance !== null) {
            fiber.stateNode = textInstance;
            return true;
          }
          return false;
        }
      default:
        return false;
    }
  }

  function tryToClaimNextHydratableInstance(fiber) {
    if (!isHydrating) {
      return;
    }
    var nextInstance = nextHydratableInstance;
    if (!nextInstance) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    }
    if (!tryHydrate(fiber, nextInstance)) {
      // If we can't hydrate this instance let's try the next one.
      // We use this as a heuristic. It's based on intuition and not data so it
      // might be flawed or unnecessary.
      nextInstance = getNextHydratableSibling(nextInstance);
      if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
        // Nothing to hydrate. Make it an insertion.
        insertNonHydratedInstance(hydrationParentFiber, fiber);
        isHydrating = false;
        hydrationParentFiber = fiber;
        return;
      }
      // We matched the next one, we'll now assume that the first one was
      // superfluous and we'll delete it. Since we can't eagerly delete it
      // we'll have to schedule a deletion. To do that, this node needs a dummy
      // fiber associated with it.
      deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
    }
    hydrationParentFiber = fiber;
    nextHydratableInstance = getFirstHydratableChild(nextInstance);
  }

  function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
    var instance = fiber.stateNode;
    var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
    // TODO: Type this specific to this type of component.
    fiber.updateQueue = updatePayload;
    // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update.
    if (updatePayload !== null) {
      return true;
    }
    return false;
  }

  function prepareToHydrateHostTextInstance(fiber) {
    var textInstance = fiber.stateNode;
    var textContent = fiber.memoizedProps;
    var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
    {
      if (shouldUpdate) {
        // We assume that prepareToHydrateHostTextInstance is called in a context where the
        // hydration parent is the parent host component of this host text.
        var returnFiber = hydrationParentFiber;
        if (returnFiber !== null) {
          switch (returnFiber.tag) {
            case HostRoot:
              {
                var parentContainer = returnFiber.stateNode.containerInfo;
                didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                break;
              }
            case HostComponent:
              {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                break;
              }
          }
        }
      }
    }
    return shouldUpdate;
  }

  function popToNextHostParent(fiber) {
    var parent = fiber['return'];
    while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {
      parent = parent['return'];
    }
    hydrationParentFiber = parent;
  }

  function popHydrationState(fiber) {
    if (fiber !== hydrationParentFiber) {
      // We're deeper than the current hydration context, inside an inserted
      // tree.
      return false;
    }
    if (!isHydrating) {
      // If we're not currently hydrating but we're in a hydration context, then
      // we were an insertion and now need to pop up reenter hydration of our
      // siblings.
      popToNextHostParent(fiber);
      isHydrating = true;
      return false;
    }

    var type = fiber.type;

    // If we have any remaining hydratable nodes, we need to delete them now.
    // We only do this deeper than head and body since they tend to have random
    // other nodes in them. We also ignore components with pure text content in
    // side of them.
    // TODO: Better heuristic.
    if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
      var nextInstance = nextHydratableInstance;
      while (nextInstance) {
        deleteHydratableInstance(fiber, nextInstance);
        nextInstance = getNextHydratableSibling(nextInstance);
      }
    }

    popToNextHostParent(fiber);
    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
    return true;
  }

  function resetHydrationState() {
    hydrationParentFiber = null;
    nextHydratableInstance = null;
    isHydrating = false;
  }

  return {
    enterHydrationState: enterHydrationState,
    resetHydrationState: resetHydrationState,
    tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,
    prepareToHydrateHostInstance: prepareToHydrateHostInstance,
    prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,
    popHydrationState: popHydrationState
  };
};

// This lets us hook into Fiber to debug what it's doing.
// See https://github.com/facebook/react/pull/8033.
// This is not part of the public API, not even for React DevTools.
// You may only inject a debugTool if you work on React Fiber itself.
var ReactFiberInstrumentation = {
  debugTool: null
};

var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;

var defaultShowDialog = function (capturedError) {
  return true;
};

var showDialog = defaultShowDialog;

function logCapturedError(capturedError) {
  var logError = showDialog(capturedError);

  // Allow injected showDialog() to prevent default console.error logging.
  // This enables renderers like ReactNative to better manage redbox behavior.
  if (logError === false) {
    return;
  }

  {
    var componentName = capturedError.componentName,
        componentStack = capturedError.componentStack,
        errorBoundaryName = capturedError.errorBoundaryName,
        errorBoundaryFound = capturedError.errorBoundaryFound,
        willRetry = capturedError.willRetry;


    var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';

    var errorBoundaryMessage = void 0;
    // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
    if (errorBoundaryFound && errorBoundaryName) {
      if (willRetry) {
        errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
      } else {
        errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
      }
    } else {
      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
    }
    var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage);

    // In development, we provide our own message with just the component stack.
    // We don't include the original error message and JS stack because the browser
    // has already printed it. Even if the application swallows the error, it is still
    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
    console.error(combinedMessage);
  }
}

var invokeGuardedCallback$1 = ReactErrorUtils.invokeGuardedCallback;
var hasCaughtError = ReactErrorUtils.hasCaughtError;
var clearCaughtError = ReactErrorUtils.clearCaughtError;


{
  var didWarnAboutStateTransition = false;
  var didWarnSetStateChildContext = false;
  var didWarnStateUpdateForUnmountedComponent = {};

  var warnAboutUpdateOnUnmounted = function (fiber) {
    var componentName = getComponentName(fiber) || 'ReactClass';
    if (didWarnStateUpdateForUnmountedComponent[componentName]) {
      return;
    }
    warning_1$1(false, 'Can only update a mounted or mounting ' + 'component. This usually means you called setState, replaceState, ' + 'or forceUpdate on an unmounted component. This is a no-op.\n\nPlease ' + 'check the code for the %s component.', componentName);
    didWarnStateUpdateForUnmountedComponent[componentName] = true;
  };

  var warnAboutInvalidUpdates = function (instance) {
    switch (ReactDebugCurrentFiber.phase) {
      case 'getChildContext':
        if (didWarnSetStateChildContext) {
          return;
        }
        warning_1$1(false, 'setState(...): Cannot call setState() inside getChildContext()');
        didWarnSetStateChildContext = true;
        break;
      case 'render':
        if (didWarnAboutStateTransition) {
          return;
        }
        warning_1$1(false, 'Cannot update during an existing state transition (such as within ' + "`render` or another component's constructor). Render methods should " + 'be a pure function of props and state; constructor side-effects are ' + 'an anti-pattern, but can be moved to `componentWillMount`.');
        didWarnAboutStateTransition = true;
        break;
    }
  };
}

var ReactFiberScheduler = function (config) {
  var hostContext = ReactFiberHostContext(config);
  var hydrationContext = ReactFiberHydrationContext(config);
  var popHostContainer = hostContext.popHostContainer,
      popHostContext = hostContext.popHostContext,
      resetHostContainer = hostContext.resetHostContainer;

  var _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber),
      beginWork = _ReactFiberBeginWork.beginWork,
      beginFailedWork = _ReactFiberBeginWork.beginFailedWork;

  var _ReactFiberCompleteWo = ReactFiberCompleteWork(config, hostContext, hydrationContext),
      completeWork = _ReactFiberCompleteWo.completeWork;

  var _ReactFiberCommitWork = ReactFiberCommitWork(config, captureError),
      commitResetTextContent = _ReactFiberCommitWork.commitResetTextContent,
      commitPlacement = _ReactFiberCommitWork.commitPlacement,
      commitDeletion = _ReactFiberCommitWork.commitDeletion,
      commitWork = _ReactFiberCommitWork.commitWork,
      commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles,
      commitAttachRef = _ReactFiberCommitWork.commitAttachRef,
      commitDetachRef = _ReactFiberCommitWork.commitDetachRef;

  var now = config.now,
      scheduleDeferredCallback = config.scheduleDeferredCallback,
      useSyncScheduling = config.useSyncScheduling,
      prepareForCommit = config.prepareForCommit,
      resetAfterCommit = config.resetAfterCommit;

  // Represents the current time in ms.

  var startTime = now();
  var mostRecentCurrentTime = msToExpirationTime(0);

  // Represents the expiration time that incoming updates should use. (If this
  // is NoWork, use the default strategy: async updates in async mode, sync
  // updates in sync mode.)
  var expirationContext = NoWork;

  var isWorking = false;

  // The next work in progress fiber that we're currently working on.
  var nextUnitOfWork = null;
  var nextRoot = null;
  // The time at which we're currently rendering work.
  var nextRenderExpirationTime = NoWork;

  // The next fiber with an effect that we're currently committing.
  var nextEffect = null;

  // Keep track of which fibers have captured an error that need to be handled.
  // Work is removed from this collection after componentDidCatch is called.
  var capturedErrors = null;
  // Keep track of which fibers have failed during the current batch of work.
  // This is a different set than capturedErrors, because it is not reset until
  // the end of the batch. This is needed to propagate errors correctly if a
  // subtree fails more than once.
  var failedBoundaries = null;
  // Error boundaries that captured an error during the current commit.
  var commitPhaseBoundaries = null;
  var firstUncaughtError = null;
  var didFatal = false;

  var isCommitting = false;
  var isUnmounting = false;

  // Used for performance tracking.
  var interruptedBy = null;

  function resetContextStack() {
    // Reset the stack
    reset$1();
    // Reset the cursors
    resetContext();
    resetHostContainer();
  }

  function commitAllHostEffects() {
    while (nextEffect !== null) {
      {
        ReactDebugCurrentFiber.setCurrentFiber(nextEffect);
      }
      recordEffect();

      var effectTag = nextEffect.effectTag;
      if (effectTag & ContentReset) {
        commitResetTextContent(nextEffect);
      }

      if (effectTag & Ref) {
        var current = nextEffect.alternate;
        if (current !== null) {
          commitDetachRef(current);
        }
      }

      // The following switch statement is only concerned about placement,
      // updates, and deletions. To avoid needing to add a case for every
      // possible bitmap value, we remove the secondary effects from the
      // effect tag and switch on that value.
      var primaryEffectTag = effectTag & ~(Callback | Err | ContentReset | Ref | PerformedWork);
      switch (primaryEffectTag) {
        case Placement:
          {
            commitPlacement(nextEffect);
            // Clear the "placement" from effect tag so that we know that this is inserted, before
            // any life-cycles like componentDidMount gets called.
            // TODO: findDOMNode doesn't rely on this any more but isMounted
            // does and isMounted is deprecated anyway so we should be able
            // to kill this.
            nextEffect.effectTag &= ~Placement;
            break;
          }
        case PlacementAndUpdate:
          {
            // Placement
            commitPlacement(nextEffect);
            // Clear the "placement" from effect tag so that we know that this is inserted, before
            // any life-cycles like componentDidMount gets called.
            nextEffect.effectTag &= ~Placement;

            // Update
            var _current = nextEffect.alternate;
            commitWork(_current, nextEffect);
            break;
          }
        case Update:
          {
            var _current2 = nextEffect.alternate;
            commitWork(_current2, nextEffect);
            break;
          }
        case Deletion:
          {
            isUnmounting = true;
            commitDeletion(nextEffect);
            isUnmounting = false;
            break;
          }
      }
      nextEffect = nextEffect.nextEffect;
    }

    {
      ReactDebugCurrentFiber.resetCurrentFiber();
    }
  }

  function commitAllLifeCycles() {
    while (nextEffect !== null) {
      var effectTag = nextEffect.effectTag;

      if (effectTag & (Update | Callback)) {
        recordEffect();
        var current = nextEffect.alternate;
        commitLifeCycles(current, nextEffect);
      }

      if (effectTag & Ref) {
        recordEffect();
        commitAttachRef(nextEffect);
      }

      if (effectTag & Err) {
        recordEffect();
        commitErrorHandling(nextEffect);
      }

      var next = nextEffect.nextEffect;
      // Ensure that we clean these up so that we don't accidentally keep them.
      // I'm not actually sure this matters because we can't reset firstEffect
      // and lastEffect since they're on every node, not just the effectful
      // ones. So we have to clean everything as we reuse nodes anyway.
      nextEffect.nextEffect = null;
      // Ensure that we reset the effectTag here so that we can rely on effect
      // tags to reason about the current life-cycle.
      nextEffect = next;
    }
  }

  function commitRoot(finishedWork) {
    // We keep track of this so that captureError can collect any boundaries
    // that capture an error during the commit phase. The reason these aren't
    // local to this function is because errors that occur during cWU are
    // captured elsewhere, to prevent the unmount from being interrupted.
    isWorking = true;
    isCommitting = true;
    startCommitTimer();

    var root = finishedWork.stateNode;
    !(root.current !== finishedWork) ? invariant_1$1(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    root.isReadyForCommit = false;

    // Reset this to null before calling lifecycles
    ReactCurrentOwner.current = null;

    var firstEffect = void 0;
    if (finishedWork.effectTag > PerformedWork) {
      // A fiber's effect list consists only of its children, not itself. So if
      // the root has an effect, we need to add it to the end of the list. The
      // resulting list is the set that would belong to the root's parent, if
      // it had one; that is, all the effects in the tree including the root.
      if (finishedWork.lastEffect !== null) {
        finishedWork.lastEffect.nextEffect = finishedWork;
        firstEffect = finishedWork.firstEffect;
      } else {
        firstEffect = finishedWork;
      }
    } else {
      // There is no effect on the root.
      firstEffect = finishedWork.firstEffect;
    }

    prepareForCommit();

    // Commit all the side-effects within a tree. We'll do this in two passes.
    // The first pass performs all the host insertions, updates, deletions and
    // ref unmounts.
    nextEffect = firstEffect;
    startCommitHostEffectsTimer();
    while (nextEffect !== null) {
      var didError = false;
      var _error = void 0;
      {
        invokeGuardedCallback$1(null, commitAllHostEffects, null);
        if (hasCaughtError()) {
          didError = true;
          _error = clearCaughtError();
        }
      }
      if (didError) {
        !(nextEffect !== null) ? invariant_1$1(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        captureError(nextEffect, _error);
        // Clean-up
        if (nextEffect !== null) {
          nextEffect = nextEffect.nextEffect;
        }
      }
    }
    stopCommitHostEffectsTimer();

    resetAfterCommit();

    // The work-in-progress tree is now the current tree. This must come after
    // the first pass of the commit phase, so that the previous tree is still
    // current during componentWillUnmount, but before the second pass, so that
    // the finished work is current during componentDidMount/Update.
    root.current = finishedWork;

    // In the second pass we'll perform all life-cycles and ref callbacks.
    // Life-cycles happen as a separate pass so that all placements, updates,
    // and deletions in the entire tree have already been invoked.
    // This pass also triggers any renderer-specific initial effects.
    nextEffect = firstEffect;
    startCommitLifeCyclesTimer();
    while (nextEffect !== null) {
      var _didError = false;
      var _error2 = void 0;
      {
        invokeGuardedCallback$1(null, commitAllLifeCycles, null);
        if (hasCaughtError()) {
          _didError = true;
          _error2 = clearCaughtError();
        }
      }
      if (_didError) {
        !(nextEffect !== null) ? invariant_1$1(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        captureError(nextEffect, _error2);
        if (nextEffect !== null) {
          nextEffect = nextEffect.nextEffect;
        }
      }
    }

    isCommitting = false;
    isWorking = false;
    stopCommitLifeCyclesTimer();
    stopCommitTimer();
    if (typeof onCommitRoot === 'function') {
      onCommitRoot(finishedWork.stateNode);
    }
    if (true && ReactFiberInstrumentation_1.debugTool) {
      ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
    }

    // If we caught any errors during this commit, schedule their boundaries
    // to update.
    if (commitPhaseBoundaries) {
      commitPhaseBoundaries.forEach(scheduleErrorRecovery);
      commitPhaseBoundaries = null;
    }

    if (firstUncaughtError !== null) {
      var _error3 = firstUncaughtError;
      firstUncaughtError = null;
      onUncaughtError(_error3);
    }

    var remainingTime = root.current.expirationTime;

    if (remainingTime === NoWork) {
      capturedErrors = null;
      failedBoundaries = null;
    }

    return remainingTime;
  }

  function resetExpirationTime(workInProgress, renderTime) {
    if (renderTime !== Never && workInProgress.expirationTime === Never) {
      // The children of this component are hidden. Don't bubble their
      // expiration times.
      return;
    }

    // Check for pending updates.
    var newExpirationTime = getUpdateExpirationTime(workInProgress);

    // TODO: Calls need to visit stateNode

    // Bubble up the earliest expiration time.
    var child = workInProgress.child;
    while (child !== null) {
      if (child.expirationTime !== NoWork && (newExpirationTime === NoWork || newExpirationTime > child.expirationTime)) {
        newExpirationTime = child.expirationTime;
      }
      child = child.sibling;
    }
    workInProgress.expirationTime = newExpirationTime;
  }

  function completeUnitOfWork(workInProgress) {
    while (true) {
      // The current, flushed, state of this fiber is the alternate.
      // Ideally nothing should rely on this, but relying on it here
      // means that we don't need an additional field on the work in
      // progress.
      var current = workInProgress.alternate;
      {
        ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
      }
      var next = completeWork(current, workInProgress, nextRenderExpirationTime);
      {
        ReactDebugCurrentFiber.resetCurrentFiber();
      }

      var returnFiber = workInProgress['return'];
      var siblingFiber = workInProgress.sibling;

      resetExpirationTime(workInProgress, nextRenderExpirationTime);

      if (next !== null) {
        stopWorkTimer(workInProgress);
        if (true && ReactFiberInstrumentation_1.debugTool) {
          ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
        }
        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        return next;
      }

      if (returnFiber !== null) {
        // Append all the effects of the subtree and this fiber onto the effect
        // list of the parent. The completion order of the children affects the
        // side-effect order.
        if (returnFiber.firstEffect === null) {
          returnFiber.firstEffect = workInProgress.firstEffect;
        }
        if (workInProgress.lastEffect !== null) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
          }
          returnFiber.lastEffect = workInProgress.lastEffect;
        }

        // If this fiber had side-effects, we append it AFTER the children's
        // side-effects. We can perform certain side-effects earlier if
        // needed, by doing multiple passes over the effect list. We don't want
        // to schedule our own side-effect on our own list because if end up
        // reusing children we'll schedule this effect onto itself since we're
        // at the end.
        var effectTag = workInProgress.effectTag;
        // Skip both NoWork and PerformedWork tags when creating the effect list.
        // PerformedWork effect is read by React DevTools but shouldn't be committed.
        if (effectTag > PerformedWork) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress;
          } else {
            returnFiber.firstEffect = workInProgress;
          }
          returnFiber.lastEffect = workInProgress;
        }
      }

      stopWorkTimer(workInProgress);
      if (true && ReactFiberInstrumentation_1.debugTool) {
        ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
      }

      if (siblingFiber !== null) {
        // If there is more work to do in this returnFiber, do that next.
        return siblingFiber;
      } else if (returnFiber !== null) {
        // If there's no more work in this returnFiber. Complete the returnFiber.
        workInProgress = returnFiber;
        continue;
      } else {
        // We've reached the root.
        var root = workInProgress.stateNode;
        root.isReadyForCommit = true;
        return null;
      }
    }

    // Without this explicit null return Flow complains of invalid return type
    // TODO Remove the above while(true) loop
    // eslint-disable-next-line no-unreachable
    return null;
  }

  function performUnitOfWork(workInProgress) {
    // The current, flushed, state of this fiber is the alternate.
    // Ideally nothing should rely on this, but relying on it here
    // means that we don't need an additional field on the work in
    // progress.
    var current = workInProgress.alternate;

    // See if beginning this work spawns more work.
    startWorkTimer(workInProgress);
    {
      ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
    }
    var next = beginWork(current, workInProgress, nextRenderExpirationTime);
    {
      ReactDebugCurrentFiber.resetCurrentFiber();
    }
    if (true && ReactFiberInstrumentation_1.debugTool) {
      ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
    }

    if (next === null) {
      // If this doesn't spawn new work, complete the current work.
      next = completeUnitOfWork(workInProgress);
    }

    ReactCurrentOwner.current = null;

    return next;
  }

  function performFailedUnitOfWork(workInProgress) {
    // The current, flushed, state of this fiber is the alternate.
    // Ideally nothing should rely on this, but relying on it here
    // means that we don't need an additional field on the work in
    // progress.
    var current = workInProgress.alternate;

    // See if beginning this work spawns more work.
    startWorkTimer(workInProgress);
    {
      ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
    }
    var next = beginFailedWork(current, workInProgress, nextRenderExpirationTime);
    {
      ReactDebugCurrentFiber.resetCurrentFiber();
    }
    if (true && ReactFiberInstrumentation_1.debugTool) {
      ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
    }

    if (next === null) {
      // If this doesn't spawn new work, complete the current work.
      next = completeUnitOfWork(workInProgress);
    }

    ReactCurrentOwner.current = null;

    return next;
  }

  function workLoop(expirationTime) {
    if (capturedErrors !== null) {
      // If there are unhandled errors, switch to the slow work loop.
      // TODO: How to avoid this check in the fast path? Maybe the renderer
      // could keep track of which roots have unhandled errors and call a
      // forked version of renderRoot.
      slowWorkLoopThatChecksForFailedWork(expirationTime);
      return;
    }
    if (nextRenderExpirationTime === NoWork || nextRenderExpirationTime > expirationTime) {
      return;
    }

    if (nextRenderExpirationTime <= mostRecentCurrentTime) {
      // Flush all expired work.
      while (nextUnitOfWork !== null) {
        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
      }
    } else {
      // Flush asynchronous work until the deadline runs out of time.
      while (nextUnitOfWork !== null && !shouldYield()) {
        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
      }
    }
  }

  function slowWorkLoopThatChecksForFailedWork(expirationTime) {
    if (nextRenderExpirationTime === NoWork || nextRenderExpirationTime > expirationTime) {
      return;
    }

    if (nextRenderExpirationTime <= mostRecentCurrentTime) {
      // Flush all expired work.
      while (nextUnitOfWork !== null) {
        if (hasCapturedError(nextUnitOfWork)) {
          // Use a forked version of performUnitOfWork
          nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);
        } else {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        }
      }
    } else {
      // Flush asynchronous work until the deadline runs out of time.
      while (nextUnitOfWork !== null && !shouldYield()) {
        if (hasCapturedError(nextUnitOfWork)) {
          // Use a forked version of performUnitOfWork
          nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);
        } else {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        }
      }
    }
  }

  function renderRootCatchBlock(root, failedWork, boundary, expirationTime) {
    // We're going to restart the error boundary that captured the error.
    // Conceptually, we're unwinding the stack. We need to unwind the
    // context stack, too.
    unwindContexts(failedWork, boundary);

    // Restart the error boundary using a forked version of
    // performUnitOfWork that deletes the boundary's children. The entire
    // failed subree will be unmounted. During the commit phase, a special
    // lifecycle method is called on the error boundary, which triggers
    // a re-render.
    nextUnitOfWork = performFailedUnitOfWork(boundary);

    // Continue working.
    workLoop(expirationTime);
  }

  function renderRoot(root, expirationTime) {
    !!isWorking ? invariant_1$1(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    isWorking = true;

    // We're about to mutate the work-in-progress tree. If the root was pending
    // commit, it no longer is: we'll need to complete it again.
    root.isReadyForCommit = false;

    // Check if we're starting from a fresh stack, or if we're resuming from
    // previously yielded work.
    if (root !== nextRoot || expirationTime !== nextRenderExpirationTime || nextUnitOfWork === null) {
      // Reset the stack and start working from the root.
      resetContextStack();
      nextRoot = root;
      nextRenderExpirationTime = expirationTime;
      nextUnitOfWork = createWorkInProgress(nextRoot.current, null, expirationTime);
    }

    startWorkLoopTimer(nextUnitOfWork);

    var didError = false;
    var error = null;
    {
      invokeGuardedCallback$1(null, workLoop, null, expirationTime);
      if (hasCaughtError()) {
        didError = true;
        error = clearCaughtError();
      }
    }

    // An error was thrown during the render phase.
    while (didError) {
      if (didFatal) {
        // This was a fatal error. Don't attempt to recover from it.
        firstUncaughtError = error;
        break;
      }

      var failedWork = nextUnitOfWork;
      if (failedWork === null) {
        // An error was thrown but there's no current unit of work. This can
        // happen during the commit phase if there's a bug in the renderer.
        didFatal = true;
        continue;
      }

      // "Capture" the error by finding the nearest boundary. If there is no
      // error boundary, we use the root.
      var boundary = captureError(failedWork, error);
      !(boundary !== null) ? invariant_1$1(false, 'Should have found an error boundary. This error is likely caused by a bug in React. Please file an issue.') : void 0;

      if (didFatal) {
        // The error we just captured was a fatal error. This happens
        // when the error propagates to the root more than once.
        continue;
      }

      didError = false;
      error = null;
      {
        invokeGuardedCallback$1(null, renderRootCatchBlock, null, root, failedWork, boundary, expirationTime);
        if (hasCaughtError()) {
          didError = true;
          error = clearCaughtError();
          continue;
        }
      }
      // We're finished working. Exit the error loop.
      break;
    }

    var uncaughtError = firstUncaughtError;

    // We're done performing work. Time to clean up.
    stopWorkLoopTimer(interruptedBy);
    interruptedBy = null;
    isWorking = false;
    didFatal = false;
    firstUncaughtError = null;

    if (uncaughtError !== null) {
      onUncaughtError(uncaughtError);
    }

    return root.isReadyForCommit ? root.current.alternate : null;
  }

  // Returns the boundary that captured the error, or null if the error is ignored
  function captureError(failedWork, error) {
    // It is no longer valid because we exited the user code.
    ReactCurrentOwner.current = null;
    {
      ReactDebugCurrentFiber.resetCurrentFiber();
    }

    // Search for the nearest error boundary.
    var boundary = null;

    // Passed to logCapturedError()
    var errorBoundaryFound = false;
    var willRetry = false;
    var errorBoundaryName = null;

    // Host containers are a special case. If the failed work itself is a host
    // container, then it acts as its own boundary. In all other cases, we
    // ignore the work itself and only search through the parents.
    if (failedWork.tag === HostRoot) {
      boundary = failedWork;

      if (isFailedBoundary(failedWork)) {
        // If this root already failed, there must have been an error when
        // attempting to unmount it. This is a worst-case scenario and
        // should only be possible if there's a bug in the renderer.
        didFatal = true;
      }
    } else {
      var node = failedWork['return'];
      while (node !== null && boundary === null) {
        if (node.tag === ClassComponent) {
          var instance = node.stateNode;
          if (typeof instance.componentDidCatch === 'function') {
            errorBoundaryFound = true;
            errorBoundaryName = getComponentName(node);

            // Found an error boundary!
            boundary = node;
            willRetry = true;
          }
        } else if (node.tag === HostRoot) {
          // Treat the root like a no-op error boundary
          boundary = node;
        }

        if (isFailedBoundary(node)) {
          // This boundary is already in a failed state.

          // If we're currently unmounting, that means this error was
          // thrown while unmounting a failed subtree. We should ignore
          // the error.
          if (isUnmounting) {
            return null;
          }

          // If we're in the commit phase, we should check to see if
          // this boundary already captured an error during this commit.
          // This case exists because multiple errors can be thrown during
          // a single commit without interruption.
          if (commitPhaseBoundaries !== null && (commitPhaseBoundaries.has(node) || node.alternate !== null && commitPhaseBoundaries.has(node.alternate))) {
            // If so, we should ignore this error.
            return null;
          }

          // The error should propagate to the next boundary -â we keep looking.
          boundary = null;
          willRetry = false;
        }

        node = node['return'];
      }
    }

    if (boundary !== null) {
      // Add to the collection of failed boundaries. This lets us know that
      // subsequent errors in this subtree should propagate to the next boundary.
      if (failedBoundaries === null) {
        failedBoundaries = new Set();
      }
      failedBoundaries.add(boundary);

      // This method is unsafe outside of the begin and complete phases.
      // We might be in the commit phase when an error is captured.
      // The risk is that the return path from this Fiber may not be accurate.
      // That risk is acceptable given the benefit of providing users more context.
      var _componentStack = getStackAddendumByWorkInProgressFiber(failedWork);
      var _componentName = getComponentName(failedWork);

      // Add to the collection of captured errors. This is stored as a global
      // map of errors and their component stack location keyed by the boundaries
      // that capture them. We mostly use this Map as a Set; it's a Map only to
      // avoid adding a field to Fiber to store the error.
      if (capturedErrors === null) {
        capturedErrors = new Map();
      }

      var capturedError = {
        componentName: _componentName,
        componentStack: _componentStack,
        error: error,
        errorBoundary: errorBoundaryFound ? boundary.stateNode : null,
        errorBoundaryFound: errorBoundaryFound,
        errorBoundaryName: errorBoundaryName,
        willRetry: willRetry
      };

      capturedErrors.set(boundary, capturedError);

      try {
        logCapturedError(capturedError);
      } catch (e) {
        // Prevent cycle if logCapturedError() throws.
        // A cycle may still occur if logCapturedError renders a component that throws.
        console.error(e);
      }

      // If we're in the commit phase, defer scheduling an update on the
      // boundary until after the commit is complete
      if (isCommitting) {
        if (commitPhaseBoundaries === null) {
          commitPhaseBoundaries = new Set();
        }
        commitPhaseBoundaries.add(boundary);
      } else {
        // Otherwise, schedule an update now.
        // TODO: Is this actually necessary during the render phase? Is it
        // possible to unwind and continue rendering at the same priority,
        // without corrupting internal state?
        scheduleErrorRecovery(boundary);
      }
      return boundary;
    } else if (firstUncaughtError === null) {
      // If no boundary is found, we'll need to throw the error
      firstUncaughtError = error;
    }
    return null;
  }

  function hasCapturedError(fiber) {
    // TODO: capturedErrors should store the boundary instance, to avoid needing
    // to check the alternate.
    return capturedErrors !== null && (capturedErrors.has(fiber) || fiber.alternate !== null && capturedErrors.has(fiber.alternate));
  }

  function isFailedBoundary(fiber) {
    // TODO: failedBoundaries should store the boundary instance, to avoid
    // needing to check the alternate.
    return failedBoundaries !== null && (failedBoundaries.has(fiber) || fiber.alternate !== null && failedBoundaries.has(fiber.alternate));
  }

  function commitErrorHandling(effectfulFiber) {
    var capturedError = void 0;
    if (capturedErrors !== null) {
      capturedError = capturedErrors.get(effectfulFiber);
      capturedErrors['delete'](effectfulFiber);
      if (capturedError == null) {
        if (effectfulFiber.alternate !== null) {
          effectfulFiber = effectfulFiber.alternate;
          capturedError = capturedErrors.get(effectfulFiber);
          capturedErrors['delete'](effectfulFiber);
        }
      }
    }

    !(capturedError != null) ? invariant_1$1(false, 'No error for given unit of work. This error is likely caused by a bug in React. Please file an issue.') : void 0;

    switch (effectfulFiber.tag) {
      case ClassComponent:
        var instance = effectfulFiber.stateNode;

        var info = {
          componentStack: capturedError.componentStack
        };

        // Allow the boundary to handle the error, usually by scheduling
        // an update to itself
        instance.componentDidCatch(capturedError.error, info);
        return;
      case HostRoot:
        if (firstUncaughtError === null) {
          firstUncaughtError = capturedError.error;
        }
        return;
      default:
        invariant_1$1(false, 'Invalid type of work. This error is likely caused by a bug in React. Please file an issue.');
    }
  }

  function unwindContexts(from, to) {
    var node = from;
    while (node !== null) {
      switch (node.tag) {
        case ClassComponent:
          popContextProvider(node);
          break;
        case HostComponent:
          popHostContext(node);
          break;
        case HostRoot:
          popHostContainer(node);
          break;
        case HostPortal:
          popHostContainer(node);
          break;
      }
      if (node === to || node.alternate === to) {
        stopFailedWorkTimer(node);
        break;
      } else {
        stopWorkTimer(node);
      }
      node = node['return'];
    }
  }

  function computeAsyncExpiration() {
    // Given the current clock time, returns an expiration time. We use rounding
    // to batch like updates together.
    // Should complete within ~1000ms. 1200ms max.
    var currentTime = recalculateCurrentTime();
    var expirationMs = 1000;
    var bucketSizeMs = 200;
    return computeExpirationBucket(currentTime, expirationMs, bucketSizeMs);
  }

  function computeExpirationForFiber(fiber) {
    var expirationTime = void 0;
    if (expirationContext !== NoWork) {
      // An explicit expiration context was set;
      expirationTime = expirationContext;
    } else if (isWorking) {
      if (isCommitting) {
        // Updates that occur during the commit phase should have sync priority
        // by default.
        expirationTime = Sync;
      } else {
        // Updates during the render phase should expire at the same time as
        // the work that is being rendered.
        expirationTime = nextRenderExpirationTime;
      }
    } else {
      // No explicit expiration context was set, and we're not currently
      // performing work. Calculate a new expiration time.
      if (useSyncScheduling && !(fiber.internalContextTag & AsyncUpdates)) {
        // This is a sync update
        expirationTime = Sync;
      } else {
        // This is an async update
        expirationTime = computeAsyncExpiration();
      }
    }
    return expirationTime;
  }

  function scheduleWork(fiber, expirationTime) {
    return scheduleWorkImpl(fiber, expirationTime, false);
  }

  function scheduleWorkImpl(fiber, expirationTime, isErrorRecovery) {
    recordScheduleUpdate();

    {
      if (!isErrorRecovery && fiber.tag === ClassComponent) {
        var instance = fiber.stateNode;
        warnAboutInvalidUpdates(instance);
      }
    }

    var node = fiber;
    while (node !== null) {
      // Walk the parent path to the root and update each node's
      // expiration time.
      if (node.expirationTime === NoWork || node.expirationTime > expirationTime) {
        node.expirationTime = expirationTime;
      }
      if (node.alternate !== null) {
        if (node.alternate.expirationTime === NoWork || node.alternate.expirationTime > expirationTime) {
          node.alternate.expirationTime = expirationTime;
        }
      }
      if (node['return'] === null) {
        if (node.tag === HostRoot) {
          var root = node.stateNode;
          if (!isWorking && root === nextRoot && expirationTime <= nextRenderExpirationTime) {
            // Restart the root from the top.
            if (nextUnitOfWork !== null) {
              // This is an interruption. (Used for performance tracking.)
              interruptedBy = fiber;
            }
            nextRoot = null;
            nextUnitOfWork = null;
            nextRenderExpirationTime = NoWork;
          }
          requestWork(root, expirationTime);
        } else {
          {
            if (!isErrorRecovery && fiber.tag === ClassComponent) {
              warnAboutUpdateOnUnmounted(fiber);
            }
          }
          return;
        }
      }
      node = node['return'];
    }
  }

  function scheduleErrorRecovery(fiber) {
    scheduleWorkImpl(fiber, Sync, true);
  }

  function recalculateCurrentTime() {
    // Subtract initial time so it fits inside 32bits
    var ms = now() - startTime;
    mostRecentCurrentTime = msToExpirationTime(ms);
    return mostRecentCurrentTime;
  }

  function deferredUpdates(fn) {
    var previousExpirationContext = expirationContext;
    expirationContext = computeAsyncExpiration();
    try {
      return fn();
    } finally {
      expirationContext = previousExpirationContext;
    }
  }

  function syncUpdates(fn) {
    var previousExpirationContext = expirationContext;
    expirationContext = Sync;
    try {
      return fn();
    } finally {
      expirationContext = previousExpirationContext;
    }
  }

  // TODO: Everything below this is written as if it has been lifted to the
  // renderers. I'll do this in a follow-up.

  // Linked-list of roots
  var firstScheduledRoot = null;
  var lastScheduledRoot = null;

  var isCallbackScheduled = false;
  var isRendering = false;
  var nextFlushedRoot = null;
  var nextFlushedExpirationTime = NoWork;
  var deadlineDidExpire = false;
  var hasUnhandledError = false;
  var unhandledError = null;
  var deadline = null;

  var isBatchingUpdates = false;
  var isUnbatchingUpdates = false;

  // Use these to prevent an infinite loop of nested updates
  var NESTED_UPDATE_LIMIT = 1000;
  var nestedUpdateCount = 0;

  var timeHeuristicForUnitOfWork = 1;

  // requestWork is called by the scheduler whenever a root receives an update.
  // It's up to the renderer to call renderRoot at some point in the future.
  function requestWork(root, expirationTime) {
    if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
      invariant_1$1(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
    }

    // Add the root to the schedule.
    // Check if this root is already part of the schedule.
    if (root.nextScheduledRoot === null) {
      // This root is not already scheduled. Add it.
      root.remainingExpirationTime = expirationTime;
      if (lastScheduledRoot === null) {
        firstScheduledRoot = lastScheduledRoot = root;
        root.nextScheduledRoot = root;
      } else {
        lastScheduledRoot.nextScheduledRoot = root;
        lastScheduledRoot = root;
        lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
      }
    } else {
      // This root is already scheduled, but its priority may have increased.
      var remainingExpirationTime = root.remainingExpirationTime;
      if (remainingExpirationTime === NoWork || expirationTime < remainingExpirationTime) {
        // Update the priority.
        root.remainingExpirationTime = expirationTime;
      }
    }

    if (isRendering) {
      // Prevent reentrancy. Remaining work will be scheduled at the end of
      // the currently rendering batch.
      return;
    }

    if (isBatchingUpdates) {
      // Flush work at the end of the batch.
      if (isUnbatchingUpdates) {
        // ...unless we're inside unbatchedUpdates, in which case we should
        // flush it now.
        performWorkOnRoot(root, Sync);
      }
      return;
    }

    // TODO: Get rid of Sync and use current time?
    if (expirationTime === Sync) {
      performWork(Sync, null);
    } else if (!isCallbackScheduled) {
      isCallbackScheduled = true;
      startRequestCallbackTimer();
      scheduleDeferredCallback(performAsyncWork);
    }
  }

  function findHighestPriorityRoot() {
    var highestPriorityWork = NoWork;
    var highestPriorityRoot = null;

    if (lastScheduledRoot !== null) {
      var previousScheduledRoot = lastScheduledRoot;
      var root = firstScheduledRoot;
      while (root !== null) {
        var remainingExpirationTime = root.remainingExpirationTime;
        if (remainingExpirationTime === NoWork) {
          // This root no longer has work. Remove it from the scheduler.

          // TODO: This check is redudant, but Flow is confused by the branch
          // below where we set lastScheduledRoot to null, even though we break
          // from the loop right after.
          !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant_1$1(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          if (root === root.nextScheduledRoot) {
            // This is the only root in the list.
            root.nextScheduledRoot = null;
            firstScheduledRoot = lastScheduledRoot = null;
            break;
          } else if (root === firstScheduledRoot) {
            // This is the first root in the list.
            var next = root.nextScheduledRoot;
            firstScheduledRoot = next;
            lastScheduledRoot.nextScheduledRoot = next;
            root.nextScheduledRoot = null;
          } else if (root === lastScheduledRoot) {
            // This is the last root in the list.
            lastScheduledRoot = previousScheduledRoot;
            lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
            root.nextScheduledRoot = null;
            break;
          } else {
            previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
            root.nextScheduledRoot = null;
          }
          root = previousScheduledRoot.nextScheduledRoot;
        } else {
          if (highestPriorityWork === NoWork || remainingExpirationTime < highestPriorityWork) {
            // Update the priority, if it's higher
            highestPriorityWork = remainingExpirationTime;
            highestPriorityRoot = root;
          }
          if (root === lastScheduledRoot) {
            break;
          }
          previousScheduledRoot = root;
          root = root.nextScheduledRoot;
        }
      }
    }

    // If the next root is the same as the previous root, this is a nested
    // update. To prevent an infinite loop, increment the nested update count.
    var previousFlushedRoot = nextFlushedRoot;
    if (previousFlushedRoot !== null && previousFlushedRoot === highestPriorityRoot) {
      nestedUpdateCount++;
    } else {
      // Reset whenever we switch roots.
      nestedUpdateCount = 0;
    }
    nextFlushedRoot = highestPriorityRoot;
    nextFlushedExpirationTime = highestPriorityWork;
  }

  function performAsyncWork(dl) {
    performWork(NoWork, dl);
  }

  function performWork(minExpirationTime, dl) {
    deadline = dl;

    // Keep working on roots until there's no more work, or until the we reach
    // the deadline.
    findHighestPriorityRoot();

    if (enableUserTimingAPI && deadline !== null) {
      var didExpire = nextFlushedExpirationTime < recalculateCurrentTime();
      stopRequestCallbackTimer(didExpire);
    }

    while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || nextFlushedExpirationTime <= minExpirationTime) && !deadlineDidExpire) {
      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime);
      // Find the next highest priority work.
      findHighestPriorityRoot();
    }

    // We're done flushing work. Either we ran out of time in this callback,
    // or there's no more work left with sufficient priority.

    // If we're inside a callback, set this to false since we just completed it.
    if (deadline !== null) {
      isCallbackScheduled = false;
    }
    // If there's work left over, schedule a new callback.
    if (nextFlushedRoot !== null && !isCallbackScheduled) {
      isCallbackScheduled = true;
      startRequestCallbackTimer();
      scheduleDeferredCallback(performAsyncWork);
    }

    // Clean-up.
    deadline = null;
    deadlineDidExpire = false;
    nestedUpdateCount = 0;

    if (hasUnhandledError) {
      var _error4 = unhandledError;
      unhandledError = null;
      hasUnhandledError = false;
      throw _error4;
    }
  }

  function performWorkOnRoot(root, expirationTime) {
    !!isRendering ? invariant_1$1(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;

    isRendering = true;

    // Check if this is async work or sync/expired work.
    // TODO: Pass current time as argument to renderRoot, commitRoot
    if (expirationTime <= recalculateCurrentTime()) {
      // Flush sync work.
      var finishedWork = root.finishedWork;
      if (finishedWork !== null) {
        // This root is already complete. We can commit it.
        root.finishedWork = null;
        root.remainingExpirationTime = commitRoot(finishedWork);
      } else {
        root.finishedWork = null;
        finishedWork = renderRoot(root, expirationTime);
        if (finishedWork !== null) {
          // We've completed the root. Commit it.
          root.remainingExpirationTime = commitRoot(finishedWork);
        }
      }
    } else {
      // Flush async work.
      var _finishedWork = root.finishedWork;
      if (_finishedWork !== null) {
        // This root is already complete. We can commit it.
        root.finishedWork = null;
        root.remainingExpirationTime = commitRoot(_finishedWork);
      } else {
        root.finishedWork = null;
        _finishedWork = renderRoot(root, expirationTime);
        if (_finishedWork !== null) {
          // We've completed the root. Check the deadline one more time
          // before committing.
          if (!shouldYield()) {
            // Still time left. Commit the root.
            root.remainingExpirationTime = commitRoot(_finishedWork);
          } else {
            // There's no time left. Mark this root as complete. We'll come
            // back and commit it later.
            root.finishedWork = _finishedWork;
          }
        }
      }
    }

    isRendering = false;
  }

  // When working on async work, the reconciler asks the renderer if it should
  // yield execution. For DOM, we implement this with requestIdleCallback.
  function shouldYield() {
    if (deadline === null) {
      return false;
    }
    if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
      return false;
    }
    deadlineDidExpire = true;
    return true;
  }

  // TODO: Not happy about this hook. Conceptually, renderRoot should return a
  // tuple of (isReadyForCommit, didError, error)
  function onUncaughtError(error) {
    !(nextFlushedRoot !== null) ? invariant_1$1(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    // Unschedule this root so we don't work on it again until there's
    // another update.
    nextFlushedRoot.remainingExpirationTime = NoWork;
    if (!hasUnhandledError) {
      hasUnhandledError = true;
      unhandledError = error;
    }
  }

  // TODO: Batching should be implemented at the renderer level, not inside
  // the reconciler.
  function batchedUpdates(fn, a) {
    var previousIsBatchingUpdates = isBatchingUpdates;
    isBatchingUpdates = true;
    try {
      return fn(a);
    } finally {
      isBatchingUpdates = previousIsBatchingUpdates;
      if (!isBatchingUpdates && !isRendering) {
        performWork(Sync, null);
      }
    }
  }

  // TODO: Batching should be implemented at the renderer level, not inside
  // the reconciler.
  function unbatchedUpdates(fn) {
    if (isBatchingUpdates && !isUnbatchingUpdates) {
      isUnbatchingUpdates = true;
      try {
        return fn();
      } finally {
        isUnbatchingUpdates = false;
      }
    }
    return fn();
  }

  // TODO: Batching should be implemented at the renderer level, not within
  // the reconciler.
  function flushSync(fn) {
    var previousIsBatchingUpdates = isBatchingUpdates;
    isBatchingUpdates = true;
    try {
      return syncUpdates(fn);
    } finally {
      isBatchingUpdates = previousIsBatchingUpdates;
      !!isRendering ? invariant_1$1(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
      performWork(Sync, null);
    }
  }

  return {
    computeAsyncExpiration: computeAsyncExpiration,
    computeExpirationForFiber: computeExpirationForFiber,
    scheduleWork: scheduleWork,
    batchedUpdates: batchedUpdates,
    unbatchedUpdates: unbatchedUpdates,
    flushSync: flushSync,
    deferredUpdates: deferredUpdates
  };
};

{
  var didWarnAboutNestedUpdates = false;
}

// 0 is PROD, 1 is DEV.
// Might add PROFILE later.


function getContextForSubtree(parentComponent) {
  if (!parentComponent) {
    return emptyObject_1;
  }

  var fiber = get(parentComponent);
  var parentContext = findCurrentUnmaskedContext(fiber);
  return isContextProvider(fiber) ? processChildContext(fiber, parentContext) : parentContext;
}

var ReactFiberReconciler$1 = function (config) {
  var getPublicInstance = config.getPublicInstance;

  var _ReactFiberScheduler = ReactFiberScheduler(config),
      computeAsyncExpiration = _ReactFiberScheduler.computeAsyncExpiration,
      computeExpirationForFiber = _ReactFiberScheduler.computeExpirationForFiber,
      scheduleWork = _ReactFiberScheduler.scheduleWork,
      batchedUpdates = _ReactFiberScheduler.batchedUpdates,
      unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates,
      flushSync = _ReactFiberScheduler.flushSync,
      deferredUpdates = _ReactFiberScheduler.deferredUpdates;

  function scheduleTopLevelUpdate(current, element, callback) {
    {
      if (ReactDebugCurrentFiber.phase === 'render' && ReactDebugCurrentFiber.current !== null && !didWarnAboutNestedUpdates) {
        didWarnAboutNestedUpdates = true;
        warning_1$1(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(ReactDebugCurrentFiber.current) || 'Unknown');
      }
    }

    callback = callback === undefined ? null : callback;
    {
      warning_1$1(callback === null || typeof callback === 'function', 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
    }

    var expirationTime = void 0;
    // Check if the top-level element is an async wrapper component. If so,
    // treat updates to the root as async. This is a bit weird but lets us
    // avoid a separate `renderAsync` API.
    if (enableAsyncSubtreeAPI && element != null && element.type != null && element.type.prototype != null && element.type.prototype.unstable_isAsyncReactComponent === true) {
      expirationTime = computeAsyncExpiration();
    } else {
      expirationTime = computeExpirationForFiber(current);
    }

    var update = {
      expirationTime: expirationTime,
      partialState: { element: element },
      callback: callback,
      isReplace: false,
      isForced: false,
      nextCallback: null,
      next: null
    };
    insertUpdateIntoFiber(current, update);
    scheduleWork(current, expirationTime);
  }

  function findHostInstance(fiber) {
    var hostFiber = findCurrentHostFiber(fiber);
    if (hostFiber === null) {
      return null;
    }
    return hostFiber.stateNode;
  }

  return {
    createContainer: function (containerInfo, hydrate) {
      return createFiberRoot(containerInfo, hydrate);
    },
    updateContainer: function (element, container, parentComponent, callback) {
      // TODO: If this is a nested container, this won't be the root.
      var current = container.current;

      {
        if (ReactFiberInstrumentation_1.debugTool) {
          if (current.alternate === null) {
            ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
          } else if (element === null) {
            ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
          } else {
            ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
          }
        }
      }

      var context = getContextForSubtree(parentComponent);
      if (container.context === null) {
        container.context = context;
      } else {
        container.pendingContext = context;
      }

      scheduleTopLevelUpdate(current, element, callback);
    },


    batchedUpdates: batchedUpdates,

    unbatchedUpdates: unbatchedUpdates,

    deferredUpdates: deferredUpdates,

    flushSync: flushSync,

    getPublicRootInstance: function (container) {
      var containerFiber = container.current;
      if (!containerFiber.child) {
        return null;
      }
      switch (containerFiber.child.tag) {
        case HostComponent:
          return getPublicInstance(containerFiber.child.stateNode);
        default:
          return containerFiber.child.stateNode;
      }
    },


    findHostInstance: findHostInstance,

    findHostInstanceWithNoPortals: function (fiber) {
      var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
      if (hostFiber === null) {
        return null;
      }
      return hostFiber.stateNode;
    },
    injectIntoDevTools: function (devToolsConfig) {
      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;

      return injectInternals(_assign({}, devToolsConfig, {
        findHostInstanceByFiber: function (fiber) {
          return findHostInstance(fiber);
        },
        findFiberByHostInstance: function (instance) {
          if (!findFiberByHostInstance) {
            // Might not be implemented by the renderer.
            return null;
          }
          return findFiberByHostInstance(instance);
        }
      }));
    }
  };
};

var ReactFiberReconciler$2 = Object.freeze({
	default: ReactFiberReconciler$1
});

var ReactFiberReconciler$3 = ( ReactFiberReconciler$2 && ReactFiberReconciler$1 ) || ReactFiberReconciler$2;

// TODO: bundle Flow types with the package.



// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.
var reactReconciler = ReactFiberReconciler$3['default'] ? ReactFiberReconciler$3['default'] : ReactFiberReconciler$3;

// TODO: this is special because it gets imported during build.

var ReactVersion = '16.1.1';

// a requestAnimationFrame, storing the time for the start of the frame, then
// scheduling a postMessage which gets scheduled after paint. Within the
// postMessage handler do as much work as possible until time + frame rate.
// By separating the idle call into a separate event tick we ensure that
// layout, paint and other browser work is counted against the available time.
// The frame rate is dynamically adjusted.

{
  if (ExecutionEnvironment_1.canUseDOM && typeof requestAnimationFrame !== 'function') {
    warning_1$1(false, 'React depends on requestAnimationFrame. Make sure that you load a ' + 'polyfill in older browsers. http://fb.me/react-polyfills');
  }
}

var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

var now = void 0;
if (hasNativePerformanceNow) {
  now = function () {
    return performance.now();
  };
} else {
  now = function () {
    return Date.now();
  };
}

// TODO: There's no way to cancel, because Fiber doesn't atm.
var rIC = void 0;

if (!ExecutionEnvironment_1.canUseDOM) {
  rIC = function (frameCallback) {
    setTimeout(function () {
      frameCallback({
        timeRemaining: function () {
          return Infinity;
        }
      });
    });
    return 0;
  };
} else if (typeof requestIdleCallback !== 'function') {
  // Polyfill requestIdleCallback.

  var scheduledRICCallback = null;

  var isIdleScheduled = false;
  var isAnimationFrameScheduled = false;

  var frameDeadline = 0;
  // We start out assuming that we run at 30fps but then the heuristic tracking
  // will adjust this value to a faster fps if we get more frequent animation
  // frames.
  var previousFrameTime = 33;
  var activeFrameTime = 33;

  var frameDeadlineObject;
  if (hasNativePerformanceNow) {
    frameDeadlineObject = {
      timeRemaining: function () {
        // We assume that if we have a performance timer that the rAF callback
        // gets a performance timer value. Not sure if this is always true.
        return frameDeadline - performance.now();
      }
    };
  } else {
    frameDeadlineObject = {
      timeRemaining: function () {
        // Fallback to Date.now()
        return frameDeadline - Date.now();
      }
    };
  }

  // We use the postMessage trick to defer idle work until after the repaint.
  var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);
  var idleTick = function (event) {
    if (event.source !== window || event.data !== messageKey) {
      return;
    }
    isIdleScheduled = false;
    var callback = scheduledRICCallback;
    scheduledRICCallback = null;
    if (callback !== null) {
      callback(frameDeadlineObject);
    }
  };
  // Assumes that we have addEventListener in this environment. Might need
  // something better for old IE.
  window.addEventListener('message', idleTick, false);

  var animationTick = function (rafTime) {
    isAnimationFrameScheduled = false;
    var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
    if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
      if (nextFrameTime < 8) {
        // Defensive coding. We don't support higher frame rates than 120hz.
        // If we get lower than that, it is probably a bug.
        nextFrameTime = 8;
      }
      // If one frame goes long, then the next one can be short to catch up.
      // If two frames are short in a row, then that's an indication that we
      // actually have a higher frame rate than what we're currently optimizing.
      // We adjust our heuristic dynamically accordingly. For example, if we're
      // running on 120hz display or 90hz VR display.
      // Take the max of the two in case one of them was an anomaly due to
      // missed frame deadlines.
      activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
    } else {
      previousFrameTime = nextFrameTime;
    }
    frameDeadline = rafTime + activeFrameTime;
    if (!isIdleScheduled) {
      isIdleScheduled = true;
      window.postMessage(messageKey, '*');
    }
  };

  rIC = function (callback) {
    // This assumes that we only schedule one callback at a time because that's
    // how Fiber uses it.
    scheduledRICCallback = callback;
    if (!isAnimationFrameScheduled) {
      // If rAF didn't already schedule one, we need to schedule a frame.
      // TODO: If this rAF doesn't materialize because the browser throttles, we
      // might want to still have setTimeout trigger rIC as a backup to ensure
      // that we keep performing work.
      isAnimationFrameScheduled = true;
      requestAnimationFrame(animationTick);
    }
    return 0;
  };
} else {
  rIC = requestIdleCallback;
}

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

{
  var printWarning$1 = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning$1.apply(undefined, [format].concat(args));
    }
  };
}

var lowPriorityWarning$1 = lowPriorityWarning;

// isAttributeNameSafe() is currently duplicated in DOMMarkupOperations.
// TODO: Find a better place for this.
var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};
function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  {
    warning_1$1(false, 'Invalid attribute name: `%s`', attributeName);
  }
  return false;
}

// shouldIgnoreValue() is currently duplicated in DOMMarkupOperations.
// TODO: Find a better place for this.
function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

/**
 * Operations for dealing with DOM properties.
 */





/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */
function getValueForProperty(node, name, expected) {
  {
    var propertyInfo = getPropertyInfo(name);
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod || propertyInfo.mustUseProperty) {
        return node[propertyInfo.propertyName];
      } else {
        var attributeName = propertyInfo.attributeName;

        var stringValue = null;

        if (propertyInfo.hasOverloadedBooleanValue) {
          if (node.hasAttribute(attributeName)) {
            var value = node.getAttribute(attributeName);
            if (value === '') {
              return true;
            }
            if (shouldIgnoreValue(propertyInfo, expected)) {
              return value;
            }
            if (value === '' + expected) {
              return expected;
            }
            return value;
          }
        } else if (node.hasAttribute(attributeName)) {
          if (shouldIgnoreValue(propertyInfo, expected)) {
            // We had an attribute but shouldn't have had one, so read it
            // for the error message.
            return node.getAttribute(attributeName);
          }
          if (propertyInfo.hasBooleanValue) {
            // If this was a boolean, it doesn't matter what the value is
            // the fact that we have it is the same as the expected.
            return expected;
          }
          // Even if this property uses a namespace we use getAttribute
          // because we assume its namespaced name is the same as our config.
          // To use getAttributeNS we need the local name which we don't have
          // in our config atm.
          stringValue = node.getAttribute(attributeName);
        }

        if (shouldIgnoreValue(propertyInfo, expected)) {
          return stringValue === null ? expected : stringValue;
        } else if (stringValue === '' + expected) {
          return expected;
        } else {
          return stringValue;
        }
      }
    }
  }
}

/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */
function getValueForAttribute(node, name, expected) {
  {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (!node.hasAttribute(name)) {
      return expected === undefined ? undefined : null;
    }
    var value = node.getAttribute(name);
    if (value === '' + expected) {
      return expected;
    }
    return value;
  }
}

/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */
function setValueForProperty(node, name, value) {
  var propertyInfo = getPropertyInfo(name);

  if (propertyInfo && shouldSetAttribute(name, value)) {
    var mutationMethod = propertyInfo.mutationMethod;
    if (mutationMethod) {
      mutationMethod(node, value);
    } else if (shouldIgnoreValue(propertyInfo, value)) {
      deleteValueForProperty(node, name);
      return;
    } else if (propertyInfo.mustUseProperty) {
      // Contrary to `setAttribute`, object properties are properly
      // `toString`ed by IE8/9.
      node[propertyInfo.propertyName] = value;
    } else {
      var attributeName = propertyInfo.attributeName;
      var namespace = propertyInfo.attributeNamespace;
      // `setAttribute` with objects becomes only `[object]` in IE8/9,
      // ('' + value) makes it output the correct toString()-value.
      if (namespace) {
        node.setAttributeNS(namespace, attributeName, '' + value);
      } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        node.setAttribute(attributeName, '');
      } else {
        node.setAttribute(attributeName, '' + value);
      }
    }
  } else {
    setValueForAttribute(node, name, shouldSetAttribute(name, value) ? value : null);
    return;
  }

  {
    
  }
}

function setValueForAttribute(node, name, value) {
  if (!isAttributeNameSafe(name)) {
    return;
  }
  if (value == null) {
    node.removeAttribute(name);
  } else {
    node.setAttribute(name, '' + value);
  }

  {
    
  }
}

/**
 * Deletes an attributes from a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 */
function deleteValueForAttribute(node, name) {
  node.removeAttribute(name);
}

/**
 * Deletes the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 */
function deleteValueForProperty(node, name) {
  var propertyInfo = getPropertyInfo(name);
  if (propertyInfo) {
    var mutationMethod = propertyInfo.mutationMethod;
    if (mutationMethod) {
      mutationMethod(node, undefined);
    } else if (propertyInfo.mustUseProperty) {
      var propName = propertyInfo.propertyName;
      if (propertyInfo.hasBooleanValue) {
        node[propName] = false;
      } else {
        node[propName] = '';
      }
    } else {
      node.removeAttribute(propertyInfo.attributeName);
    }
  } else {
    node.removeAttribute(name);
  }
}

var ReactControlledValuePropTypes = {
  checkPropTypes: null
};

{
  var hasReadOnlyValue = {
    button: true,
    checkbox: true,
    image: true,
    hidden: true,
    radio: true,
    reset: true,
    submit: true
  };

  var propTypes = {
    value: function (props, propName, componentName) {
      if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
        return null;
      }
      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    checked: function (props, propName, componentName) {
      if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
        return null;
      }
      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }
  };

  /**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */
  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props, getStack) {
    checkPropTypes_1$1(propTypes, props, 'prop', tagName, getStack);
  };
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var getCurrentFiberOwnerName$2 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
var getCurrentFiberStackAddendum$3 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;

var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */

function getHostProps(element, props) {
  var node = element;
  var value = props.value;
  var checked = props.checked;

  var hostProps = _assign({
    // Make sure we set .type before any other properties (setting .value
    // before .type means .value is lost in IE11 and below)
    type: undefined,
    // Make sure we set .step before .value (setting .value before .step
    // means .value is rounded on mount, based upon step precision)
    step: undefined,
    // Make sure we set .min & .max before .value (to ensure proper order
    // in corner cases such as min or max deriving from value, e.g. Issue #7170)
    min: undefined,
    max: undefined
  }, props, {
    defaultChecked: undefined,
    defaultValue: undefined,
    value: value != null ? value : node._wrapperState.initialValue,
    checked: checked != null ? checked : node._wrapperState.initialChecked
  });

  return hostProps;
}

function initWrapperState(element, props) {
  {
    ReactControlledValuePropTypes.checkPropTypes('input', props, getCurrentFiberStackAddendum$3);

    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
      warning_1$1(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName$2() || 'A component', props.type);
      didWarnCheckedDefaultChecked = true;
    }
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      warning_1$1(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName$2() || 'A component', props.type);
      didWarnValueDefaultValue = true;
    }
  }

  var defaultValue = props.defaultValue;
  var node = element;
  node._wrapperState = {
    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
    initialValue: props.value != null ? props.value : defaultValue,
    controlled: isControlled(props)
  };
}

function updateWrapper(element, props) {
  var node = element;
  {
    var controlled = isControlled(props);

    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
      warning_1$1(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum$3());
      didWarnUncontrolledToControlled = true;
    }
    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
      warning_1$1(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum$3());
      didWarnControlledToUncontrolled = true;
    }
  }

  var checked = props.checked;
  if (checked != null) {
    setValueForProperty(node, 'checked', checked || false);
  }

  var value = props.value;
  if (value != null) {
    if (value === 0 && node.value === '') {
      node.value = '0';
      // Note: IE9 reports a number inputs as 'text', so check props instead.
    } else if (props.type === 'number') {
      // Simulate `input.valueAsNumber`. IE9 does not support it
      var valueAsNumber = parseFloat(node.value) || 0;

      if (
      // eslint-disable-next-line
      value != valueAsNumber ||
      // eslint-disable-next-line
      value == valueAsNumber && node.value != value) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        node.value = '' + value;
      }
    } else if (node.value !== '' + value) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      node.value = '' + value;
    }
  } else {
    if (props.value == null && props.defaultValue != null) {
      // In Chrome, assigning defaultValue to certain input types triggers input validation.
      // For number inputs, the display value loses trailing decimal points. For email inputs,
      // Chrome raises "The specified value <x> is not a valid email address".
      //
      // Here we check to see if the defaultValue has actually changed, avoiding these problems
      // when the user is inputting text
      //
      // https://github.com/facebook/react/issues/7253
      if (node.defaultValue !== '' + props.defaultValue) {
        node.defaultValue = '' + props.defaultValue;
      }
    }
    if (props.checked == null && props.defaultChecked != null) {
      node.defaultChecked = !!props.defaultChecked;
    }
  }
}

function postMountWrapper(element, props) {
  var node = element;

  // Detach value from defaultValue. We won't do anything if we're working on
  // submit or reset inputs as those values & defaultValues are linked. They
  // are not resetable nodes so this operation doesn't matter and actually
  // removes browser-default values (eg "Submit Query") when no value is
  // provided.

  switch (props.type) {
    case 'submit':
    case 'reset':
      break;
    case 'color':
    case 'date':
    case 'datetime':
    case 'datetime-local':
    case 'month':
    case 'time':
    case 'week':
      // This fixes the no-show issue on iOS Safari and Android Chrome:
      // https://github.com/facebook/react/issues/7233
      node.value = '';
      node.value = node.defaultValue;
      break;
    default:
      node.value = node.value;
      break;
  }

  // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
  // this is needed to work around a chrome bug where setting defaultChecked
  // will sometimes influence the value of checked (even after detachment).
  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
  // We need to temporarily unset name to avoid disrupting radio button groups.
  var name = node.name;
  if (name !== '') {
    node.name = '';
  }
  node.defaultChecked = !node.defaultChecked;
  node.defaultChecked = !node.defaultChecked;
  if (name !== '') {
    node.name = name;
  }
}

function restoreControlledState$1(element, props) {
  var node = element;
  updateWrapper(node, props);
  updateNamedCousins(node, props);
}

function updateNamedCousins(rootNode, props) {
  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form. It might not even be in the
    // document. Let's just use the local `querySelectorAll` to ensure we don't
    // miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
      !otherProps ? invariant_1$1(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      updateWrapper(otherNode, otherProps);
    }
  }
}

function flattenChildren(children) {
  var content = '';

  // Flatten children and warn if they aren't strings or numbers;
  // invalid types are ignored.
  // We can silently skip them because invalid DOM nesting warning
  // catches these cases in Fiber.
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    if (typeof child === 'string' || typeof child === 'number') {
      content += child;
    }
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */

function validateProps(element, props) {
  // TODO (yungsters): Remove support for `selected` in <option>.
  {
    warning_1$1(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
  }
}

function postMountWrapper$1(element, props) {
  // value="" should make a value attribute (#6219)
  if (props.value != null) {
    element.setAttribute('value', props.value);
  }
}

function getHostProps$1(element, props) {
  var hostProps = _assign({ children: undefined }, props);

  var content = flattenChildren(props.children);

  if (content) {
    hostProps.children = content;
  }

  return hostProps;
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var getCurrentFiberOwnerName$3 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
var getCurrentFiberStackAddendum$4 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;


{
  var didWarnValueDefaultValue$1 = false;
}

function getDeclarationErrorAddendum() {
  var ownerName = getCurrentFiberOwnerName$3();
  if (ownerName) {
    return '\n\nCheck the render method of `' + ownerName + '`.';
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 */
function checkSelectPropTypes(props) {
  ReactControlledValuePropTypes.checkPropTypes('select', props, getCurrentFiberStackAddendum$4);

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
      warning_1$1(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
    } else if (!props.multiple && isArray) {
      warning_1$1(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
    }
  }
}

function updateOptions(node, multiple, propValue, setDefaultSelected) {
  var options = node.options;

  if (multiple) {
    var selectedValues = propValue;
    var selectedValue = {};
    for (var i = 0; i < selectedValues.length; i++) {
      // Prefix to avoid chaos with special keys.
      selectedValue['$' + selectedValues[i]] = true;
    }
    for (var _i = 0; _i < options.length; _i++) {
      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
      if (options[_i].selected !== selected) {
        options[_i].selected = selected;
      }
      if (selected && setDefaultSelected) {
        options[_i].defaultSelected = true;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    var _selectedValue = '' + propValue;
    var defaultSelected = null;
    for (var _i2 = 0; _i2 < options.length; _i2++) {
      if (options[_i2].value === _selectedValue) {
        options[_i2].selected = true;
        if (setDefaultSelected) {
          options[_i2].defaultSelected = true;
        }
        return;
      }
      if (defaultSelected === null && !options[_i2].disabled) {
        defaultSelected = options[_i2];
      }
    }
    if (defaultSelected !== null) {
      defaultSelected.selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */

function getHostProps$2(element, props) {
  return _assign({}, props, {
    value: undefined
  });
}

function initWrapperState$1(element, props) {
  var node = element;
  {
    checkSelectPropTypes(props);
  }

  var value = props.value;
  node._wrapperState = {
    initialValue: value != null ? value : props.defaultValue,
    wasMultiple: !!props.multiple
  };

  {
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
      warning_1$1(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
      didWarnValueDefaultValue$1 = true;
    }
  }
}

function postMountWrapper$2(element, props) {
  var node = element;
  node.multiple = !!props.multiple;
  var value = props.value;
  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (props.defaultValue != null) {
    updateOptions(node, !!props.multiple, props.defaultValue, true);
  }
}

function postUpdateWrapper(element, props) {
  var node = element;
  // After the initial mount, we control selected-ness manually so don't pass
  // this value down
  node._wrapperState.initialValue = undefined;

  var wasMultiple = node._wrapperState.wasMultiple;
  node._wrapperState.wasMultiple = !!props.multiple;

  var value = props.value;
  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (wasMultiple !== !!props.multiple) {
    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
    if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    } else {
      // Revert the select back to its default unselected state.
      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
    }
  }
}

function restoreControlledState$2(element, props) {
  var node = element;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  }
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var getCurrentFiberStackAddendum$5 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;

var didWarnValDefaultVal = false;

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */

function getHostProps$3(element, props) {
  var node = element;
  !(props.dangerouslySetInnerHTML == null) ? invariant_1$1(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0;

  // Always set children to the same thing. In IE9, the selection range will
  // get reset if `textContent` is mutated.  We could add a check in setTextContent
  // to only set the value if/when the value differs from the node value (which would
  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
  // solution. The value can be a boolean or object so that's why it's forced
  // to be a string.
  var hostProps = _assign({}, props, {
    value: undefined,
    defaultValue: undefined,
    children: '' + node._wrapperState.initialValue
  });

  return hostProps;
}

function initWrapperState$2(element, props) {
  var node = element;
  {
    ReactControlledValuePropTypes.checkPropTypes('textarea', props, getCurrentFiberStackAddendum$5);
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
      warning_1$1(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
      didWarnValDefaultVal = true;
    }
  }

  var value = props.value;
  var initialValue = value;

  // Only bother fetching default value if we're going to use it
  if (value == null) {
    var defaultValue = props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = props.children;
    if (children != null) {
      {
        warning_1$1(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
      }
      !(defaultValue == null) ? invariant_1$1(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;
      if (Array.isArray(children)) {
        !(children.length <= 1) ? invariant_1$1(false, '<textarea> can only have at most one child.') : void 0;
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    initialValue = defaultValue;
  }

  node._wrapperState = {
    initialValue: '' + initialValue
  };
}

function updateWrapper$1(element, props) {
  var node = element;
  var value = props.value;
  if (value != null) {
    // Cast `value` to a string to ensure the value is set correctly. While
    // browsers typically do this as necessary, jsdom doesn't.
    var newValue = '' + value;

    // To avoid side effects (such as losing text selection), only set value if changed
    if (newValue !== node.value) {
      node.value = newValue;
    }
    if (props.defaultValue == null) {
      node.defaultValue = newValue;
    }
  }
  if (props.defaultValue != null) {
    node.defaultValue = props.defaultValue;
  }
}

function postMountWrapper$3(element, props) {
  var node = element;
  // This is in postMount because we need access to the DOM node, which is not
  // available until after the component has mounted.
  var textContent = node.textContent;

  // Only set node.value if textContent is equal to the expected
  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
  // will populate textContent as well.
  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
  if (textContent === node._wrapperState.initialValue) {
    node.value = textContent;
  }
}

function restoreControlledState$3(element, props) {
  // DOM component is still mounted; update
  updateWrapper$1(element, props);
}

var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';

var Namespaces = {
  html: HTML_NAMESPACE$1,
  mathml: MATH_NAMESPACE,
  svg: SVG_NAMESPACE
};

// Assumes there is no parent namespace.
function getIntrinsicNamespace(type) {
  switch (type) {
    case 'svg':
      return SVG_NAMESPACE;
    case 'math':
      return MATH_NAMESPACE;
    default:
      return HTML_NAMESPACE$1;
  }
}

function getChildNamespace(parentNamespace, type) {
  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
    // No (or default) parent namespace: potential entry point.
    return getIntrinsicNamespace(type);
  }
  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
    // We're leaving SVG.
    return HTML_NAMESPACE$1;
  }
  // By default, pass namespace below.
  return parentNamespace;
}

/* globals MSApp */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */
var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer = void 0;

/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node

  if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

// code copied and modified from escape-html
/**
 * Module variables.
 * @private
 */

var matchHtmlRegExp = /["'&<>]/;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml(string) {
  var str = '' + string;
  var match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  }

  var escape;
  var html = '';
  var index = 0;
  var lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        // "
        escape = '&quot;';
        break;
      case 38:
        // &
        escape = '&amp;';
        break;
      case 39:
        // '
        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
        break;
      case 60:
        // <
        escape = '&lt;';
        break;
      case 62:
        // >
        escape = '&gt;';
        break;
      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escape;
  }

  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// end code copied and modified from escape-html

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  if (typeof text === 'boolean' || typeof text === 'number') {
    // this shortcircuit helps perf for types that we know will never have
    // special characters, especially given that this function is used often
    // for numeric dom ids.
    return '' + text;
  }
  return escapeHtml(text);
}

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

if (ExecutionEnvironment_1.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      if (node.nodeType === TEXT_NODE) {
        node.nodeValue = text;
        return;
      }
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

var setTextContent$1 = setTextContent;

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
  }

  return ('' + value).trim();
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

var hyphenate_1 = hyphenate;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */





var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate_1(string).replace(msPattern, '-ms-');
}

var hyphenateStyleName_1$1 = hyphenateStyleName;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

var camelize_1 = camelize;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */





var msPattern$1 = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize_1(string.replace(msPattern$1, 'ms-'));
}

var camelizeStyleName_1$1 = camelizeStyleName;

var warnValidStyle = emptyFunction_1;

{
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;
  var warnedForInfinityValue = false;

  var warnHyphenatedStyleName = function (name, getStack) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    warning_1$1(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName_1$1(name), getStack());
  };

  var warnBadVendoredStyleName = function (name, getStack) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    warning_1$1(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), getStack());
  };

  var warnStyleValueWithSemicolon = function (name, value, getStack) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    warning_1$1(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.%s', name, value.replace(badStyleValueWithSemicolonPattern, ''), getStack());
  };

  var warnStyleValueIsNaN = function (name, value, getStack) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    warning_1$1(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, getStack());
  };

  var warnStyleValueIsInfinity = function (name, value, getStack) {
    if (warnedForInfinityValue) {
      return;
    }

    warnedForInfinityValue = true;
    warning_1$1(false, '`Infinity` is an invalid value for the `%s` css style property.%s', name, getStack());
  };

  warnValidStyle = function (name, value, getStack) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, getStack);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, getStack);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, getStack);
    }

    if (typeof value === 'number') {
      if (isNaN(value)) {
        warnStyleValueIsNaN(name, value, getStack);
      } else if (!isFinite(value)) {
        warnStyleValueIsInfinity(name, value, getStack);
      }
    }
  };
}

var warnValidStyle$1 = warnValidStyle;

/**
 * Operations for dealing with CSS properties.
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */
function createDangerousStringForStyles(styles) {
  {
    var serialized = '';
    var delimiter = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        var isCustomProperty = styleName.indexOf('--') === 0;
        serialized += delimiter + hyphenateStyleName_1$1(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);

        delimiter = ';';
      }
    }
    return serialized || null;
  }
}

/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */
function setValueForStyles(node, styles, getStack) {
  var style = node.style;
  for (var styleName in styles) {
    if (!styles.hasOwnProperty(styleName)) {
      continue;
    }
    var isCustomProperty = styleName.indexOf('--') === 0;
    {
      if (!isCustomProperty) {
        warnValidStyle$1(styleName, styles[styleName], getStack);
      }
    }
    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
    if (styleName === 'float') {
      styleName = 'cssFloat';
    }
    if (isCustomProperty) {
      style.setProperty(styleName, styleValue);
    } else {
      style[styleName] = styleValue;
    }
  }
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

var HTML$1 = '__html';

function assertValidProps(tag, props, getStack) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant_1$1(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, getStack()) : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? invariant_1$1(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant_1$1(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
  }
  {
    warning_1$1(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.%s', getStack());
  }
  !(props.style == null || typeof props.style === 'object') ? invariant_1$1(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getStack()) : void 0;
}

function isCustomComponent(tagName, props) {
  if (tagName.indexOf('-') === -1) {
    return typeof props.is === 'string';
  }
  switch (tagName) {
    // These are reserved SVG and MathML elements.
    // We don't mind this whitelist too much because we expect it to never grow.
    // The alternative is to track the namespace in a few places which is convoluted.
    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
    case 'annotation-xml':
    case 'color-profile':
    case 'font-face':
    case 'font-face-src':
    case 'font-face-uri':
    case 'font-face-format':
    case 'font-face-name':
    case 'missing-glyph':
      return false;
    default:
      return true;
  }
}

var ariaProperties = {
  'aria-current': 0, // state
  'aria-details': 0,
  'aria-disabled': 0, // state
  'aria-hidden': 0, // state
  'aria-invalid': 0, // state
  'aria-keyshortcuts': 0,
  'aria-label': 0,
  'aria-roledescription': 0,
  // Widget Attributes
  'aria-autocomplete': 0,
  'aria-checked': 0,
  'aria-expanded': 0,
  'aria-haspopup': 0,
  'aria-level': 0,
  'aria-modal': 0,
  'aria-multiline': 0,
  'aria-multiselectable': 0,
  'aria-orientation': 0,
  'aria-placeholder': 0,
  'aria-pressed': 0,
  'aria-readonly': 0,
  'aria-required': 0,
  'aria-selected': 0,
  'aria-sort': 0,
  'aria-valuemax': 0,
  'aria-valuemin': 0,
  'aria-valuenow': 0,
  'aria-valuetext': 0,
  // Live Region Attributes
  'aria-atomic': 0,
  'aria-busy': 0,
  'aria-live': 0,
  'aria-relevant': 0,
  // Drag-and-Drop Attributes
  'aria-dropeffect': 0,
  'aria-grabbed': 0,
  // Relationship Attributes
  'aria-activedescendant': 0,
  'aria-colcount': 0,
  'aria-colindex': 0,
  'aria-colspan': 0,
  'aria-controls': 0,
  'aria-describedby': 0,
  'aria-errormessage': 0,
  'aria-flowto': 0,
  'aria-labelledby': 0,
  'aria-owns': 0,
  'aria-posinset': 0,
  'aria-rowcount': 0,
  'aria-rowindex': 0,
  'aria-rowspan': 0,
  'aria-setsize': 0
};

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

function getStackAddendum() {
  var stack = ReactDebugCurrentFrame.getStackAddendum();
  return stack != null ? stack : '';
}

function validateProperty(tagName, name) {
  if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
    return true;
  }

  if (rARIACamel.test(name)) {
    var ariaName = 'aria-' + name.slice(4).toLowerCase();
    var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (correctName == null) {
      warning_1$1(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.%s', name, getStackAddendum());
      warnedProperties[name] = true;
      return true;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== correctName) {
      warning_1$1(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?%s', name, correctName, getStackAddendum());
      warnedProperties[name] = true;
      return true;
    }
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== standardName) {
      warning_1$1(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum());
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(type, props) {
  var invalidProps = [];

  for (var key in props) {
    var isValid = validateProperty(type, key);
    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
    warning_1$1(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum());
  } else if (invalidProps.length > 1) {
    warning_1$1(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum());
  }
}

function validateProperties(type, props) {
  if (isCustomComponent(type, props)) {
    return;
  }
  warnInvalidARIAProps(type, props);
}

var didWarnValueNull = false;

function getStackAddendum$1() {
  var stack = ReactDebugCurrentFrame.getStackAddendum();
  return stack != null ? stack : '';
}

function validateProperties$1(type, props) {
  if (type !== 'input' && type !== 'textarea' && type !== 'select') {
    return;
  }

  if (props != null && props.value === null && !didWarnValueNull) {
    didWarnValueNull = true;
    if (type === 'select' && props.multiple) {
      warning_1$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.%s', type, getStackAddendum$1());
    } else {
      warning_1$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', type, getStackAddendum$1());
    }
  }
}

// When adding attributes to the HTML or SVG whitelist, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames = {
  // HTML
  accept: 'accept',
  acceptcharset: 'acceptCharset',
  'accept-charset': 'acceptCharset',
  accesskey: 'accessKey',
  action: 'action',
  allowfullscreen: 'allowFullScreen',
  alt: 'alt',
  as: 'as',
  async: 'async',
  autocapitalize: 'autoCapitalize',
  autocomplete: 'autoComplete',
  autocorrect: 'autoCorrect',
  autofocus: 'autoFocus',
  autoplay: 'autoPlay',
  autosave: 'autoSave',
  capture: 'capture',
  cellpadding: 'cellPadding',
  cellspacing: 'cellSpacing',
  challenge: 'challenge',
  charset: 'charSet',
  checked: 'checked',
  children: 'children',
  cite: 'cite',
  'class': 'className',
  classid: 'classID',
  classname: 'className',
  cols: 'cols',
  colspan: 'colSpan',
  content: 'content',
  contenteditable: 'contentEditable',
  contextmenu: 'contextMenu',
  controls: 'controls',
  controlslist: 'controlsList',
  coords: 'coords',
  crossorigin: 'crossOrigin',
  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
  data: 'data',
  datetime: 'dateTime',
  'default': 'default',
  defaultchecked: 'defaultChecked',
  defaultvalue: 'defaultValue',
  defer: 'defer',
  dir: 'dir',
  disabled: 'disabled',
  download: 'download',
  draggable: 'draggable',
  enctype: 'encType',
  'for': 'htmlFor',
  form: 'form',
  formmethod: 'formMethod',
  formaction: 'formAction',
  formenctype: 'formEncType',
  formnovalidate: 'formNoValidate',
  formtarget: 'formTarget',
  frameborder: 'frameBorder',
  headers: 'headers',
  height: 'height',
  hidden: 'hidden',
  high: 'high',
  href: 'href',
  hreflang: 'hrefLang',
  htmlfor: 'htmlFor',
  httpequiv: 'httpEquiv',
  'http-equiv': 'httpEquiv',
  icon: 'icon',
  id: 'id',
  innerhtml: 'innerHTML',
  inputmode: 'inputMode',
  integrity: 'integrity',
  is: 'is',
  itemid: 'itemID',
  itemprop: 'itemProp',
  itemref: 'itemRef',
  itemscope: 'itemScope',
  itemtype: 'itemType',
  keyparams: 'keyParams',
  keytype: 'keyType',
  kind: 'kind',
  label: 'label',
  lang: 'lang',
  list: 'list',
  loop: 'loop',
  low: 'low',
  manifest: 'manifest',
  marginwidth: 'marginWidth',
  marginheight: 'marginHeight',
  max: 'max',
  maxlength: 'maxLength',
  media: 'media',
  mediagroup: 'mediaGroup',
  method: 'method',
  min: 'min',
  minlength: 'minLength',
  multiple: 'multiple',
  muted: 'muted',
  name: 'name',
  nonce: 'nonce',
  novalidate: 'noValidate',
  open: 'open',
  optimum: 'optimum',
  pattern: 'pattern',
  placeholder: 'placeholder',
  playsinline: 'playsInline',
  poster: 'poster',
  preload: 'preload',
  profile: 'profile',
  radiogroup: 'radioGroup',
  readonly: 'readOnly',
  referrerpolicy: 'referrerPolicy',
  rel: 'rel',
  required: 'required',
  reversed: 'reversed',
  role: 'role',
  rows: 'rows',
  rowspan: 'rowSpan',
  sandbox: 'sandbox',
  scope: 'scope',
  scoped: 'scoped',
  scrolling: 'scrolling',
  seamless: 'seamless',
  selected: 'selected',
  shape: 'shape',
  size: 'size',
  sizes: 'sizes',
  span: 'span',
  spellcheck: 'spellCheck',
  src: 'src',
  srcdoc: 'srcDoc',
  srclang: 'srcLang',
  srcset: 'srcSet',
  start: 'start',
  step: 'step',
  style: 'style',
  summary: 'summary',
  tabindex: 'tabIndex',
  target: 'target',
  title: 'title',
  type: 'type',
  usemap: 'useMap',
  value: 'value',
  width: 'width',
  wmode: 'wmode',
  wrap: 'wrap',

  // SVG
  about: 'about',
  accentheight: 'accentHeight',
  'accent-height': 'accentHeight',
  accumulate: 'accumulate',
  additive: 'additive',
  alignmentbaseline: 'alignmentBaseline',
  'alignment-baseline': 'alignmentBaseline',
  allowreorder: 'allowReorder',
  alphabetic: 'alphabetic',
  amplitude: 'amplitude',
  arabicform: 'arabicForm',
  'arabic-form': 'arabicForm',
  ascent: 'ascent',
  attributename: 'attributeName',
  attributetype: 'attributeType',
  autoreverse: 'autoReverse',
  azimuth: 'azimuth',
  basefrequency: 'baseFrequency',
  baselineshift: 'baselineShift',
  'baseline-shift': 'baselineShift',
  baseprofile: 'baseProfile',
  bbox: 'bbox',
  begin: 'begin',
  bias: 'bias',
  by: 'by',
  calcmode: 'calcMode',
  capheight: 'capHeight',
  'cap-height': 'capHeight',
  clip: 'clip',
  clippath: 'clipPath',
  'clip-path': 'clipPath',
  clippathunits: 'clipPathUnits',
  cliprule: 'clipRule',
  'clip-rule': 'clipRule',
  color: 'color',
  colorinterpolation: 'colorInterpolation',
  'color-interpolation': 'colorInterpolation',
  colorinterpolationfilters: 'colorInterpolationFilters',
  'color-interpolation-filters': 'colorInterpolationFilters',
  colorprofile: 'colorProfile',
  'color-profile': 'colorProfile',
  colorrendering: 'colorRendering',
  'color-rendering': 'colorRendering',
  contentscripttype: 'contentScriptType',
  contentstyletype: 'contentStyleType',
  cursor: 'cursor',
  cx: 'cx',
  cy: 'cy',
  d: 'd',
  datatype: 'datatype',
  decelerate: 'decelerate',
  descent: 'descent',
  diffuseconstant: 'diffuseConstant',
  direction: 'direction',
  display: 'display',
  divisor: 'divisor',
  dominantbaseline: 'dominantBaseline',
  'dominant-baseline': 'dominantBaseline',
  dur: 'dur',
  dx: 'dx',
  dy: 'dy',
  edgemode: 'edgeMode',
  elevation: 'elevation',
  enablebackground: 'enableBackground',
  'enable-background': 'enableBackground',
  end: 'end',
  exponent: 'exponent',
  externalresourcesrequired: 'externalResourcesRequired',
  fill: 'fill',
  fillopacity: 'fillOpacity',
  'fill-opacity': 'fillOpacity',
  fillrule: 'fillRule',
  'fill-rule': 'fillRule',
  filter: 'filter',
  filterres: 'filterRes',
  filterunits: 'filterUnits',
  floodopacity: 'floodOpacity',
  'flood-opacity': 'floodOpacity',
  floodcolor: 'floodColor',
  'flood-color': 'floodColor',
  focusable: 'focusable',
  fontfamily: 'fontFamily',
  'font-family': 'fontFamily',
  fontsize: 'fontSize',
  'font-size': 'fontSize',
  fontsizeadjust: 'fontSizeAdjust',
  'font-size-adjust': 'fontSizeAdjust',
  fontstretch: 'fontStretch',
  'font-stretch': 'fontStretch',
  fontstyle: 'fontStyle',
  'font-style': 'fontStyle',
  fontvariant: 'fontVariant',
  'font-variant': 'fontVariant',
  fontweight: 'fontWeight',
  'font-weight': 'fontWeight',
  format: 'format',
  from: 'from',
  fx: 'fx',
  fy: 'fy',
  g1: 'g1',
  g2: 'g2',
  glyphname: 'glyphName',
  'glyph-name': 'glyphName',
  glyphorientationhorizontal: 'glyphOrientationHorizontal',
  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
  glyphorientationvertical: 'glyphOrientationVertical',
  'glyph-orientation-vertical': 'glyphOrientationVertical',
  glyphref: 'glyphRef',
  gradienttransform: 'gradientTransform',
  gradientunits: 'gradientUnits',
  hanging: 'hanging',
  horizadvx: 'horizAdvX',
  'horiz-adv-x': 'horizAdvX',
  horizoriginx: 'horizOriginX',
  'horiz-origin-x': 'horizOriginX',
  ideographic: 'ideographic',
  imagerendering: 'imageRendering',
  'image-rendering': 'imageRendering',
  in2: 'in2',
  'in': 'in',
  inlist: 'inlist',
  intercept: 'intercept',
  k1: 'k1',
  k2: 'k2',
  k3: 'k3',
  k4: 'k4',
  k: 'k',
  kernelmatrix: 'kernelMatrix',
  kernelunitlength: 'kernelUnitLength',
  kerning: 'kerning',
  keypoints: 'keyPoints',
  keysplines: 'keySplines',
  keytimes: 'keyTimes',
  lengthadjust: 'lengthAdjust',
  letterspacing: 'letterSpacing',
  'letter-spacing': 'letterSpacing',
  lightingcolor: 'lightingColor',
  'lighting-color': 'lightingColor',
  limitingconeangle: 'limitingConeAngle',
  local: 'local',
  markerend: 'markerEnd',
  'marker-end': 'markerEnd',
  markerheight: 'markerHeight',
  markermid: 'markerMid',
  'marker-mid': 'markerMid',
  markerstart: 'markerStart',
  'marker-start': 'markerStart',
  markerunits: 'markerUnits',
  markerwidth: 'markerWidth',
  mask: 'mask',
  maskcontentunits: 'maskContentUnits',
  maskunits: 'maskUnits',
  mathematical: 'mathematical',
  mode: 'mode',
  numoctaves: 'numOctaves',
  offset: 'offset',
  opacity: 'opacity',
  operator: 'operator',
  order: 'order',
  orient: 'orient',
  orientation: 'orientation',
  origin: 'origin',
  overflow: 'overflow',
  overlineposition: 'overlinePosition',
  'overline-position': 'overlinePosition',
  overlinethickness: 'overlineThickness',
  'overline-thickness': 'overlineThickness',
  paintorder: 'paintOrder',
  'paint-order': 'paintOrder',
  panose1: 'panose1',
  'panose-1': 'panose1',
  pathlength: 'pathLength',
  patterncontentunits: 'patternContentUnits',
  patterntransform: 'patternTransform',
  patternunits: 'patternUnits',
  pointerevents: 'pointerEvents',
  'pointer-events': 'pointerEvents',
  points: 'points',
  pointsatx: 'pointsAtX',
  pointsaty: 'pointsAtY',
  pointsatz: 'pointsAtZ',
  prefix: 'prefix',
  preservealpha: 'preserveAlpha',
  preserveaspectratio: 'preserveAspectRatio',
  primitiveunits: 'primitiveUnits',
  property: 'property',
  r: 'r',
  radius: 'radius',
  refx: 'refX',
  refy: 'refY',
  renderingintent: 'renderingIntent',
  'rendering-intent': 'renderingIntent',
  repeatcount: 'repeatCount',
  repeatdur: 'repeatDur',
  requiredextensions: 'requiredExtensions',
  requiredfeatures: 'requiredFeatures',
  resource: 'resource',
  restart: 'restart',
  result: 'result',
  results: 'results',
  rotate: 'rotate',
  rx: 'rx',
  ry: 'ry',
  scale: 'scale',
  security: 'security',
  seed: 'seed',
  shaperendering: 'shapeRendering',
  'shape-rendering': 'shapeRendering',
  slope: 'slope',
  spacing: 'spacing',
  specularconstant: 'specularConstant',
  specularexponent: 'specularExponent',
  speed: 'speed',
  spreadmethod: 'spreadMethod',
  startoffset: 'startOffset',
  stddeviation: 'stdDeviation',
  stemh: 'stemh',
  stemv: 'stemv',
  stitchtiles: 'stitchTiles',
  stopcolor: 'stopColor',
  'stop-color': 'stopColor',
  stopopacity: 'stopOpacity',
  'stop-opacity': 'stopOpacity',
  strikethroughposition: 'strikethroughPosition',
  'strikethrough-position': 'strikethroughPosition',
  strikethroughthickness: 'strikethroughThickness',
  'strikethrough-thickness': 'strikethroughThickness',
  string: 'string',
  stroke: 'stroke',
  strokedasharray: 'strokeDasharray',
  'stroke-dasharray': 'strokeDasharray',
  strokedashoffset: 'strokeDashoffset',
  'stroke-dashoffset': 'strokeDashoffset',
  strokelinecap: 'strokeLinecap',
  'stroke-linecap': 'strokeLinecap',
  strokelinejoin: 'strokeLinejoin',
  'stroke-linejoin': 'strokeLinejoin',
  strokemiterlimit: 'strokeMiterlimit',
  'stroke-miterlimit': 'strokeMiterlimit',
  strokewidth: 'strokeWidth',
  'stroke-width': 'strokeWidth',
  strokeopacity: 'strokeOpacity',
  'stroke-opacity': 'strokeOpacity',
  suppresscontenteditablewarning: 'suppressContentEditableWarning',
  suppresshydrationwarning: 'suppressHydrationWarning',
  surfacescale: 'surfaceScale',
  systemlanguage: 'systemLanguage',
  tablevalues: 'tableValues',
  targetx: 'targetX',
  targety: 'targetY',
  textanchor: 'textAnchor',
  'text-anchor': 'textAnchor',
  textdecoration: 'textDecoration',
  'text-decoration': 'textDecoration',
  textlength: 'textLength',
  textrendering: 'textRendering',
  'text-rendering': 'textRendering',
  to: 'to',
  transform: 'transform',
  'typeof': 'typeof',
  u1: 'u1',
  u2: 'u2',
  underlineposition: 'underlinePosition',
  'underline-position': 'underlinePosition',
  underlinethickness: 'underlineThickness',
  'underline-thickness': 'underlineThickness',
  unicode: 'unicode',
  unicodebidi: 'unicodeBidi',
  'unicode-bidi': 'unicodeBidi',
  unicoderange: 'unicodeRange',
  'unicode-range': 'unicodeRange',
  unitsperem: 'unitsPerEm',
  'units-per-em': 'unitsPerEm',
  unselectable: 'unselectable',
  valphabetic: 'vAlphabetic',
  'v-alphabetic': 'vAlphabetic',
  values: 'values',
  vectoreffect: 'vectorEffect',
  'vector-effect': 'vectorEffect',
  version: 'version',
  vertadvy: 'vertAdvY',
  'vert-adv-y': 'vertAdvY',
  vertoriginx: 'vertOriginX',
  'vert-origin-x': 'vertOriginX',
  vertoriginy: 'vertOriginY',
  'vert-origin-y': 'vertOriginY',
  vhanging: 'vHanging',
  'v-hanging': 'vHanging',
  videographic: 'vIdeographic',
  'v-ideographic': 'vIdeographic',
  viewbox: 'viewBox',
  viewtarget: 'viewTarget',
  visibility: 'visibility',
  vmathematical: 'vMathematical',
  'v-mathematical': 'vMathematical',
  vocab: 'vocab',
  widths: 'widths',
  wordspacing: 'wordSpacing',
  'word-spacing': 'wordSpacing',
  writingmode: 'writingMode',
  'writing-mode': 'writingMode',
  x1: 'x1',
  x2: 'x2',
  x: 'x',
  xchannelselector: 'xChannelSelector',
  xheight: 'xHeight',
  'x-height': 'xHeight',
  xlinkactuate: 'xlinkActuate',
  'xlink:actuate': 'xlinkActuate',
  xlinkarcrole: 'xlinkArcrole',
  'xlink:arcrole': 'xlinkArcrole',
  xlinkhref: 'xlinkHref',
  'xlink:href': 'xlinkHref',
  xlinkrole: 'xlinkRole',
  'xlink:role': 'xlinkRole',
  xlinkshow: 'xlinkShow',
  'xlink:show': 'xlinkShow',
  xlinktitle: 'xlinkTitle',
  'xlink:title': 'xlinkTitle',
  xlinktype: 'xlinkType',
  'xlink:type': 'xlinkType',
  xmlbase: 'xmlBase',
  'xml:base': 'xmlBase',
  xmllang: 'xmlLang',
  'xml:lang': 'xmlLang',
  xmlns: 'xmlns',
  'xml:space': 'xmlSpace',
  xmlnsxlink: 'xmlnsXlink',
  'xmlns:xlink': 'xmlnsXlink',
  xmlspace: 'xmlSpace',
  y1: 'y1',
  y2: 'y2',
  y: 'y',
  ychannelselector: 'yChannelSelector',
  z: 'z',
  zoomandpan: 'zoomAndPan'
};

function getStackAddendum$2() {
  var stack = ReactDebugCurrentFrame.getStackAddendum();
  return stack != null ? stack : '';
}

{
  var warnedProperties$1 = {};
  var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
  var EVENT_NAME_REGEX = /^on[A-Z]/;
  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

  var validateProperty$1 = function (tagName, name, value) {
    if (hasOwnProperty$2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
      return true;
    }

    if (registrationNameModules.hasOwnProperty(name)) {
      return true;
    }

    if (plugins.length === 0 && EVENT_NAME_REGEX.test(name)) {
      // If no event plugins have been injected, we might be in a server environment.
      // Don't check events in this case.
      return true;
    }

    var lowerCasedName = name.toLowerCase();
    var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

    if (registrationName != null) {
      warning_1$1(false, 'Invalid event handler property `%s`. Did you mean `%s`?%s', name, registrationName, getStackAddendum$2());
      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName.indexOf('on') === 0 && lowerCasedName.length > 2) {
      warning_1$1(false, 'Unknown event handler property `%s`. It will be ignored.%s', name, getStackAddendum$2());
      warnedProperties$1[name] = true;
      return true;
    }

    // Let the ARIA attribute hook validate ARIA attributes
    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
      return true;
    }

    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
      warning_1$1(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'innerhtml') {
      warning_1$1(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'aria') {
      warning_1$1(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
      warning_1$1(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.%s', typeof value, getStackAddendum$2());
      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'number' && isNaN(value)) {
      warning_1$1(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.%s', name, getStackAddendum$2());
      warnedProperties$1[name] = true;
      return true;
    }

    var isReserved = isReservedProp(name);

    // Known attributes should match the casing specified in the property config.
    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      var standardName = possibleStandardNames[lowerCasedName];
      if (standardName !== name) {
        warning_1$1(false, 'Invalid DOM property `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum$2());
        warnedProperties$1[name] = true;
        return true;
      }
    } else if (!isReserved && name !== lowerCasedName) {
      // Unknown attributes should have lowercase casing since that's how they
      // will be cased anyway with server rendering.
      warning_1$1(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.%s', name, lowerCasedName, getStackAddendum$2());
      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'boolean' && !shouldAttributeAcceptBooleanValue(name)) {
      if (value) {
        warning_1$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.%s', value, name, name, value, name, getStackAddendum$2());
      } else {
        warning_1$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.%s', value, name, name, value, name, name, name, getStackAddendum$2());
      }
      warnedProperties$1[name] = true;
      return true;
    }

    // Now that we've validated casing, do not validate
    // data types for reserved props
    if (isReserved) {
      return true;
    }

    // Warn when a known attribute is a bad type
    if (!shouldSetAttribute(name, value)) {
      warnedProperties$1[name] = true;
      return false;
    }

    return true;
  };
}

var warnUnknownProperties = function (type, props) {
  var unknownProps = [];
  for (var key in props) {
    var isValid = validateProperty$1(type, key, props[key]);
    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');
  if (unknownProps.length === 1) {
    warning_1$1(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum$2());
  } else if (unknownProps.length > 1) {
    warning_1$1(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum$2());
  }
};

function validateProperties$2(type, props) {
  if (isCustomComponent(type, props)) {
    return;
  }
  warnUnknownProperties(type, props);
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var getCurrentFiberOwnerName$1 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
var getCurrentFiberStackAddendum$2 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;

var didWarnInvalidHydration = false;
var didWarnShadyDOM = false;

var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
var AUTOFOCUS = 'autoFocus';
var CHILDREN = 'children';
var STYLE = 'style';
var HTML = '__html';

var HTML_NAMESPACE = Namespaces.html;


var getStack = emptyFunction_1.thatReturns('');

{
  getStack = getCurrentFiberStackAddendum$2;

  var warnedUnknownTags = {
    // Chrome is the only major browser not shipping <time>. But as of July
    // 2017 it intends to ship it due to widespread usage. We intentionally
    // *don't* warn for <time> even if it's unrecognized by Chrome because
    // it soon will be, and many apps have been using it anyway.
    time: true,
    // There are working polyfills for <dialog>. Let people use it.
    dialog: true
  };

  var validatePropertiesInDevelopment = function (type, props) {
    validateProperties(type, props);
    validateProperties$1(type, props);
    validateProperties$2(type, props);
  };

  // HTML parsing normalizes CR and CRLF to LF.
  // It also can turn \u0000 into \uFFFD inside attributes.
  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
  // If we have a mismatch, it might be caused by that.
  // We will still patch up in this case but not fire the warning.
  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

  var normalizeMarkupForTextOrAttribute = function (markup) {
    var markupString = typeof markup === 'string' ? markup : '' + markup;
    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
  };

  var warnForTextDifference = function (serverText, clientText) {
    if (didWarnInvalidHydration) {
      return;
    }
    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
    if (normalizedServerText === normalizedClientText) {
      return;
    }
    didWarnInvalidHydration = true;
    warning_1$1(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
  };

  var warnForPropDifference = function (propName, serverValue, clientValue) {
    if (didWarnInvalidHydration) {
      return;
    }
    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
    if (normalizedServerValue === normalizedClientValue) {
      return;
    }
    didWarnInvalidHydration = true;
    warning_1$1(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
  };

  var warnForExtraAttributes = function (attributeNames) {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    var names = [];
    attributeNames.forEach(function (name) {
      names.push(name);
    });
    warning_1$1(false, 'Extra attributes from the server: %s', names);
  };

  var warnForInvalidEventListener = function (registrationName, listener) {
    if (listener === false) {
      warning_1$1(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.%s', registrationName, registrationName, registrationName, getCurrentFiberStackAddendum$2());
    } else {
      warning_1$1(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.%s', registrationName, typeof listener, getCurrentFiberStackAddendum$2());
    }
  };

  // Parse the HTML and read it back to normalize the HTML string so that it
  // can be used for comparison.
  var normalizeHTML = function (parent, html) {
    // We could have created a separate document here to avoid
    // re-initializing custom elements if they exist. But this breaks
    // how <noscript> is being handled. So we use the same document.
    // See the discussion in https://github.com/facebook/react/pull/11157.
    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
    testElement.innerHTML = html;
    return testElement.innerHTML;
  };
}

function ensureListeningTo(rootContainerElement, registrationName) {
  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
  listenTo(registrationName, doc);
}

function getOwnerDocumentFromRootContainer(rootContainerElement) {
  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trapClickOnNonInteractiveElement(node) {
  // Mobile Safari does not fire properly bubble click events on
  // non-interactive elements, which means delegated click listeners do not
  // fire. The workaround for this bug involves attaching an empty click
  // listener on the target node.
  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
  // Just set it using the onclick property so that we don't have to manage any
  // bookkeeping for it. Not sure if we need to clear it when the listener is
  // removed.
  // TODO: Only do this for the relevant Safaris maybe?
  node.onclick = emptyFunction_1;
}

function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
  for (var propKey in nextProps) {
    if (!nextProps.hasOwnProperty(propKey)) {
      continue;
    }
    var nextProp = nextProps[propKey];
    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }
      // Relies on `updateStylesByID` not mutating `styleUpdates`.
      setValueForStyles(domElement, nextProp, getStack);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML] : undefined;
      if (nextHtml != null) {
        setInnerHTML(domElement, nextHtml);
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string') {
        // Avoid setting initial textContent when the text is empty. In IE11 setting
        // textContent on a <textarea> will cause the placeholder to not
        // show within the <textarea> until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        var canSetTextContent = tag !== 'textarea' || nextProp !== '';
        if (canSetTextContent) {
          setTextContent$1(domElement, nextProp);
        }
      } else if (typeof nextProp === 'number') {
        setTextContent$1(domElement, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (propKey === AUTOFOCUS) {
      // We polyfill it separately on the client during commit.
      // We blacklist it here rather than in the property list because we emit it in SSR.
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if (isCustomComponentTag) {
      setValueForAttribute(domElement, propKey, nextProp);
    } else if (nextProp != null) {
      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertently setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      setValueForProperty(domElement, propKey, nextProp);
    }
  }
}

function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
  // TODO: Handle wasCustomComponentTag
  for (var i = 0; i < updatePayload.length; i += 2) {
    var propKey = updatePayload[i];
    var propValue = updatePayload[i + 1];
    if (propKey === STYLE) {
      setValueForStyles(domElement, propValue, getStack);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      setInnerHTML(domElement, propValue);
    } else if (propKey === CHILDREN) {
      setTextContent$1(domElement, propValue);
    } else if (isCustomComponentTag) {
      if (propValue != null) {
        setValueForAttribute(domElement, propKey, propValue);
      } else {
        deleteValueForAttribute(domElement, propKey);
      }
    } else if (propValue != null) {
      setValueForProperty(domElement, propKey, propValue);
    } else {
      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertently setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      deleteValueForProperty(domElement, propKey);
    }
  }
}

function createElement$1(type, props, rootContainerElement, parentNamespace) {
  // We create tags in the namespace of their parent container, except HTML
  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
  var domElement;
  var namespaceURI = parentNamespace;
  if (namespaceURI === HTML_NAMESPACE) {
    namespaceURI = getIntrinsicNamespace(type);
  }
  if (namespaceURI === HTML_NAMESPACE) {
    {
      var isCustomComponentTag = isCustomComponent(type, props);
      // Should this check be gated by parent namespace? Not sure we want to
      // allow <SVG> or <mATH>.
      warning_1$1(isCustomComponentTag || type === type.toLowerCase(), '<%s /> is using uppercase HTML. Always use lowercase HTML tags ' + 'in React.', type);
    }

    if (type === 'script') {
      // Create the script via .innerHTML so its "parser-inserted" flag is
      // set to true and it does not execute
      var div = ownerDocument.createElement('div');
      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
      // This is guaranteed to yield a script element.
      var firstChild = div.firstChild;
      domElement = div.removeChild(firstChild);
    } else if (typeof props.is === 'string') {
      // $FlowIssue `createElement` should be updated for Web Components
      domElement = ownerDocument.createElement(type, { is: props.is });
    } else {
      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
      // See discussion in https://github.com/facebook/react/pull/6896
      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
      domElement = ownerDocument.createElement(type);
    }
  } else {
    domElement = ownerDocument.createElementNS(namespaceURI, type);
  }

  {
    if (namespaceURI === HTML_NAMESPACE) {
      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
        warnedUnknownTags[type] = true;
        warning_1$1(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
      }
    }
  }

  return domElement;
}

function createTextNode$1(text, rootContainerElement) {
  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
}

function setInitialProperties$1(domElement, tag, rawProps, rootContainerElement) {
  var isCustomComponentTag = isCustomComponent(tag, rawProps);
  {
    validatePropertiesInDevelopment(tag, rawProps);
    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
      warning_1$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName$1() || 'A component');
      didWarnShadyDOM = true;
    }
  }

  // TODO: Make sure that we check isMounted before firing any of these events.
  var props;
  switch (tag) {
    case 'iframe':
    case 'object':
      trapBubbledEvent('topLoad', 'load', domElement);
      props = rawProps;
      break;
    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          trapBubbledEvent(event, mediaEvents[event], domElement);
        }
      }
      props = rawProps;
      break;
    case 'source':
      trapBubbledEvent('topError', 'error', domElement);
      props = rawProps;
      break;
    case 'img':
    case 'image':
      trapBubbledEvent('topError', 'error', domElement);
      trapBubbledEvent('topLoad', 'load', domElement);
      props = rawProps;
      break;
    case 'form':
      trapBubbledEvent('topReset', 'reset', domElement);
      trapBubbledEvent('topSubmit', 'submit', domElement);
      props = rawProps;
      break;
    case 'details':
      trapBubbledEvent('topToggle', 'toggle', domElement);
      props = rawProps;
      break;
    case 'input':
      initWrapperState(domElement, rawProps);
      props = getHostProps(domElement, rawProps);
      trapBubbledEvent('topInvalid', 'invalid', domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'option':
      validateProps(domElement, rawProps);
      props = getHostProps$1(domElement, rawProps);
      break;
    case 'select':
      initWrapperState$1(domElement, rawProps);
      props = getHostProps$2(domElement, rawProps);
      trapBubbledEvent('topInvalid', 'invalid', domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      props = getHostProps$3(domElement, rawProps);
      trapBubbledEvent('topInvalid', 'invalid', domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    default:
      props = rawProps;
  }

  assertValidProps(tag, props, getStack);

  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps);
      break;
    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement, rawProps);
      break;
    case 'option':
      postMountWrapper$1(domElement, rawProps);
      break;
    case 'select':
      postMountWrapper$2(domElement, rawProps);
      break;
    default:
      if (typeof props.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }
}

// Calculate the diff between the two objects.
function diffProperties$1(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
  {
    validatePropertiesInDevelopment(tag, nextRawProps);
  }

  var updatePayload = null;

  var lastProps;
  var nextProps;
  switch (tag) {
    case 'input':
      lastProps = getHostProps(domElement, lastRawProps);
      nextProps = getHostProps(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'option':
      lastProps = getHostProps$1(domElement, lastRawProps);
      nextProps = getHostProps$1(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'select':
      lastProps = getHostProps$2(domElement, lastRawProps);
      nextProps = getHostProps$2(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'textarea':
      lastProps = getHostProps$3(domElement, lastRawProps);
      nextProps = getHostProps$3(domElement, nextRawProps);
      updatePayload = [];
      break;
    default:
      lastProps = lastRawProps;
      nextProps = nextRawProps;
      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }

  assertValidProps(tag, nextProps, getStack);

  var propKey;
  var styleName;
  var styleUpdates = null;
  for (propKey in lastProps) {
    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
      continue;
    }
    if (propKey === STYLE) {
      var lastStyle = lastProps[propKey];
      for (styleName in lastStyle) {
        if (lastStyle.hasOwnProperty(styleName)) {
          if (!styleUpdates) {
            styleUpdates = {};
          }
          styleUpdates[styleName] = '';
        }
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {
      // Noop. This is handled by the clear text mechanism.
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (propKey === AUTOFOCUS) {
      // Noop. It doesn't work on updates anyway.
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      // This is a special case. If any listener updates we need to ensure
      // that the "current" fiber pointer gets updated so we need a commit
      // to update this element.
      if (!updatePayload) {
        updatePayload = [];
      }
    } else {
      // For all other deleted properties we add it to the queue. We use
      // the whitelist in the commit phase instead.
      (updatePayload = updatePayload || []).push(propKey, null);
    }
  }
  for (propKey in nextProps) {
    var nextProp = nextProps[propKey];
    var lastProp = lastProps != null ? lastProps[propKey] : undefined;
    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
      continue;
    }
    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }
      if (lastProp) {
        // Unset styles on `lastProp` but not on `nextProp`.
        for (styleName in lastProp) {
          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
            if (!styleUpdates) {
              styleUpdates = {};
            }
            styleUpdates[styleName] = '';
          }
        }
        // Update styles that changed since `lastProp`.
        for (styleName in nextProp) {
          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
            if (!styleUpdates) {
              styleUpdates = {};
            }
            styleUpdates[styleName] = nextProp[styleName];
          }
        }
      } else {
        // Relies on `updateStylesByID` not mutating `styleUpdates`.
        if (!styleUpdates) {
          if (!updatePayload) {
            updatePayload = [];
          }
          updatePayload.push(propKey, styleUpdates);
        }
        styleUpdates = nextProp;
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML] : undefined;
      var lastHtml = lastProp ? lastProp[HTML] : undefined;
      if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
        }
      } else {
        // TODO: It might be too late to clear this if we have children
        // inserted already.
      }
    } else if (propKey === CHILDREN) {
      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        // We eagerly listen to this even though we haven't committed yet.
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
      if (!updatePayload && lastProp !== nextProp) {
        // This is a special case. If any listener updates we need to ensure
        // that the "current" props pointer gets updated so we need a commit
        // to update this element.
        updatePayload = [];
      }
    } else {
      // For any other property we always add it to the queue and then we
      // filter it out using the whitelist during the commit.
      (updatePayload = updatePayload || []).push(propKey, nextProp);
    }
  }
  if (styleUpdates) {
    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
  }
  return updatePayload;
}

// Apply the diff.
function updateProperties$1(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
  var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
  // Apply the diff.
  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);

  // TODO: Ensure that an update gets scheduled if any of the special props
  // changed.
  switch (tag) {
    case 'input':
      // Update the wrapper around inputs *after* updating props. This has to
      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
      // raise warnings and prevent the new value from being assigned.
      updateWrapper(domElement, nextRawProps);

      // We also check that we haven't missed a value update, such as a
      // Radio group shifting the checked value to another named radio input.
      updateValueIfChanged(domElement);
      break;
    case 'textarea':
      updateWrapper$1(domElement, nextRawProps);
      break;
    case 'select':
      // <select> value update needs to occur after <option> children
      // reconciliation
      postUpdateWrapper(domElement, nextRawProps);
      break;
  }
}

function diffHydratedProperties$1(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
  {
    var suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
    var isCustomComponentTag = isCustomComponent(tag, rawProps);
    validatePropertiesInDevelopment(tag, rawProps);
    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
      warning_1$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName$1() || 'A component');
      didWarnShadyDOM = true;
    }
  }

  // TODO: Make sure that we check isMounted before firing any of these events.
  switch (tag) {
    case 'iframe':
    case 'object':
      trapBubbledEvent('topLoad', 'load', domElement);
      break;
    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          trapBubbledEvent(event, mediaEvents[event], domElement);
        }
      }
      break;
    case 'source':
      trapBubbledEvent('topError', 'error', domElement);
      break;
    case 'img':
    case 'image':
      trapBubbledEvent('topError', 'error', domElement);
      trapBubbledEvent('topLoad', 'load', domElement);
      break;
    case 'form':
      trapBubbledEvent('topReset', 'reset', domElement);
      trapBubbledEvent('topSubmit', 'submit', domElement);
      break;
    case 'details':
      trapBubbledEvent('topToggle', 'toggle', domElement);
      break;
    case 'input':
      initWrapperState(domElement, rawProps);
      trapBubbledEvent('topInvalid', 'invalid', domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'option':
      validateProps(domElement, rawProps);
      break;
    case 'select':
      initWrapperState$1(domElement, rawProps);
      trapBubbledEvent('topInvalid', 'invalid', domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      trapBubbledEvent('topInvalid', 'invalid', domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
  }

  assertValidProps(tag, rawProps, getStack);

  {
    var extraAttributeNames = new Set();
    var attributes = domElement.attributes;
    for (var i = 0; i < attributes.length; i++) {
      var name = attributes[i].name.toLowerCase();
      switch (name) {
        // Built-in SSR attribute is whitelisted
        case 'data-reactroot':
          break;
        // Controlled attributes are not validated
        // TODO: Only ignore them on controlled tags.
        case 'value':
          break;
        case 'checked':
          break;
        case 'selected':
          break;
        default:
          // Intentionally use the original name.
          // See discussion in https://github.com/facebook/react/pull/10676.
          extraAttributeNames.add(attributes[i].name);
      }
    }
  }

  var updatePayload = null;
  for (var propKey in rawProps) {
    if (!rawProps.hasOwnProperty(propKey)) {
      continue;
    }
    var nextProp = rawProps[propKey];
    if (propKey === CHILDREN) {
      // For text content children we compare against textContent. This
      // might match additional HTML that is hidden when we read it using
      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
      // satisfies our requirement. Our requirement is not to produce perfect
      // HTML and attributes. Ideally we should preserve structure but it's
      // ok not to if the visible content is still enough to indicate what
      // even listeners these nodes might be wired up to.
      // TODO: Warn if there is more than a single textNode as a child.
      // TODO: Should we use domElement.firstChild.nodeValue to compare?
      if (typeof nextProp === 'string') {
        if (domElement.textContent !== nextProp) {
          if (true && !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }
          updatePayload = [CHILDREN, nextProp];
        }
      } else if (typeof nextProp === 'number') {
        if (domElement.textContent !== '' + nextProp) {
          if (true && !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }
          updatePayload = [CHILDREN, '' + nextProp];
        }
      }
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
    } else {
      // Validate that the properties correspond to their expected values.
      var serverValue;
      var propertyInfo;
      if (suppressHydrationWarning) {
        // Don't bother comparing. We're ignoring all these warnings.
      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 ||
      // Controlled attributes are not validated
      // TODO: Only ignore them on controlled tags.
      propKey === 'value' || propKey === 'checked' || propKey === 'selected') {
        // Noop
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var rawHtml = nextProp ? nextProp[HTML] || '' : '';
        var serverHTML = domElement.innerHTML;
        var expectedHTML = normalizeHTML(domElement, rawHtml);
        if (expectedHTML !== serverHTML) {
          warnForPropDifference(propKey, serverHTML, expectedHTML);
        }
      } else if (propKey === STYLE) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames['delete'](propKey);
        var expectedStyle = createDangerousStringForStyles(nextProp);
        serverValue = domElement.getAttribute('style');
        if (expectedStyle !== serverValue) {
          warnForPropDifference(propKey, serverValue, expectedStyle);
        }
      } else if (isCustomComponentTag) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames['delete'](propKey.toLowerCase());
        serverValue = getValueForAttribute(domElement, propKey, nextProp);

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      } else if (shouldSetAttribute(propKey, nextProp)) {
        if (propertyInfo = getPropertyInfo(propKey)) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames['delete'](propertyInfo.attributeName);
          serverValue = getValueForProperty(domElement, propKey, nextProp);
        } else {
          var ownNamespace = parentNamespace;
          if (ownNamespace === HTML_NAMESPACE) {
            ownNamespace = getIntrinsicNamespace(tag);
          }
          if (ownNamespace === HTML_NAMESPACE) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames['delete'](propKey.toLowerCase());
          } else {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames['delete'](propKey);
          }
          serverValue = getValueForAttribute(domElement, propKey, nextProp);
        }

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      }
    }
  }

  {
    // $FlowFixMe - Should be inferred as not undefined.
    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
      // $FlowFixMe - Should be inferred as not undefined.
      warnForExtraAttributes(extraAttributeNames);
    }
  }

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps);
      break;
    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement, rawProps);
      break;
    case 'select':
    case 'option':
      // For input and textarea we current always set the value property at
      // post mount to force it to diverge from attributes. However, for
      // option and select we don't quite do the same thing and select
      // is not resilient to the DOM state changing so we don't do that here.
      // TODO: Consider not doing this for input and textarea.
      break;
    default:
      if (typeof rawProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }

  return updatePayload;
}

function diffHydratedText$1(textNode, text) {
  var isDifferent = textNode.nodeValue !== text;
  return isDifferent;
}

function warnForUnmatchedText$1(textNode, text) {
  {
    warnForTextDifference(textNode.nodeValue, text);
  }
}

function warnForDeletedHydratableElement$1(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warning_1$1(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
  }
}

function warnForDeletedHydratableText$1(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warning_1$1(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
  }
}

function warnForInsertedHydratedElement$1(parentNode, tag, props) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warning_1$1(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
  }
}

function warnForInsertedHydratedText$1(parentNode, text) {
  {
    if (text === '') {
      // We expect to insert empty text nodes since they're not represented in
      // the HTML.
      // TODO: Remove this special case if we can just avoid inserting empty
      // text nodes.
      return;
    }
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warning_1$1(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
  }
}

function restoreControlledState(domElement, tag, props) {
  switch (tag) {
    case 'input':
      restoreControlledState$1(domElement, props);
      return;
    case 'textarea':
      restoreControlledState$3(domElement, props);
      return;
    case 'select':
      restoreControlledState$2(domElement, props);
      return;
  }
}

var ReactDOMFiberComponent = Object.freeze({
	createElement: createElement$1,
	createTextNode: createTextNode$1,
	setInitialProperties: setInitialProperties$1,
	diffProperties: diffProperties$1,
	updateProperties: updateProperties$1,
	diffHydratedProperties: diffHydratedProperties$1,
	diffHydratedText: diffHydratedText$1,
	warnForUnmatchedText: warnForUnmatchedText$1,
	warnForDeletedHydratableElement: warnForDeletedHydratableElement$1,
	warnForDeletedHydratableText: warnForDeletedHydratableText$1,
	warnForInsertedHydratedElement: warnForInsertedHydratedElement$1,
	warnForInsertedHydratedText: warnForInsertedHydratedText$1,
	restoreControlledState: restoreControlledState
});

// TODO: direct imports like some-package/src/* are bad. Fix me.
var getCurrentFiberStackAddendum$6 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;

var validateDOMNesting = emptyFunction_1;

{
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo$1 = function (oldInfo, tag, instance) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childText, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      warning_1$1(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null');
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var invalidParentOrAncestor = invalidParent || invalidAncestor;
    if (!invalidParentOrAncestor) {
      return;
    }

    var ancestorTag = invalidParentOrAncestor.tag;
    var addendum = getCurrentFiberStackAddendum$6();

    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
    if (didWarn[warnKey]) {
      return;
    }
    didWarn[warnKey] = true;

    var tagDisplayName = childTag;
    var whitespaceInfo = '';
    if (childTag === '#text') {
      if (/\S/.test(childText)) {
        tagDisplayName = 'Text nodes';
      } else {
        tagDisplayName = 'Whitespace text nodes';
        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
      }
    } else {
      tagDisplayName = '<' + childTag + '>';
    }

    if (invalidParent) {
      var info = '';
      if (ancestorTag === 'table' && childTag === 'tr') {
        info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
      }
      warning_1$1(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
    } else {
      warning_1$1(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
    }
  };

  // TODO: turn this into a named export
  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo$1;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

var validateDOMNesting$1 = validateDOMNesting;

// TODO: direct imports like some-package/src/* are bad. Fix me.
var createElement = createElement$1;
var createTextNode = createTextNode$1;
var setInitialProperties = setInitialProperties$1;
var diffProperties = diffProperties$1;
var updateProperties = updateProperties$1;
var diffHydratedProperties = diffHydratedProperties$1;
var diffHydratedText = diffHydratedText$1;
var warnForUnmatchedText = warnForUnmatchedText$1;
var warnForDeletedHydratableElement = warnForDeletedHydratableElement$1;
var warnForDeletedHydratableText = warnForDeletedHydratableText$1;
var warnForInsertedHydratedElement = warnForInsertedHydratedElement$1;
var warnForInsertedHydratedText = warnForInsertedHydratedText$1;
var updatedAncestorInfo = validateDOMNesting$1.updatedAncestorInfo;
var precacheFiberNode = precacheFiberNode$1;
var updateFiberProps = updateFiberProps$1;


{
  var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
  if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
    warning_1$1(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. http://fb.me/react-polyfills');
  }
}

injection$3.injectFiberControlledHostComponent(ReactDOMFiberComponent);

var eventsEnabled = null;
var selectionInformation = null;

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
}

function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOCUMENT_NODE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function shouldHydrateDueToLegacyHeuristic(container) {
  var rootElement = getReactRootElementInContainer(container);
  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
}

function shouldAutoFocusHostComponent(type, props) {
  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      return !!props.autoFocus;
  }
  return false;
}

var DOMRenderer = reactReconciler({
  getRootHostContext: function (rootContainerInstance) {
    var type = void 0;
    var namespace = void 0;
    var nodeType = rootContainerInstance.nodeType;
    switch (nodeType) {
      case DOCUMENT_NODE:
      case DOCUMENT_FRAGMENT_NODE:
        {
          type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
          var root = rootContainerInstance.documentElement;
          namespace = root ? root.namespaceURI : getChildNamespace(null, '');
          break;
        }
      default:
        {
          var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
          var ownNamespace = container.namespaceURI || null;
          type = container.tagName;
          namespace = getChildNamespace(ownNamespace, type);
          break;
        }
    }
    {
      var validatedTag = type.toLowerCase();
      var _ancestorInfo = updatedAncestorInfo(null, validatedTag, null);
      return { namespace: namespace, ancestorInfo: _ancestorInfo };
    }
    return namespace;
  },
  getChildHostContext: function (parentHostContext, type) {
    {
      var parentHostContextDev = parentHostContext;
      var _namespace = getChildNamespace(parentHostContextDev.namespace, type);
      var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type, null);
      return { namespace: _namespace, ancestorInfo: _ancestorInfo2 };
    }
    var parentNamespace = parentHostContext;
    return getChildNamespace(parentNamespace, type);
  },
  getPublicInstance: function (instance) {
    return instance;
  },
  prepareForCommit: function () {
    eventsEnabled = isEnabled();
    selectionInformation = getSelectionInformation();
    setEnabled(false);
  },
  resetAfterCommit: function () {
    restoreSelection(selectionInformation);
    selectionInformation = null;
    setEnabled(eventsEnabled);
    eventsEnabled = null;
  },
  createInstance: function (type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
    var parentNamespace = void 0;
    {
      // TODO: take namespace into account when validating.
      var hostContextDev = hostContext;
      validateDOMNesting$1(type, null, hostContextDev.ancestorInfo);
      if (typeof props.children === 'string' || typeof props.children === 'number') {
        var string = '' + props.children;
        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);
        validateDOMNesting$1(null, string, ownAncestorInfo);
      }
      parentNamespace = hostContextDev.namespace;
    }
    var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
    precacheFiberNode(internalInstanceHandle, domElement);
    updateFiberProps(domElement, props);
    return domElement;
  },
  appendInitialChild: function (parentInstance, child) {
    parentInstance.appendChild(child);
  },
  finalizeInitialChildren: function (domElement, type, props, rootContainerInstance) {
    setInitialProperties(domElement, type, props, rootContainerInstance);
    return shouldAutoFocusHostComponent(type, props);
  },
  prepareUpdate: function (domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
    {
      var hostContextDev = hostContext;
      if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
        var string = '' + newProps.children;
        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);
        validateDOMNesting$1(null, string, ownAncestorInfo);
      }
    }
    return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
  },
  shouldSetTextContent: function (type, props) {
    return type === 'textarea' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && typeof props.dangerouslySetInnerHTML.__html === 'string';
  },
  shouldDeprioritizeSubtree: function (type, props) {
    return !!props.hidden;
  },
  createTextInstance: function (text, rootContainerInstance, hostContext, internalInstanceHandle) {
    {
      var hostContextDev = hostContext;
      validateDOMNesting$1(null, text, hostContextDev.ancestorInfo);
    }
    var textNode = createTextNode(text, rootContainerInstance);
    precacheFiberNode(internalInstanceHandle, textNode);
    return textNode;
  },


  now: now,

  mutation: {
    commitMount: function (domElement, type, newProps, internalInstanceHandle) {
      domElement.focus();
    },
    commitUpdate: function (domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
      // Update the props handle so that we know which props are the ones with
      // with current event handlers.
      updateFiberProps(domElement, newProps);
      // Apply the diff to the DOM node.
      updateProperties(domElement, updatePayload, type, oldProps, newProps);
    },
    resetTextContent: function (domElement) {
      domElement.textContent = '';
    },
    commitTextUpdate: function (textInstance, oldText, newText) {
      textInstance.nodeValue = newText;
    },
    appendChild: function (parentInstance, child) {
      parentInstance.appendChild(child);
    },
    appendChildToContainer: function (container, child) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.insertBefore(child, container);
      } else {
        container.appendChild(child);
      }
    },
    insertBefore: function (parentInstance, child, beforeChild) {
      parentInstance.insertBefore(child, beforeChild);
    },
    insertInContainerBefore: function (container, child, beforeChild) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.insertBefore(child, beforeChild);
      } else {
        container.insertBefore(child, beforeChild);
      }
    },
    removeChild: function (parentInstance, child) {
      parentInstance.removeChild(child);
    },
    removeChildFromContainer: function (container, child) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.removeChild(child);
      } else {
        container.removeChild(child);
      }
    }
  },

  hydration: {
    canHydrateInstance: function (instance, type, props) {
      if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
        return null;
      }
      // This has now been refined to an element node.
      return instance;
    },
    canHydrateTextInstance: function (instance, text) {
      if (text === '' || instance.nodeType !== TEXT_NODE) {
        // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
      }
      // This has now been refined to a text node.
      return instance;
    },
    getNextHydratableSibling: function (instance) {
      var node = instance.nextSibling;
      // Skip non-hydratable nodes.
      while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE) {
        node = node.nextSibling;
      }
      return node;
    },
    getFirstHydratableChild: function (parentInstance) {
      var next = parentInstance.firstChild;
      // Skip non-hydratable nodes.
      while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE) {
        next = next.nextSibling;
      }
      return next;
    },
    hydrateInstance: function (instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, instance);
      // TODO: Possibly defer this until the commit phase where all the events
      // get attached.
      updateFiberProps(instance, props);
      var parentNamespace = void 0;
      {
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
      }
      return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
    },
    hydrateTextInstance: function (textInstance, text, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, textInstance);
      return diffHydratedText(textInstance, text);
    },
    didNotMatchHydratedContainerTextInstance: function (parentContainer, textInstance, text) {
      {
        warnForUnmatchedText(textInstance, text);
      }
    },
    didNotMatchHydratedTextInstance: function (parentType, parentProps, parentInstance, textInstance, text) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForUnmatchedText(textInstance, text);
      }
    },
    didNotHydrateContainerInstance: function (parentContainer, instance) {
      {
        if (instance.nodeType === 1) {
          warnForDeletedHydratableElement(parentContainer, instance);
        } else {
          warnForDeletedHydratableText(parentContainer, instance);
        }
      }
    },
    didNotHydrateInstance: function (parentType, parentProps, parentInstance, instance) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        if (instance.nodeType === 1) {
          warnForDeletedHydratableElement(parentInstance, instance);
        } else {
          warnForDeletedHydratableText(parentInstance, instance);
        }
      }
    },
    didNotFindHydratableContainerInstance: function (parentContainer, type, props) {
      {
        warnForInsertedHydratedElement(parentContainer, type, props);
      }
    },
    didNotFindHydratableContainerTextInstance: function (parentContainer, text) {
      {
        warnForInsertedHydratedText(parentContainer, text);
      }
    },
    didNotFindHydratableInstance: function (parentType, parentProps, parentInstance, type, props) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForInsertedHydratedElement(parentInstance, type, props);
      }
    },
    didNotFindHydratableTextInstance: function (parentType, parentProps, parentInstance, text) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForInsertedHydratedText(parentInstance, text);
      }
    }
  },

  scheduleDeferredCallback: rIC,

  useSyncScheduling: !enableAsyncSchedulingByDefaultInReactDOM
});

injection$4.injectFiberBatchedUpdates(DOMRenderer.batchedUpdates);

var warnedAboutHydrateAPI = false;

function renderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
  !isValidContainer(container) ? invariant_1$1(false, 'Target container is not a DOM element.') : void 0;

  {
    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
      var hostInstance = DOMRenderer.findHostInstanceWithNoPortals(container._reactRootContainer.current);
      if (hostInstance) {
        warning_1$1(hostInstance.parentNode === container, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
      }
    }

    var isRootRenderedBySomeReact = !!container._reactRootContainer;
    var rootEl = getReactRootElementInContainer(container);
    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));

    warning_1$1(!hasNonRootReactChild || isRootRenderedBySomeReact, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');

    warning_1$1(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
  }

  var root = container._reactRootContainer;
  if (!root) {
    var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
    // First clear any existing content.
    if (!shouldHydrate) {
      var warned = false;
      var rootSibling = void 0;
      while (rootSibling = container.lastChild) {
        {
          if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
            warned = true;
            warning_1$1(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
          }
        }
        container.removeChild(rootSibling);
      }
    }
    {
      if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
        warnedAboutHydrateAPI = true;
        lowPriorityWarning$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
      }
    }
    var newRoot = DOMRenderer.createContainer(container, shouldHydrate);
    root = container._reactRootContainer = newRoot;
    // Initial mount should not be batched.
    DOMRenderer.unbatchedUpdates(function () {
      DOMRenderer.updateContainer(children, newRoot, parentComponent, callback);
    });
  } else {
    DOMRenderer.updateContainer(children, root, parentComponent, callback);
  }
  return DOMRenderer.getPublicRootInstance(root);
}

function createPortal(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  !isValidContainer(container) ? invariant_1$1(false, 'Target container is not a DOM element.') : void 0;
  // TODO: pass ReactDOM portal implementation as third argument
  return createPortal$1(children, container, null, key);
}

function ReactRoot(container, hydrate) {
  var root = DOMRenderer.createContainer(container, hydrate);
  this._reactRootContainer = root;
}
ReactRoot.prototype.render = function (children, callback) {
  var root = this._reactRootContainer;
  DOMRenderer.updateContainer(children, root, null, callback);
};
ReactRoot.prototype.unmount = function (callback) {
  var root = this._reactRootContainer;
  DOMRenderer.updateContainer(null, root, null, callback);
};

var ReactDOM = {
  createPortal: createPortal,

  findDOMNode: function (componentOrElement) {
    {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
        warning_1$1(warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner) || 'A component');
        owner.stateNode._warnedAboutRefsInRender = true;
      }
    }
    if (componentOrElement == null) {
      return null;
    }
    if (componentOrElement.nodeType === ELEMENT_NODE) {
      return componentOrElement;
    }

    var inst = get(componentOrElement);
    if (inst) {
      return DOMRenderer.findHostInstance(inst);
    }

    if (typeof componentOrElement.render === 'function') {
      invariant_1$1(false, 'Unable to find node on an unmounted component.');
    } else {
      invariant_1$1(false, 'Element appears to be neither ReactComponent nor DOMNode. Keys: %s', Object.keys(componentOrElement));
    }
  },
  hydrate: function (element, container, callback) {
    // TODO: throw or warn if we couldn't hydrate?
    return renderSubtreeIntoContainer(null, element, container, true, callback);
  },
  render: function (element, container, callback) {
    return renderSubtreeIntoContainer(null, element, container, false, callback);
  },
  unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
    !(parentComponent != null && has(parentComponent)) ? invariant_1$1(false, 'parentComponent must be a valid React Component') : void 0;
    return renderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
  },
  unmountComponentAtNode: function (container) {
    !isValidContainer(container) ? invariant_1$1(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;

    if (container._reactRootContainer) {
      {
        var rootEl = getReactRootElementInContainer(container);
        var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
        warning_1$1(!renderedByDifferentReact, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
      }

      // Unmount should not be batched.
      DOMRenderer.unbatchedUpdates(function () {
        renderSubtreeIntoContainer(null, null, container, false, function () {
          container._reactRootContainer = null;
        });
      });
      // If you call unmountComponentAtNode twice in quick succession, you'll
      // get `true` twice. That's probably fine?
      return true;
    } else {
      {
        var _rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));

        // Check if the container itself is a React root node.
        var isContainerReactRoot = container.nodeType === 1 && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

        warning_1$1(!hasNonRootReactChild, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
      }

      return false;
    }
  },


  // Temporary alias since we already shipped React 16 RC with it.
  // TODO: remove in React 17.
  unstable_createPortal: createPortal,

  unstable_batchedUpdates: batchedUpdates,

  unstable_deferredUpdates: DOMRenderer.deferredUpdates,

  flushSync: DOMRenderer.flushSync,

  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
    // For TapEventPlugin which is popular in open source
    EventPluginHub: EventPluginHub,
    // Used by test-utils
    EventPluginRegistry: EventPluginRegistry,
    EventPropagators: EventPropagators,
    ReactControlledComponent: ReactControlledComponent,
    ReactDOMComponentTree: ReactDOMComponentTree,
    ReactDOMEventListener: ReactDOMEventListener
  }
};

if (enableCreateRoot) {
  ReactDOM.createRoot = function createRoot(container, options) {
    var hydrate = options != null && options.hydrate === true;
    return new ReactRoot(container, hydrate);
  };
}

var foundDevTools = DOMRenderer.injectIntoDevTools({
  findFiberByHostInstance: getClosestInstanceFromNode,
  bundleType: 1,
  version: ReactVersion,
  rendererPackageName: 'react-dom'
});

{
  if (!foundDevTools && ExecutionEnvironment_1.canUseDOM && window.top === window.self) {
    // If we're in Chrome or Firefox, provide a download link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
      var protocol = window.location.protocol;
      // Don't warn in exotic cases like chrome-extension://.
      if (/^(https?|file):$/.test(protocol)) {
        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
      }
    }
  }
}



var ReactDOM$2 = Object.freeze({
	default: ReactDOM
});

var ReactDOM$3 = ( ReactDOM$2 && ReactDOM ) || ReactDOM$2;

// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.
var reactDom = ReactDOM$3['default'] ? ReactDOM$3['default'] : ReactDOM$3;

return reactDom;

})));

(function(f) {
  if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = f();
  } else if (typeof define === "function" && define.amd) {
    define([], f);
  } else {
    var g;
    if (typeof window !== "undefined") {
      g = window;
    } else if (typeof global !== "undefined") {
      g = global;
    } else if (typeof self !== "undefined") {
      g = self;
    } else {
      g = this;
    }
    if (typeof g.React === "undefined") {
      throw Error('React module should be required before createClass');
    }
    g.createReactClass = f();
  }
})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var emptyObject = require('fbjs/lib/emptyObject');
var _invariant = require('fbjs/lib/invariant');

if ("development" !== 'production') {
  var warning = require('fbjs/lib/warning');
}

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity(fn) {
  return fn;
}

var ReactPropTypeLocationNames;
if ("development" !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context',
  };
} else {
  ReactPropTypeLocationNames = {};
}

function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
  /**
   * Policies that describe methods in `ReactClassInterface`.
   */


  var injectedMixins = [];

  /**
   * Composite components are higher-level components that compose other composite
   * or host components.
   *
   * To create a new type of `ReactClass`, pass a specification of
   * your new class to `React.createClass`. The only requirement of your class
   * specification is that you implement a `render` method.
   *
   *   var MyComponent = React.createClass({
   *     render: function() {
   *       return <div>Hello World</div>;
   *     }
   *   });
   *
   * The class specification supports a specific protocol of methods that have
   * special meaning (e.g. `render`). See `ReactClassInterface` for
   * more the comprehensive protocol. Any other properties and methods in the
   * class specification will be available on the prototype.
   *
   * @interface ReactClassInterface
   * @internal
   */
  var ReactClassInterface = {

    /**
     * An array of Mixin objects to include when defining your component.
     *
     * @type {array}
     * @optional
     */
    mixins: 'DEFINE_MANY',

    /**
     * An object containing properties and methods that should be defined on
     * the component's constructor instead of its prototype (static methods).
     *
     * @type {object}
     * @optional
     */
    statics: 'DEFINE_MANY',

    /**
     * Definition of prop types for this component.
     *
     * @type {object}
     * @optional
     */
    propTypes: 'DEFINE_MANY',

    /**
     * Definition of context types for this component.
     *
     * @type {object}
     * @optional
     */
    contextTypes: 'DEFINE_MANY',

    /**
     * Definition of context types this component sets for its children.
     *
     * @type {object}
     * @optional
     */
    childContextTypes: 'DEFINE_MANY',

    // ==== Definition methods ====

    /**
     * Invoked when the component is mounted. Values in the mapping will be set on
     * `this.props` if that prop is not specified (i.e. using an `in` check).
     *
     * This method is invoked before `getInitialState` and therefore cannot rely
     * on `this.state` or use `this.setState`.
     *
     * @return {object}
     * @optional
     */
    getDefaultProps: 'DEFINE_MANY_MERGED',

    /**
     * Invoked once before the component is mounted. The return value will be used
     * as the initial value of `this.state`.
     *
     *   getInitialState: function() {
     *     return {
     *       isOn: false,
     *       fooBaz: new BazFoo()
     *     }
     *   }
     *
     * @return {object}
     * @optional
     */
    getInitialState: 'DEFINE_MANY_MERGED',

    /**
     * @return {object}
     * @optional
     */
    getChildContext: 'DEFINE_MANY_MERGED',

    /**
     * Uses props from `this.props` and state from `this.state` to render the
     * structure of the component.
     *
     * No guarantees are made about when or how often this method is invoked, so
     * it must not have side effects.
     *
     *   render: function() {
     *     var name = this.props.name;
     *     return <div>Hello, {name}!</div>;
     *   }
     *
     * @return {ReactComponent}
     * @nosideeffects
     * @required
     */
    render: 'DEFINE_ONCE',

    // ==== Delegate methods ====

    /**
     * Invoked when the component is initially created and about to be mounted.
     * This may have side effects, but any external subscriptions or data created
     * by this method must be cleaned up in `componentWillUnmount`.
     *
     * @optional
     */
    componentWillMount: 'DEFINE_MANY',

    /**
     * Invoked when the component has been mounted and has a DOM representation.
     * However, there is no guarantee that the DOM node is in the document.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been mounted (initialized and rendered) for the first time.
     *
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidMount: 'DEFINE_MANY',

    /**
     * Invoked before the component receives new props.
     *
     * Use this as an opportunity to react to a prop transition by updating the
     * state using `this.setState`. Current props are accessed via `this.props`.
     *
     *   componentWillReceiveProps: function(nextProps, nextContext) {
     *     this.setState({
     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
     *     });
     *   }
     *
     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
     * transition may cause a state change, but the opposite is not true. If you
     * need it, you are probably looking for `componentWillUpdate`.
     *
     * @param {object} nextProps
     * @optional
     */
    componentWillReceiveProps: 'DEFINE_MANY',

    /**
     * Invoked while deciding if the component should be updated as a result of
     * receiving new props, state and/or context.
     *
     * Use this as an opportunity to `return false` when you're certain that the
     * transition to the new props/state/context will not require a component
     * update.
     *
     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
     *     return !equal(nextProps, this.props) ||
     *       !equal(nextState, this.state) ||
     *       !equal(nextContext, this.context);
     *   }
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @return {boolean} True if the component should update.
     * @optional
     */
    shouldComponentUpdate: 'DEFINE_ONCE',

    /**
     * Invoked when the component is about to update due to a transition from
     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
     * and `nextContext`.
     *
     * Use this as an opportunity to perform preparation before an update occurs.
     *
     * NOTE: You **cannot** use `this.setState()` in this method.
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @param {ReactReconcileTransaction} transaction
     * @optional
     */
    componentWillUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component's DOM representation has been updated.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been updated.
     *
     * @param {object} prevProps
     * @param {?object} prevState
     * @param {?object} prevContext
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component is about to be removed from its parent and have
     * its DOM representation destroyed.
     *
     * Use this as an opportunity to deallocate any external resources.
     *
     * NOTE: There is no `componentDidUnmount` since your component will have been
     * destroyed by that point.
     *
     * @optional
     */
    componentWillUnmount: 'DEFINE_MANY',

    // ==== Advanced methods ====

    /**
     * Updates the component's currently mounted DOM representation.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     * @overridable
     */
    updateComponent: 'OVERRIDE_BASE'

  };

  /**
   * Mapping from class specification keys to special processing functions.
   *
   * Although these are declared like instance properties in the specification
   * when defining classes using `React.createClass`, they are actually static
   * and are accessible on the constructor instead of the prototype. Despite
   * being static, they must be defined outside of the "statics" key under
   * which all other static methods are defined.
   */
  var RESERVED_SPEC_KEYS = {
    displayName: function (Constructor, displayName) {
      Constructor.displayName = displayName;
    },
    mixins: function (Constructor, mixins) {
      if (mixins) {
        for (var i = 0; i < mixins.length; i++) {
          mixSpecIntoComponent(Constructor, mixins[i]);
        }
      }
    },
    childContextTypes: function (Constructor, childContextTypes) {
      if ("development" !== 'production') {
        validateTypeDef(Constructor, childContextTypes, 'childContext');
      }
      Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
    },
    contextTypes: function (Constructor, contextTypes) {
      if ("development" !== 'production') {
        validateTypeDef(Constructor, contextTypes, 'context');
      }
      Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
    },
    /**
     * Special case getDefaultProps which should move into statics but requires
     * automatic merging.
     */
    getDefaultProps: function (Constructor, getDefaultProps) {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
      } else {
        Constructor.getDefaultProps = getDefaultProps;
      }
    },
    propTypes: function (Constructor, propTypes) {
      if ("development" !== 'production') {
        validateTypeDef(Constructor, propTypes, 'prop');
      }
      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
    },
    statics: function (Constructor, statics) {
      mixStaticSpecIntoComponent(Constructor, statics);
    },
    autobind: function () {} };

  function validateTypeDef(Constructor, typeDef, location) {
    for (var propName in typeDef) {
      if (typeDef.hasOwnProperty(propName)) {
        // use a warning instead of an _invariant so components
        // don't show up in prod but only in __DEV__
        "development" !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
      }
    }
  }

  function validateMethodOverride(isAlreadyDefined, name) {
    var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

    // Disallow overriding of base class methods unless explicitly allowed.
    if (ReactClassMixin.hasOwnProperty(name)) {
      _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name);
    }

    // Disallow defining methods more than once unless explicitly allowed.
    if (isAlreadyDefined) {
      _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name);
    }
  }

  /**
   * Mixin helper which handles policy validation and reserved
   * specification keys when building React classes.
   */
  function mixSpecIntoComponent(Constructor, spec) {
    if (!spec) {
      if ("development" !== 'production') {
        var typeofSpec = typeof spec;
        var isMixinValid = typeofSpec === 'object' && spec !== null;

        "development" !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
      }

      return;
    }

    _invariant(typeof spec !== 'function', 'ReactClass: You\'re attempting to ' + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.');
    _invariant(!isValidElement(spec), 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.');

    var proto = Constructor.prototype;
    var autoBindPairs = proto.__reactAutoBindPairs;

    // By handling mixins before any other properties, we ensure the same
    // chaining order is applied to methods with DEFINE_MANY policy, whether
    // mixins are listed before or after these methods in the spec.
    if (spec.hasOwnProperty(MIXINS_KEY)) {
      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
    }

    for (var name in spec) {
      if (!spec.hasOwnProperty(name)) {
        continue;
      }

      if (name === MIXINS_KEY) {
        // We have already handled mixins in a special case above.
        continue;
      }

      var property = spec[name];
      var isAlreadyDefined = proto.hasOwnProperty(name);
      validateMethodOverride(isAlreadyDefined, name);

      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
        RESERVED_SPEC_KEYS[name](Constructor, property);
      } else {
        // Setup methods on prototype:
        // The following member methods should not be automatically bound:
        // 1. Expected ReactClass methods (in the "interface").
        // 2. Overridden methods (that were mixed in).
        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
        var isFunction = typeof property === 'function';
        var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

        if (shouldAutoBind) {
          autoBindPairs.push(name, property);
          proto[name] = property;
        } else {
          if (isAlreadyDefined) {
            var specPolicy = ReactClassInterface[name];

            // These cases should already be caught by validateMethodOverride.
            _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name);

            // For methods which are defined more than once, call the existing
            // methods before calling the new property, merging if appropriate.
            if (specPolicy === 'DEFINE_MANY_MERGED') {
              proto[name] = createMergedResultFunction(proto[name], property);
            } else if (specPolicy === 'DEFINE_MANY') {
              proto[name] = createChainedFunction(proto[name], property);
            }
          } else {
            proto[name] = property;
            if ("development" !== 'production') {
              // Add verbose displayName to the function, which helps when looking
              // at profiling tools.
              if (typeof property === 'function' && spec.displayName) {
                proto[name].displayName = spec.displayName + '_' + name;
              }
            }
          }
        }
      }
    }
  }

  function mixStaticSpecIntoComponent(Constructor, statics) {
    if (!statics) {
      return;
    }
    for (var name in statics) {
      var property = statics[name];
      if (!statics.hasOwnProperty(name)) {
        continue;
      }

      var isReserved = name in RESERVED_SPEC_KEYS;
      _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name);

      var isInherited = name in Constructor;
      _invariant(!isInherited, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name);
      Constructor[name] = property;
    }
  }

  /**
   * Merge two objects, but throw if both contain the same key.
   *
   * @param {object} one The first object, which is mutated.
   * @param {object} two The second object
   * @return {object} one after it has been mutated to contain everything in two.
   */
  function mergeIntoWithNoDuplicateKeys(one, two) {
    _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');

    for (var key in two) {
      if (two.hasOwnProperty(key)) {
        _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key);
        one[key] = two[key];
      }
    }
    return one;
  }

  /**
   * Creates a function that invokes two functions and merges their return values.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createMergedResultFunction(one, two) {
    return function mergedResult() {
      var a = one.apply(this, arguments);
      var b = two.apply(this, arguments);
      if (a == null) {
        return b;
      } else if (b == null) {
        return a;
      }
      var c = {};
      mergeIntoWithNoDuplicateKeys(c, a);
      mergeIntoWithNoDuplicateKeys(c, b);
      return c;
    };
  }

  /**
   * Creates a function that invokes two functions and ignores their return vales.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createChainedFunction(one, two) {
    return function chainedFunction() {
      one.apply(this, arguments);
      two.apply(this, arguments);
    };
  }

  /**
   * Binds a method to the component.
   *
   * @param {object} component Component whose method is going to be bound.
   * @param {function} method Method to be bound.
   * @return {function} The bound method.
   */
  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    if ("development" !== 'production') {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function (newThis) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          "development" !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
        } else if (!args.length) {
          "development" !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }

  /**
   * Binds all auto-bound methods in a component.
   *
   * @param {object} component Component whose method is going to be bound.
   */
  function bindAutoBindMethods(component) {
    var pairs = component.__reactAutoBindPairs;
    for (var i = 0; i < pairs.length; i += 2) {
      var autoBindKey = pairs[i];
      var method = pairs[i + 1];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }

  var IsMountedMixin = {
    componentDidMount: function () {
      this.__isMounted = true;
    },
    componentWillUnmount: function () {
      this.__isMounted = false;
    }
  };

  /**
   * Add more to the ReactClass base class. These are all legacy features and
   * therefore not already part of the modern ReactComponent.
   */
  var ReactClassMixin = {

    /**
     * TODO: This will be deprecated because state should always keep a consistent
     * type signature and the only use case for this, is to avoid that.
     */
    replaceState: function (newState, callback) {
      this.updater.enqueueReplaceState(this, newState, callback);
    },

    /**
     * Checks whether or not this composite component is mounted.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function () {
      if ("development" !== 'production') {
        "development" !== 'production' ? warning(this.__didWarnIsMounted, '%s: isMounted is deprecated. Instead, make sure to clean up ' + 'subscriptions and pending requests in componentWillUnmount to ' + 'prevent memory leaks.', this.constructor && this.constructor.displayName || this.name || 'Component') : void 0;
        this.__didWarnIsMounted = true;
      }
      return !!this.__isMounted;
    }
  };

  var ReactClassComponent = function () {};
  _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  function createClass(spec) {
    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity(function (props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if ("development" !== 'production') {
        "development" !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if ("development" !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (initialState === undefined && this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, IsMountedMixin);
    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if ("development" !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');

    if ("development" !== 'production') {
      "development" !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
      "development" !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  }

  return createClass;
}

module.exports = factory;

},{"fbjs/lib/emptyObject":4,"fbjs/lib/invariant":5,"fbjs/lib/warning":6,"object-assign":7}],2:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var factory = require('./factory');

// Hack to grab NoopUpdateQueue from isomorphic React
var ReactNoopUpdateQueue = new React.Component().updater;

module.exports = factory(
  React.Component,
  React.isValidElement,
  ReactNoopUpdateQueue
);

},{"./factory":1}],3:[function(require,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 *
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
},{}],4:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var emptyObject = {};

if ("development" !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
},{}],5:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if ("development" !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
},{}],6:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("development" !== 'production') {
  (function () {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return; // Ignore CompositeComponent proptype check.
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  })();
}

module.exports = warning;
},{"./emptyFunction":3}],7:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}]},{},[2])(2)
});

(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["LinkedStateMixin"] = factory();
	else
		(root.React?(root.React.addons=root.React.addons||{}):(function(){throw new Error("react-addons-linked-state-mixin could not find the React object. If you are using script tags, make sure that React is being loaded before react-addons-linked-state-mixin.")})()).LinkedStateMixin=factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



/**
 * ReactLink encapsulates a common pattern in which a component wants to modify
 * a prop received from its parent. ReactLink allows the parent to pass down a
 * value coupled with a callback that, when invoked, expresses an intent to
 * modify that value. For example:
 *
 * React.createClass({
 *   getInitialState: function() {
 *     return {value: ''};
 *   },
 *   render: function() {
 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);
 *     return <input valueLink={valueLink} />;
 *   },
 *   _handleValueChange: function(newValue) {
 *     this.setState({value: newValue});
 *   }
 * });
 *
 * We have provided some sugary mixins to make the creation and
 * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.
 */

/**
 * Deprecated: An an easy way to express two-way binding with React.
 * See https://facebook.github.io/react/docs/two-way-binding-helpers.html
 *
 * @param {*} value current value of the link
 * @param {function} requestChange callback to request a change
 */
function ReactLink(value, requestChange) {
  this.value = value;
  this.requestChange = requestChange;
}

var ReactStateSetters = {
  /**
   * Returns a function that calls the provided function, and uses the result
   * of that to set the component's state.
   *
   * @param {ReactCompositeComponent} component
   * @param {function} funcReturningState Returned callback uses this to
   *                                      determine how to update state.
   * @return {function} callback that when invoked uses funcReturningState to
   *                    determined the object literal to setState.
   */
  createStateSetter: function(component, funcReturningState) {
    return function(a, b, c, d, e, f) {
      var partialState = funcReturningState.call(component, a, b, c, d, e, f);
      if (partialState) {
        component.setState(partialState);
      }
    };
  },

  /**
   * Returns a single-argument callback that can be used to update a single
   * key in the component's state.
   *
   * Note: this is memoized function, which makes it inexpensive to call.
   *
   * @param {ReactCompositeComponent} component
   * @param {string} key The key in the state that you should update.
   * @return {function} callback of 1 argument which calls setState() with
   *                    the provided keyName and callback argument.
   */
  createStateKeySetter: function(component, key) {
    // Memoize the setters.
    var cache = component.__keySetters || (component.__keySetters = {});
    return cache[key] || (cache[key] = createStateKeySetter(component, key));
  }
};

function createStateKeySetter(component, key) {
  // Partial state is allocated outside of the function closure so it can be
  // reused with every call, avoiding memory allocation when this function
  // is called.
  var partialState = {};
  return function stateKeySetter(value) {
    partialState[key] = value;
    component.setState(partialState);
  };
}

ReactStateSetters.Mixin = {
  /**
   * Returns a function that calls the provided function, and uses the result
   * of that to set the component's state.
   *
   * For example, these statements are equivalent:
   *
   *   this.setState({x: 1});
   *   this.createStateSetter(function(xValue) {
   *     return {x: xValue};
   *   })(1);
   *
   * @param {function} funcReturningState Returned callback uses this to
   *                                      determine how to update state.
   * @return {function} callback that when invoked uses funcReturningState to
   *                    determined the object literal to setState.
   */
  createStateSetter: function(funcReturningState) {
    return ReactStateSetters.createStateSetter(this, funcReturningState);
  },

  /**
   * Returns a single-argument callback that can be used to update a single
   * key in the component's state.
   *
   * For example, these statements are equivalent:
   *
   *   this.setState({x: 1});
   *   this.createStateKeySetter('x')(1);
   *
   * Note: this is memoized function, which makes it inexpensive to call.
   *
   * @param {string} key The key in the state that you should update.
   * @return {function} callback of 1 argument which calls setState() with
   *                    the provided keyName and callback argument.
   */
  createStateKeySetter: function(key) {
    return ReactStateSetters.createStateKeySetter(this, key);
  }
};

/**
 * A simple mixin around ReactLink.forState().
 * See https://facebook.github.io/react/docs/two-way-binding-helpers.html
 */
var LinkedStateMixin = {
  /**
   * Create a ReactLink that's linked to part of this component's state. The
   * ReactLink will have the current value of this.state[key] and will call
   * setState() when a change is requested.
   *
   * @param {string} key state key to update.
   * @return {ReactLink} ReactLink instance linking to the state.
   */
  linkState: function(key) {
    return new ReactLink(
      this.state[key],
      ReactStateSetters.createStateKeySetter(this, key)
    );
  }
};

module.exports = LinkedStateMixin;


/***/ })
/******/ ]);
});
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @namespace Twenty
 * @description
        Take down the love letters from the bookshelf,<br>
        the photographs, the desperate notes,<br>
        peel your own image from the mirror.<br>
        Sit. Feast on your life.<br>
        **/

/**
 * @name Twenty.Components
 * @memberof Twenty
 * @namespace
 **/

/**
 * @global
 * @description If you want to get to know the API - the architecture and mechanics of the
    Twenty API, you could do worse that to start by flicking through the high-level
    "classes" to get a feel for what goes where and why.<br>
    If you want to know exactly how the HTML5 Application functions, it is loaded on
    window load - the code (in the example following this text) is to be found about
    half-way down the page app.js, once Twenty.app is fully declared.<br>
    This will lead you to {@link Twenty.app.init} which is handily very well commented.
    @example
    <caption>Not actually an example, per say. But the bit which kicks off the application</caption>
$(window).load(function(e, data) {
    Twenty.app.init(window);
});
**/
var Twenty = {
    i18n: {},
    Components: {},
    datamodel: {},
    init: function init(parameterObject) {
        if (parameterObject) {
            Twenty.app.config("app.controller", parameterObject.controller);
            Twenty.app.config("datamodel", parameterObject.datamodel);
            Twenty.app.config("env", parameterObject.environments);
        }
        Twenty.app.init();
    }
};

// Type Definitions - custom objects frequently used in the application

/**
 * @typedef {Object} TwentyPageParam
 * @description This is the object which is found at the top of every page definition as
    the parameter sent to {@link Twenty.page.register}.<br>
    As an API developer, you are mostly interested in this as it allows us to control flow
    within the framework with the id and the feed / data details<br>
    As an app developer, using the API, you mostly need this as it allows you to create
    new pages in React or strings and not to have to worry about the differences
    that this creates, but most importantly, if you correctly define the metas associated
    with the page, you don't ever need to worry about where the data comes from.
 * @property {string} id - unique identifier
 * @property {"default" | "page" | "modal" } type - how should the page be rendered. If not specified, then it defaults to "page". "default" is a synonym for "page"
 * @property {"react" | "domnode" | "string" | "staticpage" | "url" }  contentType - defines the content type of the page
 * @property {"feed" | "full_feed" | "data" | URI } content - something which can be DOM rendered, appropriate to the params.contentType. If "data", this is loaded as the second parameter to Twenty.page.load.
 * @property {string=} feedUrl - if params.content is "feed", a feedUrl is required. This is always the live URL. If you are working locally, or testing a component, the stub.json file will be used instead.
 * @property {string=} preloadFeed - if this is TRUTHY, the feed will be fetched once at app init, and never again in this session. It is retreivebale via {@link Twenty.app.getSavedFeed ||  Twenty.app.getSavedFeed(TwentyPageParam.preloadFeed)}
 * @property {Object=} feedParams - a parameters object which gets stringified into &key=val and appended to the feed url
 * @property {boolean= } googleonly - only record the opening of this page as a PI internally, ie, with google analytics. Not with net-metrics
 * @property {string=} transition - standard transition is slide. Change it here.
 * @property {boolean=} saveScrollPos - when the user navigates away from the page, and comes back to it, should they return to the top of the page (false), or the position to which they were previously scrolled (true)
 * @property {string=} lastScrollPosIndicator - put here the pageParam key which should be used as indicator to save scroll position per page instance
 * @property {boolean=} persist - by default, a modal's content is cleared when the the page is closed, set this to true to keep the content persistent in the DOM.
 * @property {Object=} headerConfig - set all your settings for the default header of the page, for more details see {@link Twenty.Components.header}
 * @property {Object=} rewriteObject - set your rewrite object for rewritting the url and store to the browser history (pages only)
 * @example
 {
    id: "frontpage",
    contentType: "react",
    content: "feed",
    feedUrl: "feed/view/",
    feedParams: {
        pagesize: Twenty.datamodel.STORYCOUNT,
        page: 1
    },
    transition: {
        in: ["page-fade-in"],
        out: ["page-fade-out"]
    },
    persist: true,
    headerConfig: {
        showHeader: true,
        displayTitle: "front",
        headerElements: []
    },
    rewriteObject: {
        stateObj: {},
        title: "examplepage",
        path: "path/to/page"
    }
});
*/

/**
 * @typedef {Object} TwentySiteMapObject
 * @description Mostly used internally in the framework, the collection of these objects
    is what allows us to do all sorts of magic stuff with catogories. From switching between
    category pages, to going to the "next" story to managing the information and actions in
    the header. Neato.
 * @property {string} category - display name and identifier
 * @property {string}  category_id - UID. Changes very infrequently
 * @property {string}  color - when appearing as a list item, the background colour
 * @property {string}  feed_full_content_url - Use this to display a full category page
 * @property {string}  feed_preview_url - Use this to display a summary
 * @property {string}  icon - category display icon @deprecated
 * @property {string}  id - a tetris reference
 * @property {string}  type - view
 * @example
{
    "category" : "Schweiz",
    "category_id" : "63",
    "color" : "#092B75",
    "feed_full_content_url" : "http://www.20min.ch/feed/view.tmpl?json&key=276925d8d98cd956d43cd659051232f7&lang=de&view=63",
    "feed_preview_url" : "http://www.20min.ch/feed/view.tmpl?json&key=276925d8d98cd956d43cd659051232f7&lang=de&limit=3&view=63",
    "front" : "1",
    "icon" : "http://www.20min.ch/2010/app/icons/de/SchweizIcon.png",
    "id" : "5",
    "type" : "view"
}
*/
/**
 * @typedef {Object} TwentyHistoryObject
 * @description When a page unloads, it should be pushed to the history object.
 * On unload, all components should notify their parent of any data required they would
 * require to recreate their state as they were on unload.
 * Each component should merge this data with its own and push this object up to its own
 * parent.
 * When the "parent" is the page (ie, the root element), it should take the "state recreation"
 * object and push this along with the other properties of the TwentyHistoryObject to
 * Twenty.history.push().
 * This history object will also be the object returned by any of the methods of {link Twenty.history}
 * @param {string} path - window.location.pathname string
 * @param {number} timestamp    milliseconds since the start of unix time (when the page unloaded)
 * @param {!number} scrollPosition   current scroll position
 * @param {Object} componentStates      object as described above to recreate "state" of components in the page
 * @example
{
    "path": "/ressort/category/story/29979245",
    "timestamp": 1446125061951,
    "scrollPosition": 888,
    "componentStates": {
        "component_a": {
            "scrollPosition": 200
        },
        "component_b": {
            "selectedIndex": 6
        }
    }
}
**/

/**
 * @typedef {Object} TwentyWidget
 * @deprecated
 * @description A widget is a freely exportable integrated, self sufficient conmponent.
    For each standalone {@link Twenty.Component}, there is a corresponding Widget which can be exported
    The grunt command to export a widget is
    grunt buildapi --cx=componentName
 * @property {('feed'|'data'|'both')} dataSource How this component is expecting to receive
    data.
    If "data", then the Component must be supported by a complete example stub.json
    if "feed", the feed url must be composed outside of the Component.
 * @property {string} language language string ["de","fr"]
 * @property {string} widget the Twenty.Components.x.myNameIs name of a component to be
            exported as a widget
 * @property {string| DOMNode | CSSSelector} node All widgets can now be implemented with an actual DOM node, the unique ID of one, a css selector or an array of elements.
The array of elements can be a mix of dom nodes, ids and css selectors, though the selectors must return single nodes, not a collection of them.
If an array element returns a node collection, or if any lookup cannot be resolved the widget at this placement will simply be skipped, and a warning will be given in the console.
 * @property {string} feedServer  if the component is responsible for fetching it's own
        data, this is the server it should get it from
 * @property {function} handleClick  user interaction. See the component's documentation for
        more, but typically this function will be in a React environment and will return
        the data representation of the element clicked with a scope of the React component
 * @property {string} data if the component renders existing data which is known outside of
        its own scope, send it in here.
 * @property {Object} config   See each Component's own Documentation for details of other
        required and optional configuration options
 * @example
<caption>If a third-party user wanted to implement a recommender widget, they would do it like this:
How the implementor gets values for "sourceUrl" or "device" is entirely up to them.</caption>
<div id="my20min_widget"></div>
<script src="twenty_min.js"></script>
<script>
    Twenty.api.widget({
        language: "de",
        widget: "recommender",
        node: "my20min_widget",
        feedServer: "http://rcmd.tda.io/20min/rec.json",
        handleClick: function(element){
            console.log(element)
        },
        config: {
            sourceUrl: "http://www.20min.ch/finance/news/story/26073959",
            sourceId: "26073959",
            device: "android"
        }
    });
</script>
**/

/**
 * @typedef {Object} TwentyComponent
 * @description Twenty components can be shared. Implementors of the Twenty applications, don't use the widget solution
    To use the recommender _component_ internally, you can access the full Twenty namespace and also you can embed it within a React environment.
    The params object is basically the same, but with a flattened structure and fewer required properties.
 * @param {Object} config   The config object for a component is specified locally (ie, in the jsx file comments)
 * @param {string} feedServer  if the component is responsible for fetching it's own data, this is the server it should get it from
 * @param {string} data if the component renders existing data which is known outside of its own scope, send it in here.
 * @example
var recommenderObject = {
    feedServer: Twenty.env.getServer("recommender"),
    sourceUrl: this.props.data.link,
    sourceId: this.props.data.id,
    device: Twenty.env.getDevice()
}
<Twenty.Components.recommender config={recommenderObject}/>
**/

/* eslint-disable no-extend-native */
/**
* polyfills, Utility functions on the prototypes of JS primitives
* @class Twenty.prototype
* @author 20 Minuten Frontend Team
* @license Copyright 20 Minuten AG 2015
*/
Twenty.polyfills = function () {

    "use strict";

    // shuffle

    Array.prototype.shuffle = function () {
        var i = this.length,
            temp,
            newindex;
        while (i > 0) {
            newindex = Math.floor(Math.random() * i);
            i--;
            temp = this[i];
            this[i] = this[newindex];
            this[newindex] = temp;
        }
    };

    // find
    if (!Array.prototype.find) {
        Array.prototype.find = function (predicate) {
            if (this == null) {
                throw new TypeError("Array.prototype.find called on null or undefined");
            }
            if (typeof predicate !== "function") {
                throw new TypeError("predicate must be a function");
            }

            var list = Object(this),
                length = list.length >>> 0,
                thisArg = arguments[1];
            var value = void 0;
            for (var i = 0; i < length; i++) {
                value = list[i];
                if (predicate.call(thisArg, value, i, list)) {
                    return value;
                }
            }
        };
    }

    // string replace diaeres
    String.prototype.latinify = function () {
        /* eslint-disable id-length */
        var map = {
            Ã¤: "ae",
            Ã¶: "oe",
            Ã¼: "ue",
            Ã: "Ae",
            Ã: "Oe",
            Ã: "Ue"
        },
            replacedString = "";
        /* eslint-enable id-length */
        for (var i = 0; i < this.length; i++) {
            replacedString += map[this[i]] || this[i];
        }
        return replacedString;
    };

    // requestAnimationFrame
    // -----------------------------------------------------------------------
    // http://paulirish.com/2011/requestanimationframe-for-smart-animating/
    // http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
    // requestAnimationFrame polyfill by Erik MÃ¶ller. fixes from Paul Irish and Tino Zijdel
    // MIT license
    (function () {
        var lastTime = 0,
            vendors = ["ms", "moz", "webkit", "o"];
        if ((typeof window === "undefined" ? "undefined" : _typeof(window)) !== "object") {
            return false;
        }
        for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
            window.requestAnimationFrame = window[vendors[x] + "RequestAnimationFrame"];
            window.cancelAnimationFrame = window[vendors[x] + "CancelAnimationFrame"] || window[vendors[x] + "CancelRequestAnimationFrame"];
        }
        if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = function (callback) {
                var currTime = new Date().getTime(),
                    timeToCall = Math.max(0, 16 - (currTime - lastTime)),
                    id = window.setTimeout(function () {
                    callback(currTime + timeToCall);
                }, timeToCall);
                lastTime = currTime + timeToCall;
                return id;
            };
        }
        if (!window.cancelAnimationFrame) {
            window.cancelAnimationFrame = function (id) {
                clearTimeout(id);
            };
        }
    })();

    // toLocaleTimeString function
    if (!Date.prototype.toLocaleTimeString) {
        // todo : use variables locales, options
        Date.prototype.toLocaleTimeString = function () {};
    }

    // endsWith
    if (!String.prototype.endsWith) {
        String.prototype.endsWith = function (searchString, position) {
            var subjectString = this.toString(),
                lastIndex;
            if (typeof position !== "number" || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
                position = subjectString.length;
            }
            position -= searchString.length;
            lastIndex = subjectString.indexOf(searchString, position);
            return lastIndex !== -1 && lastIndex === position;
        };
    }
}();

/**
 * @name Twenty.core
 * @memberof Twenty
 * @class
 * @description core functions pertaining to javascript pure.
 * There should be nothing in here which interacts with a browser or assumes a DOM
 **/

Twenty.core = function () {
    var shallowCompare,
        emptyFunction,
        checkObjProps,
        extend,
        _extendDeep,
        copyObject,
        keyCollection = {},
        _getUniqueKey,
        convertNames,
        getAge,
        zeroFill,
        removeSpecialChars,
        getPropertyByPath,
        matchObjectKey;

    /**
     * @name shallowCompare
     * @memberOf Twenty.core
     * @method
     * @param {Object} objA an object
     * @param {Object} objB another object. Is it the same as objA?
     * @returns {Boolean} well? Is it?
     * @description This is mostly copied from the react PureRender mixin  you can find here
     * https://github.com/francoislaberge/pure-render-mixin
     * It's not even kidding when it says it's shallow. It only works if there is zero nesting in the
     * objects being compared. Or in other words, every object.key value must be a (non-object) primitive.
     * so yeah, use with caution
     **/
    shallowCompare = function shallowCompare(objA, objB) {
        var keysA, keysB, bHasOwnProperty;

        // get some nice quick returns
        // one or the other is not an object.. that can be returned quickly
        if ((typeof objA === "undefined" ? "undefined" : _typeof(objA)) !== "object" || objA === null || (typeof objB === "undefined" ? "undefined" : _typeof(objB)) !== "object" || objB === null) {
            return false;
        }

        // javsacript thinks they are actually the same object
        if (objA === objB) {
            return true;
        }
        if (JSON.stringify(objA) === JSON.stringify(objB)) {
            return true;
        }

        keysA = Object.keys(objA);
        keysB = Object.keys(objB);

        // same length or quit
        if (keysA.length !== keysB.length) {
            return false;
        }

        // go through the keys and check'em
        // shortcut hasOwnProperty and scope it to objB
        bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
        for (var i = 0; i < keysA.length; i++) {
            if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
                return false;
            }
        }
        return true;
    };

    emptyFunction = function emptyFunction() {};

    /**
     * @name checkObjProps
     * @memberOf Twenty.core
     * @method
     * @param {Object} obj The source object to check for properties
     * @param {Array} propsToCheck array of named properties to check for
     * @returns {Boolean}
     */
    checkObjProps = function checkObjProps(obj, propsToCheck) {
        var missing = [];
        for (var i = 0; i < propsToCheck.length; i++) {
            if (!obj.hasOwnProperty(propsToCheck[i])) {
                missing.push(propsToCheck[i]);
            }
        }
        if (missing.length) {
            Twenty.tracking.errorlog({
                category: "history",
                action: "checkObjProps",
                label: "missing keys" + missing.toString()
            });
            return false;
        }
        return true;
    };

    /**
     * @name extend
     * @memberOf Twenty.core
     * @method
     * @param {Object} target The target object
     * @param {Object} source The source object
     * @description ridiculously simple object inheritence method.
     * Copy source to target, overwriting as you go.
     * No type checking, no depth. Just overwrite. YAGNI
     * MUTATES INPUTS
     */
    extend = function extend() {
        var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var source = arguments[1];

        if (source && (typeof source === "undefined" ? "undefined" : _typeof(source)) === "object") {
            for (var node in source) {
                if (source.hasOwnProperty(node)) {
                    target[node] = source[node];
                }
            }
        } else {
            return false;
        }
        return target;
    };

    /**
     * @name extendDeep
     * @memberOf Twenty.core
     * @method
     * @param {Object} target The target object
     * @param {Object} source The source object
     * @param {?Boolean} doNotMutate return a clean object
     * @description slightly more elaborate version of core.extend
     * it goes deep
     * still no checking, or typesafety, and if it exists, it gets overwritten
     * but at least only at the primitives level. Object values get extended recursively
    */
    _extendDeep = function extendDeep(target, source, doNotMutate) {
        var output, node, mapFunction;

        if (!target) {
            target = {};
        }

        output = doNotMutate ? extend({}, target) : target;
        mapFunction = function mapFunction(child, index) {
            if ((typeof child === "undefined" ? "undefined" : _typeof(child)) === "object") {
                output[index] = _extendDeep(null, child);
            } else {
                output[index] = child;
            }
        };

        for (node in source) {
            if (source.hasOwnProperty(node)) {
                if (Array.isArray(source)) {
                    output = [];
                    source.forEach(mapFunction);
                } else if (_typeof(source[node]) === "object") {
                    output[node] = _extendDeep(output[node], source[node]);
                } else {
                    output[node] = source[node];
                }
            }
        }
        return output;
    };

    /**
     * @name copyObject
     * @memberOf Twenty.core
     * @method
     * @param {Object} obj The source object
     * @description runs the extendDeep function with null as target object and returns the cloned object
     */
    copyObject = function copyObject(obj) {
        return _extendDeep(null, obj);
    };

    /**
     * @alias Twenty.core.getUniqueKey
     * @memberof Twenty.core
     * @param {string} prefix - your component in one word
     * @description creates and returns a unique key with your prefix. Warning. Be careful
        using this. If you pass a generated unique key to an element which is in a feed-generated
        list, you are _guaranteeing_ that it will update if the feed changes (for example, in
        an infinite scroll).
     */
    _getUniqueKey = function getUniqueKey(prefix) {
        var key = Math.random().toString(36).substr(2, 8);
        if (!keyCollection[prefix]) {
            keyCollection[prefix] = [];
        }
        if (keyCollection[prefix].indexOf(key) > -1) {
            _getUniqueKey(prefix);
        } else {
            keyCollection[prefix].push(key);
        }
        return prefix + "_" + key;
    };

    /**
    * @alias Twenty.core.convertNames
    * @memberof Twenty.core
    * @description Replace all occurrences of the searched strings with the new values in one go
    * @param {String} inputString The string to change
    * @param {Object} mapObj An object with all words (keys) and their replacements (values)
    * @return {String} the converted string
    */
    convertNames = function convertNames(inputString, mapObj) {
        var reg = new RegExp(Object.keys(mapObj).join("|"), "g");
        return inputString.replace(reg, function (matched) {
            return mapObj[matched];
        });
    };

    /**
    * @alias Twenty.core.getAge
    * @memberof Twenty.core
    * @description Get the age of the given date
    * @param {Date|String} dateString The date as a Date object or string
    * @return {String} The generated string for the age of the given date
    */
    getAge = function getAge(dateString) {
        var weekdaysAndMonths = {
            Dienstag: "Tuesday",
            Mittwoch: "Wednesday",
            Donnerstag: "Thursday",
            Freitag: "Friday",
            Samstag: "Saturday",
            Sonntag: "Sunday",
            MÃ¤rz: "March",
            Mai: "May",
            Oktober: "October",
            Dezember: "December",
            lundi: "Monday",
            mardi: "Tuesday",
            mercredi: "Wednesday",
            jeudi: "Thursday",
            vendredi: "Friday",
            samedi: "Saturday",
            dimanche: "Sunday",
            fÃ©vrier: "February",
            avril: "April",
            mai: "May",
            juin: "June",
            juillet: "July",
            aoÃ»t: "August",
            dÃ©cembre: "December"
        },
            now = +new Date(),
            then = new Date(convertNames(dateString.toString(), weekdaysAndMonths)),
            diffSeconds,
            useTime,
            numUnits,
            plural = "",
            str = "",
            timeTokens = {
            min: {
                sec: 60,
                unit: " Min",
                plural: "",
                datPlur: ""
            },
            hour: {
                sec: 3600,
                unit: Twenty.i18n.lang === "de" ? " Std" : "h",
                plural: "",
                datPlur: ""
            },
            day: {
                sec: 86400,
                unit: Twenty.i18n.lang === "de" ? " Tag" : " jour",
                plural: Twenty.i18n.lang === "de" ? "e" : "s",
                datPlur: Twenty.i18n.lang === "de" ? "en" : "s"
            },
            week: {
                sec: 604800,
                unit: Twenty.i18n.lang === "de" ? " Woche" : " semaine",
                plural: Twenty.i18n.lang === "de" ? " Woche" : "s",
                datPlur: Twenty.i18n.lang === "de" ? "n" : "s"
            },
            month: {
                sec: 2419200,
                unit: Twenty.i18n.lang === "de" ? " Monat" : " mois",
                plural: Twenty.i18n.lang === "de" ? " Monat" : "",
                datPlur: Twenty.i18n.lang === "de" ? "e" : ""
            },
            year: {
                sec: 29030400,
                unit: Twenty.i18n.lang === "de" ? " Jahr" : " an",
                plural: Twenty.i18n.lang === "de" ? " Jahr" : "s",
                datPlur: Twenty.i18n.lang === "de" ? "e" : "s"
            }
        };

        if (typeof then.getMonth !== "function") {
            Twenty.tracking.errorlog({
                category: "core",
                action: "getAge",
                label: "not a valid date string"
            });
            return false;
        }
        diffSeconds = (now - then) / 1000;
        for (var time in timeTokens) {
            if (timeTokens[time].sec < diffSeconds) {
                useTime = timeTokens[time];
            }
        }

        if (useTime) {
            numUnits = Math.floor(diffSeconds / useTime.sec);
        } else {
            useTime = timeTokens.min;
            numUnits = 1;
        }

        if (numUnits > 1) {
            plural = useTime.datPlur;
        }
        str = Twenty.i18n.lang === "de" ? "vor" : "il y a";
        return str + " " + numUnits + useTime.unit + plural;
    };

    /**
     * @name zeroFill
     * @memberOf Twenty.core
     * @method
     * @param {string} stringToFill - your string to zero fill
     * @returns {String} the string with leading zero if its length is 1
     * @description adds a leading zero to the begin of a string if its length is 1, for example if we need a number with leading zero for a date
     */
    zeroFill = function zeroFill(stringToFill) {
        return ("00" + stringToFill).slice(-2);
    };

    removeSpecialChars = function removeSpecialChars(stringToModify) {
        return decodeURI(stringToModify).replace(/[^a-zA-Z0-9\/]/g, "");
    };

    /**
     * @alias Twenty.core.getPropertyByPath
     * @memberof Twenty.core
     * @description get a property of a given object by providing a path-string
     * @param {object} obj - the object containing the data we need
     * @param {string} path - the path to the data we need (example: 'data.items.item'
     */
    getPropertyByPath = function getPropertyByPath(obj, path) {
        var parts = path.split(".");
        if (parts.length === 1) {
            return obj[path];
        }
        if (Array.isArray(parts)) {
            var i = 1,
                current = parts[0];
            var last = parts.pop(),
                partsLength = parts.length;
            while ((obj = obj[current]) && i < partsLength) {
                current = parts[i];
                i++;
            }
            if (obj) {
                return obj[last];
            }
        } else {
            throw "parts is not valid array";
        }
    };

    /**
     * @alias Twenty.core.matchObjectKey
     * @memberof Twenty.core
     * @description check if an object contains a property which matches a given RegExp
     * @param {object} obj - the object you want to check
     * @param {object} regex - the regex you want to check against
     */
    matchObjectKey = function matchObjectKey(obj, regex) {
        var key;
        for (key in obj) {
            if (regex.test(key)) {
                return true;
            }
        }
        return false;
    };

    return {
        shallowCompare: shallowCompare,
        checkObjProps: checkObjProps,
        emptyFunction: emptyFunction,
        extend: extend,
        extendDeep: _extendDeep,
        copyObject: copyObject,
        getUniqueKey: _getUniqueKey,
        convertNames: convertNames,
        getAge: getAge,
        zeroFill: zeroFill,
        removeSpecialChars: removeSpecialChars,
        getPropertyByPath: getPropertyByPath,
        matchObjectKey: matchObjectKey
    };
}();

/**
 * @name Twenty.event
 * @class
 * @memberof Twenty
 * @description Eventhandling.
 * @example
 *  Twenty.event.subscribe({
 *      type: 'click',
 *      callback: () => {
 *          console.log('React 4eva!');
 *      }
 *  });
 */
Twenty.event = function () {

    var listeners = {},
        checkTypeAvailability,
        subscribe,
        unsubscribe,
        dispatch;

    checkTypeAvailability = function checkTypeAvailability(type) {
        if (listeners[type]) {
            return true;
        } else {
            console.log("no events registered on type " + type);
            return false;
        }
    };

    /**
     * @name subscribe
     * @method
     * @memberof Twenty.event
     * @param {Object} params - the config
     * @param {string} params.type - the event-name you want to listen to.
     * @param {string} params.source - the event-name you want to listen to.
     * @param {function} params.callback - the callback function
     */
    subscribe = function subscribe(params) {
        var type = params.type;
        if (!listeners[type]) {
            listeners[type] = [];
        }
        unsubscribe(params);
        listeners[type].push({
            source: params.source,
            callback: params.callback
        });
    };

    /**
     * @name subscribe
     * @method
     * @memberof Twenty.event
     * @param {Object} params - the config
     * @param {string} params.type - the event-name you are unsubscribing from.
     * @param {function} params.callback - a reference to the original function callback
     */
    unsubscribe = function unsubscribe(params) {
        var listenerz = listeners[params.type] && listeners[params.type];
        for (var i = 0; i < listenerz.length; i++) {
            if (params.source === listenerz[i].source && params.callback.toString() === listenerz[i].callback.toString()) {
                return;
            }
        }
    };

    /**
     * @name dispatch
     * @method
     * @memberof Twenty.event
     * @param {Object} params - the config
     * @param {string} params.type - the event-name you want to dispatch. Should be of the form "noun-verb" with the verb in the past tense.
        for example: pageLoaded, pageOpened, modalClosed
     * @example
     *  Twenty.event.dispatch({
     *      type: 'pageLoaded',
     *      params: {}
     *  });
     */
    dispatch = function dispatch(params) {
        if (checkTypeAvailability(params.type)) {
            var callbacks = listeners[params.type];
            for (var i = 0; i < callbacks.length; i++) {
                callbacks[i].callback.call(this, params);
            }
        }
    };

    return {
        listeners: listeners,
        subscribe: subscribe,
        unsubscribe: unsubscribe,
        dispatch: dispatch
    };
}();

/**
 * @name Twenty.dom
 * @class
 * @description helper functions which assume a browser, or do browser related stuff
 **/
Twenty.dom = function () {

    var loadedScripts = {},
        addScript,
        addScripts,
        scrollTo,
        _topPosition,
        getScrollTop,
        killScrollFunction,
        killWindowScroll,
        allowWindowScroll,
        toggleFullScreen,
        autofitIframes,
        autofitIframesLength,
        autofitIsReady = false,
        runAutofit,
        setupAutofit,
        teardownAutofit,
        sendmessageRegistry,
        setupSendmessage,
        runSendmessage,
        initSendmessage,
        domainCheck,
        checkEmail,
        isEmpty,
        checkFormElements,
        _cleanUrl,
        rewriteUrl,
        getURLParamsFromString,
        getURLParamsFromObject,
        getValueFromUrlParam,
        setUrlParams,
        getForcedWWW,
        getCookie,
        setCookie,
        dataStorage,
        vote,
        getStartPage,
        getURLNavigation,
        locationIsOutsideEU,
        userHasAcceptedCookies,
        initializeLazyLoader,
        getOrientation,
        isVideoPlaying,
        handleRotation,
        init;

    /**
    * @name addScript
    * @memberof Twenty.dom
    * @description add and load a custom script
    * @param {object} scriptParams
    * @param {string} scriptParams.scriptName the full or relative path of the script
    * @param {function|string} scriptParams.callback the callback function to run after the script is loaded
    * @param {function|string} scriptParams.params the params for the callback function
    * @param {array} scriptParams.attributes custom attributes for the script tag (name and value)
    */
    addScript = function addScript(scriptParams) {
        var scriptTags = document.head.getElementsByTagName("script"),
            js;

        if (loadedScripts[scriptParams.scriptName]) {
            return;
        }

        for (var i = 0; i < scriptTags.length; i++) {
            var currSrc = scriptTags[i].getAttribute("src");
            loadedScripts[currSrc] = true;
            if (currSrc === scriptParams.scriptName) {
                return;
            }
        }
        js = document.createElement("script");
        js.type = "text/javascript";
        js.src = scriptParams.scriptName;
        js.async = true;

        if (scriptParams.attributes) {
            for (var _i = 0; _i < scriptParams.attributes.length; _i++) {
                js[scriptParams.attributes[_i].name] = scriptParams.attributes[_i].value;
            }
        }

        js.addEventListener("load", function () {
            if (scriptParams.callback) {
                if (typeof scriptParams.callback === "function") {
                    scriptParams.callback(scriptParams.params);
                }
                if (typeof scriptParams.callback === "string") {
                    var ref = window;
                    var refs = scriptParams.callback.split(".");
                    while (refs.length > 0) {
                        ref = ref[refs.shift()];
                    }
                    setTimeout(ref, 120);
                }
            }
        }, true);

        js.addEventListener("error", function () {
            Twenty.tracking.errorlog({
                category: "dom",
                action: "addScript",
                label: "failed to dynamically load script: {" + scriptParams.scriptName + "}"
            });
        }, true);

        document.getElementsByTagName("head")[0].appendChild(js);
        loadedScripts[scriptParams.scriptName] = true;
    };

    /**
    * @name addScripts
    * @memberof Twenty.dom
    * @description add and load multiple custom scripts, and call a callback when they are all loaded.
    * Every script is added using {@link Twenty.dom.addScript}
    * @param {object} scriptParams
    * @param {array} scriptParams.scripts a list of all scripts to add (full or relative path)
    * @param {function|string} scriptParams.callback the callback function to run after all scripts are loaded
    * @param {function|string} scriptParams.params the params for the callback function
    */
    addScripts = function addScripts(scriptParams) {
        var scriptsLoaded = 0;
        scriptParams.scripts.forEach(function (script) {
            addScript({
                scriptName: script,
                callback: function callback() {
                    scriptsLoaded++;
                    if (scriptsLoaded === scriptParams.scripts.length) {
                        if (scriptParams.callback) {
                            if (typeof scriptParams.callback === "function") {
                                scriptParams.callback(scriptParams.params);
                            }
                            if (typeof scriptParams.callback === "string") {
                                var ref = window;
                                var refs = scriptParams.callback.split(".");
                                while (refs.length > 0) {
                                    ref = ref[refs.shift()];
                                }
                                setTimeout(ref, 120);
                            }
                        }
                    }
                }
            });
        });
    };

    /**
    * @name scrollTo
    * @memberof Twenty.dom
    * @description scroll the page to an element, allowing space for the header
    * @param {jQueryElement} el
    * @param {string} el
    * @param {?Number} position Or, you an send a position, and scroll the page to this number
    */
    scrollTo = function scrollTo(el, position) {
        var jqelem = true;
        if (!(el instanceof jQuery)) {
            if (typeof el === "string" && $(el)) {
                el = $(el);
            } else {
                jqelem = false;
            }
        }
        if (position) {
            $(window).scrollTop(position);
            return true;
        }
        if (jqelem) {
            $(window).animate({
                scrollTop: el.offset().top - 85
            }, 300);
        }
        return false;
    };

    /**
    * @name topPosition
    * @memberof Twenty.dom
    * @description get the pixels from the top of this element to the top of the page
    * @param {DOMNode} el
    * @returns {Number}
    */
    _topPosition = function topPosition(el) {
        if (!el || !el.offsetTop) {
            return 0;
        }
        return el.offsetTop + _topPosition(el.offsetParent);
    };

    /**
     * @name getScrollTop
     * @memberof Twenty.dom
     * @description what is the current scroll position in the viewport?
     * @returns {Number}
     */
    getScrollTop = function getScrollTop(scrollNode) {
        var isWindow = scrollNode && scrollNode.document && scrollNode.location && scrollNode.alert && scrollNode.setInterval;
        if (scrollNode && !isWindow) {
            return scrollNode.scrollTop;
        } else {
            return window.pageYOffset || (document.documentElement || document.body.parentNode || document.body).scrollTop;
        }
    };

    /**
    * @name killScrollFunction
    * @memberof Twenty.dom
    * @private
    * @description If we want to remove an event handler, we need a function to remove from it. And to add to it in the first place.
        this is that function. For killWindowScroll and allowWindowScroll.
        We use javascript *and* css. Belt and braces, boys and girls.
    */
    killScrollFunction = function killScrollFunction(e) {
        var body = document.getElementsByTagName("BODY")[0];
        e.preventDefault();
        e.stopPropagation();
        Twenty.app.setState("scrollTop", getScrollTop());
        body.classList.add("no-scroll");
        return false;
    };

    /**
    * @name killWindowScroll
    * @memberof Twenty.dom
    * @description Remove the possibility of scrolling from wheel events, scroll events, and touchmove events.
    * @example
        componentDidMount: function() {
            Twenty.dom.killWindowScroll();
        }
    */
    killWindowScroll = function killWindowScroll() {
        window.addEventListener("DOMMouseScroll", killScrollFunction, false);
        window.addEventListener("scroll", killScrollFunction, false);
        window.onwheel = killScrollFunction;
        window.ontouchmove = killScrollFunction;
    };

    /**
    * @name allowWindowScroll
    * @memberof Twenty.dom
    * @description Add the possibility of scrolling from wheel events, scroll events, and touchmove events when you remove a full screen component
    * @example
        componentWillUnmount: function() {
            Twenty.dom.allowWindowScroll();
        }
    */
    allowWindowScroll = function allowWindowScroll() {
        var body = document.getElementsByTagName("BODY")[0];
        window.removeEventListener("DOMMouseScroll", killScrollFunction, false);
        window.removeEventListener("scroll", killScrollFunction, false);
        window.onwheel = null;
        window.ontouchmove = null;
        body.scrollTop = Twenty.app.getState("scrollTop");
        Twenty.app.setState("scrollTop", null);
        body.classList.remove("no-scroll");
    };

    /**
    * @name toggleFullScreen
    * @memberof Twenty.dom
    * @description Request full screen / cancel it
    */
    toggleFullScreen = function toggleFullScreen(nodeElement) {
        var doc = window.document,


        // take provided node element for fs
        docEl = nodeElement || doc.documentElement,
            requestFullScreen,
            cancelFullScreen;

        requestFullScreen = docEl.requestFullscreen || docEl.mozRequestFullScreen || docEl.webkitRequestFullScreen || docEl.msRequestFullscreen;
        cancelFullScreen = doc.exitFullscreen || doc.mozCancelFullScreen || doc.webkitExitFullscreen || doc.msExitFullscreen;

        if (!doc.fullscreenElement && !doc.mozFullScreenElement && !doc.webkitFullscreenElement && !doc.msFullscreenElement) {
            requestFullScreen.call(docEl);
        } else {
            cancelFullScreen.call(doc);
        }
    };

    /**
    * @name getOrientation
    * @memberof Twenty.dom
    * @description determines Phone Orientation
    */
    getOrientation = function getOrientation() {
        var orientationType = window.screen.orientation.type;
        var currentOrientation = "";

        if (orientationType.includes("portrait")) {
            currentOrientation = "portrait";
        } else {
            currentOrientation = "landscape";
        }
        return currentOrientation;
    };

    /**
    * @name isVideoPlaying
    * @memberof Twenty.dom
    * @description determines if JW-Player in iframe is in play mode
    */
    isVideoPlaying = function isVideoPlaying() {
        var playerIframe = document.getElementsByClassName("video-frame");
        for (var i = 0; i < playerIframe.length; i++) {
            if (playerIframe[i].contentDocument.getElementsByClassName("jw-state-playing").length) {
                var activePlayerIframe = playerIframe[i]; // eslint-disable-line no-unused-vars
                return true;
            }
        }return false;
    };

    handleRotation = function handleRotation() {
        // ugly: api executes a funcion from app controller
        Twenty.datamodel.goToFullscreen();
    };

    runAutofit = function runAutofit(e) {
        var messageObject = e.data,
            currentIframeId,
            setIframe,
            contentHeight;

        if (autofitIsReady === true) {
            if (messageObject.iframeId) {
                setIframe = document.querySelector('iframe.autofit[data-id="' + messageObject.iframeId + '"]');

                switch (messageObject.type) {
                    case "autofit":
                        contentHeight = messageObject.contentHeight;

                        if (contentHeight !== parseInt(setIframe.style.height)) {
                            setIframe.style.height = contentHeight + "px";
                        }
                        break;
                    case "scrollTop":
                        if (messageObject.referrer !== location.href) {
                            window.scrollTo(0, 0);
                        }
                        break;
                    default:
                        break;
                }
            } else {
                for (var i = 0; i < autofitIframesLength; i++) {
                    currentIframeId = autofitIframes[i].getAttribute("data-id");
                    autofitIframes[i].contentWindow.postMessage({ iframeId: currentIframeId }, "*");
                }
            }
        }
    };

    setupAutofit = function setupAutofit() {
        if (document.querySelectorAll("iframe.autofit").length) {
            autofitIframes = document.querySelectorAll("iframe.autofit");
            autofitIframesLength = autofitIframes.length;

            for (var i = 0; i < autofitIframesLength; i++) {
                autofitIframes[i].setAttribute("data-id", "autofit-" + i);
                autofitIframes[i].setAttribute("allowfullscreen", "");
                autofitIframes[i].contentWindow.postMessage({ iframeId: "autofit-" + i }, "*");

                if (i === autofitIframesLength - 1) {
                    autofitIsReady = true;
                    window.addEventListener("message", runAutofit);
                }
            }
        }
    };

    teardownAutofit = function teardownAutofit() {
        if (autofitIframesLength) {
            for (var i = 0; i < autofitIframesLength; i++) {
                autofitIframes[i].removeAttribute("data-id");
            }
            autofitIsReady = false;
            window.removeEventListener("message", runAutofit);
        }
    };

    sendmessageRegistry = {};

    setupSendmessage = function setupSendmessage(config) {
        sendmessageRegistry[config.origin] = sendmessageRegistry[config.origin] || {};
        sendmessageRegistry[config.origin][config.message] = config.callback;
    };

    runSendmessage = function runSendmessage(e) {
        var information = e.origin.match(/^(https?):\/\/(.*?)(?::([0-9]+))?$/),
            origin;

        // match must be an array of length 4 (match, protocol, server, port)
        if (!information || information.length !== 4) {
            return false;
        }

        // verify data (type, domain, message)
        if (!e.data || e.data.type !== "sendmessage" || !e.data.domain || !e.data.message) {
            return false;
        }

        // put origin back together, including default ports
        origin = information[1] + "://" + information[2] + (information[3] ? ":" + information[3] : "");

        // origin has to match data
        if (e.data.domain !== origin) {
            return false;
        }

        // origin and message must be a registered handler callback
        if (!sendmessageRegistry[origin] || !sendmessageRegistry[origin][e.data.message] || typeof sendmessageRegistry[origin][e.data.message] !== "function") {
            return false;
        }

        // handle time
        window.setTimeout(sendmessageRegistry[origin][e.data.message], 4);
    };

    initSendmessage = function initSendmessage() {
        window.addEventListener("message", runSendmessage);
    };

    domainCheck = function domainCheck(iframe) {
        var html = null;
        try {
            var tempdoc = iframe.contentDocument || iframe.contentWindow.document;
            html = tempdoc.body.innerHTML;
        } catch (err) {
            //
        }
        return html !== null;
    };

    checkEmail = function checkEmail(address) {
        return address.match(/\b[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\.)+[A-Z]{2,4}\b/i);
    };

    // contains non whitespace
    isEmpty = function isEmpty(str) {
        return !str.match(/\S/);
    };

    /**
    * @name checkFormElements
    * @memberof Twenty.dom
    * @description check the validity of form elements, returning truthy or falsy, but
        also adding classnames of "error" for styling<br>
        If you want to know how they get removed again, take a look at {@link Twenty.app.afterPageChange}
    * @param {array} els form elements to check. Use HTML5 form elements for best results
    * @returns {Boolean}
    */
    checkFormElements = function checkFormElements(els) {
        var elementsOK = true,
            el,
            errorClass = Twenty.tracking.errorClass,
            i;

        for (i = 0; i < els.length; i++) {
            el = els[i];
            el.classList.remove(errorClass);
            if (el.type === "text" || el.type === "email" || el.type === "password" || el.type === "textarea") {
                if (isEmpty(el.value)) {
                    elementsOK = false;
                    el.classList.add(errorClass);
                }
            }
            if (el.type === "email") {
                if (!checkEmail(el.value)) {
                    elementsOK = false;
                    el.classList.add(errorClass);
                }
            }
            if (el.type === "tel") {
                if (!el.value.match(/\d/) || el.value.match(/\d/g).length < 6) {
                    elementsOK = false;
                    el.classList.add(errorClass);
                }
            }
        }
        if (!elementsOK) {
            $(".msg-error").show();
        }
        return elementsOK;
    };

    _cleanUrl = function cleanUrl(path) {
        // clean path (delete domain)
        path = path.replace(/^.*\/\/[^\/]+/, "").toLowerCase();
        if (path.charAt(0) !== "/") {
            path = "/" + path;
        }

        // also remove anything with a dot in it
        if (path.indexOf(".") > -1) {
            return _cleanUrl(path.substr(0, path.lastIndexOf("/")));
        } else {
            return path;
        }
    };

    /**
    * @name Twenty.dom.rewriteUrl
    * @memberof Twenty.dom
    * @description update the url, push an object onto the history.
    * @method
    * @param {Object} params
    * @param {?Object} params.stateObj  state object to be loaded with the history pop
    * @param {?string} params.title     the title to be displayed in the title bar (and to be visible in the history)
    * @param {string} params.path      either a URL or a URI (fully resolvable, or local path)
    **/
    rewriteUrl = function rewriteUrl(params) {
        var stateObj = params.stateObj || {},
            title = params.title || "20Minuten",
            fakelink = document.createElement("a");

        fakelink.href = params.path;
        if (Twenty.dom.getCookie("webAppLang") === "ro") {
            if (params.path.indexOf("ro/") !== 0) {
                params.path = "ro/" + params.path;
            }
        }
        Twenty.history.push({
            state: stateObj,
            title: title,
            path: _cleanUrl(params.path)
        });
    };

    /**
    * @name Twenty.dom.getURLParamsFromObject
    * @memberof Twenty.dom
    * @description get a url encoded string of &key=value pairs generated from a random object.
            simple objects only. No depth
    * @method
    * @param {Object} params Any object of depth 1.
    **/
    getURLParamsFromObject = function getURLParamsFromObject(params) {
        var paramsString = "";
        if (params && Object(params) === params) {
            for (var key in params) {
                if (Object.prototype.hasOwnProperty.call(params, key)) {
                    paramsString += "&" + key + "=" + encodeURIComponent(params[key]);
                }
            }
        }
        return paramsString;
    };

    /**
    * @name Twenty.dom.getURLParamsFromString
    * @memberof Twenty.dom
    * @description get all the params from a string
    * @method
    * @param {string} url
    **/
    getURLParamsFromString = function getURLParamsFromString(url) {
        if (url && typeof url === "string" && url.indexOf("?") > -1) {
            return url.split("?")[1].split("&");
        } else {
            return false;
        }
    };

    /**
    * @name Twenty.dom.getValueFromUrlParam
    * @memberof Twenty.dom
    * @description get the url parameters as an object
    * @method
    * @param {string} queryString      the query string (window.location.search.substring(1))
    * @returns {Object}                key / value object of params and values or false
    **/
    getValueFromUrlParam = function getValueFromUrlParam(key) {
        var queryString, pairs, keyval, i;
        queryString = window.location.search.substring(1);
        pairs = queryString.split("&");
        for (i = 0; i < pairs.length; i++) {
            keyval = pairs[i].split("=");
            if (keyval[0] === key && keyval[1]) {
                return keyval[1];
            }
        }
        return false;
    };

    /**
    * @name Twenty.dom.setUrlParams
    * @memberof Twenty.dom
    * @description save the url params in key value pairs
    * @method
    **/
    setUrlParams = function setUrlParams() {
        // eslint-disable-next-line no-undef
        var params = Twenty.dom.getURLParamsFromString(Tw.GLOBALS.originalPirateMaterial),
            returnObj = {};

        if (params) {
            params.forEach(function (el) {
                var item = el.split("=");
                returnObj[item[0]] = decodeURIComponent(item[1]);
            });
        }

        Twenty.dom.savedUrlParams = returnObj;
    };

    /**
    * @name Twenty.dom.getForcedWWW
    * @memberof Twenty.dom
    * @description if we think that we are on an m.dot, change this for a wwww.dot
    * @method
    **/
    getForcedWWW = function getForcedWWW(URLString) {
        if (URLString === "http://webapp.localhost") {
            URLString = Twenty.datamodel.host;
        }
        return URLString.replace("://m.", "://www.");
    };

    getCookie = function getCookie(cname) {
        var name = cname + "=";
        var ca = document.cookie.split(";");
        for (var i = 0; i < ca.length; i++) {
            var ck = ca[i];
            while (ck.charAt(0) === " ") {
                ck = ck.substring(1);
            }if (ck.indexOf(name) === 0) {
                return ck.substring(name.length, ck.length);
            }
        }
        return "";
    };

    /**
     * @name Twenty.dom.setCookie
     * @memberof Twenty.dom
     * @description easy sugar for cookie setting
     * @method
     * @param {cname} String the name of the cookie you want to set. Caveat: it does not attempt to check if this cookie already exists.
     * @param {cvalue} String the value of the cookie. Strings only, please
     * @param {exdays} Number number of days until the cookie should expire. We do that math.
     **/
    setCookie = function setCookie(cookieName, cookieValue) {
        var exdays = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

        var date = new Date(),
            expires,
            daysInMs;

        daysInMs = exdays * 24 * 60 * 60 * 1000;
        date.setTime(date.getTime() + daysInMs);
        expires = "expires=" + date.toUTCString();
        document.cookie = cookieName + "=" + cookieValue + "; " + expires + "; path=/;";
    };

    /**
     * @name Twenty.dom.dataStorage
     * @memberof Twenty.dom
     * @description accessor helper functions to localStorage making it easier to save and retrieve multiple items to a single value
     **/
    /**
     * @name Twenty.dom.dataStorage.add
     * @memberof Twenty.dom.dataStorage
     * @method
     * @param {String} key the unique id under which the value or values are to be set
     * @param {Primitve} data any primitive value which represents the saved value of the key, or, if it is set, the value of the id under the key
     * @param {?String} if you want to save a set of values, what is the id to which the data belongs
     * @return {Primitive} the value
     * @description add either a single value, or add to a set of values if it exists, and create it if it doesn't.
     * For example, if you wanted to set a simple value, perhaps the user font-size do dataStorage.add("userfontsize", "22px");
     * If you want to save the state of all stories the user has voted on do dataStorage.add("votedStories", story.id, "+1") (for example);
     **/
    /**
     * @name Twenty.dom.dataStorage.getItem
     * @memberof Twenty.dom.dataStorage
     * @method
     * @param {String} key
     * @param {Primitve} data any primitive value which represents the saved value of the key, or, if it is set, the value of the id under the key
     * @param {?String} id if you saved a set of values, the id you saved
     **/
    dataStorage = {
        add: function add(key, data, id) {
            var savedData = Twenty.dom.dataStorage.getItem(key),
                newData = data,
                mergedData;

            if (savedData instanceof Object) {
                if (id) {
                    mergedData = Object.defineProperty(savedData, id, {
                        value: data,
                        writable: true,
                        enumerable: true,
                        configurable: true
                    });
                } else {
                    mergedData = Object.assign(savedData, newData);
                }
            } else {
                if (id) {
                    mergedData = {};
                    mergedData[id] = data;
                } else {
                    mergedData = data;
                }
            }

            window.localStorage.setItem(key, JSON.stringify(mergedData));
        },
        getItem: function getItem(key, id) {
            var storageItem = JSON.parse(window.localStorage.getItem(key)),
                returnItem;
            if (id) {
                if (storageItem instanceof Object) {
                    returnItem = Object.keys(storageItem).indexOf(id) !== -1 && storageItem[id];
                }
            } else {
                returnItem = storageItem;
            }

            if (returnItem instanceof Object && Object.entries(returnItem).length === 0) {
                returnItem = null;
            }
            return returnItem;
        },
        setItem: function setItem(key, data) {
            dataStorage.add(key, data);
        }
    };

    /**
    * @name Twenty.dom.getStartPage
    * @memberof Twenty.dom
    * @private
    * @description decides which page is the front page, if you defined your own startPage inside initialAppProps in your controller this will be the front page
    * @returns {Object}
    {
        pageFunction: function,
        params: {}
    }
    **/
    getStartPage = function getStartPage() {
        var pageFunction, params;
        var initialAppProps = Twenty.app.controller.setInitialAppState();

        // if the application give a startPage instruction we change the default page function load
        if (initialAppProps.startPage) {
            switch (initialAppProps.startPage.pageType) {
                case "reactpage":
                    pageFunction = Twenty.page.load;
                    break;
                case "staticpage":
                default:
                    pageFunction = Twenty.app.controller.loadStaticPage;
            }
            params = initialAppProps.startPage.params;
        } else {
            pageFunction = Twenty.app.controller.loadFrontPage;
            params = {
                title: Twenty.page.pages.frontpage.rewriteObject.path
            };
        }

        return {
            pageFunction: pageFunction,
            params: params
        };
    };

    /**
    * @name Twenty.dom.getURLNavigation
    * @memberof Twenty.dom
    * @param {string} locationString a string equivalent to the window.location.href string
    * @description Take a URL and decide what to do with it; if the pathname is empty, "front", "frontpage" or matches with your start url (for more info see {@link Twenty.dom.getStartPage})<br />
    * if the url matches exactly with your defined path inside rewriteObject it loads the page, if not the function does run your own routing function inside your controller (pathname as parmeter)
    * @returns {Object}
    {
        pageFunction: function,
        params: {}
    }
    **/
    getURLNavigation = function getURLNavigation(locationString) {
        var tempAnchor = document.createElement("a"),
            startPage = getStartPage(),
            startUrl = startPage.params.title ? startPage.params.title.toLowerCase() : "frontpage",
            pathString,
            pathNames,
            returnObj = {};

        tempAnchor.href = locationString;
        if (tempAnchor.pathname.substring(1).match(/undefined$/)) {
            return false;
        }

        pathString = decodeURI(tempAnchor.pathname).toLowerCase();
        pathNames = pathString.substring(1).split("/");

        switch (pathNames[0]) {
            case startUrl:
            case "front":
            case "frontpage":
            case "":
                returnObj = startPage;
                break;
            default:
                // eslint-disable-next-line
                for (var key in Twenty.page.pages) {
                    if (Twenty.page.pages[key].rewriteObject && Twenty.page.pages[key].rewriteObject.path === pathString.replace(/^\//, "")) {
                        returnObj = {
                            pageFunction: Twenty.page.pages[key].contentType === "staticpage" ? Twenty.app.controller.loadStaticPage : Twenty.page.load,
                            params: Twenty.page.pages[key]
                        };
                        break;
                    }
                }
                if (!Object.keys(returnObj).length) {
                    if (Twenty.app.controller.routing) {
                        returnObj = Twenty.app.controller.routing(pathString);
                    }
                }
        }
        if (!returnObj.pageFunction) {
            returnObj.pageFunction = Twenty.app.controller.endOfHistoryFunction;
        }
        return returnObj;
    };

    locationIsOutsideEU = function locationIsOutsideEU() {
        var sitemaps = Twenty.datamodel.getSavedFeed("sitemap");

        if (sitemaps && sitemaps.content && sitemaps.content.jurisdiction && sitemaps.content.jurisdiction !== "eu") {
            return true;
        } else {
            return false;
        }
    };

    userHasAcceptedCookies = function userHasAcceptedCookies() {
        return locationIsOutsideEU() || getCookie("cookiesAccepted") ? true : false;
    };

    /**
    * @alias Twenty.dom.initializeLazyImageLoading
    * @method
    * @description initialize the jQuery Plugin for lazyloading images
    **/
    document.addEventListener("DOMContentLoaded", function () {
        $.fn.unveil = function (threshold, callback) {
            var $w = $(window),
                th = threshold || 0,
                // how far down the page it should look for images to load
            retina = window.devicePixelRatio > 1,
                attrib = retina ? "data-src-retina" : "data-src",
                // could potentially be useful to set 2 paths for 2 different image sizes
            images = this,
                // eslint-disable-line consistent-this
            loaded;

            // call this function once. It looks at all images with an attribute called "data-src".
            // If the images is in view or close it will set its src to data-src
            this.one("unveil", function () {
                var source = this.getAttribute(attrib);
                source = source || this.getAttribute("data-src");
                if (source) {
                    this.src = source;
                    if (typeof callback === "function") {
                        callback.call(this);
                    }
                }
            });

            // This function looks at every image and decides if it is in view or not. If it is, it will call the function above and
            // load the image. If it is already loaded, it won't even go in here
            function unveil() {
                var inview = images.filter(function () {
                    var $e = $(this),
                        wt,
                        wb,
                        et,
                        eb;
                    if ($e.is(":hidden")) {
                        return;
                    }

                    wt = $w.scrollTop(); // window scrollTop
                    wb = wt + $w.height(); // window boundaries: scrollTop + window height
                    et = $e.offset().top; // current image's offsetTop
                    eb = et + $e.height(); // current image's offsetTop + image height

                    // return true or false when the current image's offsetTop is bigger than
                    // window scrollTop minus the threshold AND current image's offsetTop is smaller or equal window boundaries plus threshold
                    return eb >= wt - th && et <= wb + th;
                });

                loaded = inview.trigger("unveil");
                images = images.not(loaded);
            }

            // set scroll events
            $w.on("scroll.unveil resize.unveil lookup.unveil", unveil);

            // initialize at the start
            unveil();
            return this;
        };
    }, false);

    /**
    * @name initializeLazyLoader
    * @memberof Twenty.dom
    * @param {number} dist - The threshold / distance to the element
    * @param {string} reporap - replace or append
    * @param {string} sel - selector
    * @description This fancy Lazyloader is a modification of Twenty.dom.initializeLazyImageLoading and can load scripts, css and other stuff
    * Just set a data-lazyloadcontent attribute with the content you want to load and set if you want to replace or append the content.
    * Example: Twenty.dom.initializeLazyLoader.init(300, 'replace', 'data-lazyloadcontent');
    */
    initializeLazyLoader = function initializeLazyLoader() {
        var $w = $(window),
            selector,
            injectDist,
            replaceORappend;

        var proximityLoad = function proximityLoad($el) {
            var elY = $el.offset().top,
                content = $el.attr(selector);

            var proximityCheck = function proximityCheck() {
                $el.dYb = Math.abs(elY - (window.pageYOffset + window.innerHeight));
                $el.dYt = Math.abs(elY - window.pageYOffset);

                if ($el.dYb < injectDist || $el.dYt < injectDist) {
                    $w.unbind("scroll.lazyproxyload", proximityCheck);
                    if (replaceORappend === "append") {
                        $el.append(content);
                    } else {
                        $el.html(content);
                    }
                }
            };

            $w.bind("scroll.lazyproxyload", proximityCheck);
            proximityCheck();
        };

        var initLazyLoader = function initLazyLoader(dist, reporap, sel) {
            injectDist = dist || 400;
            selector = sel || "data-lazyloadcontent";
            replaceORappend = reporap || "replace";

            $.each($("[" + sel + "]"), function () {
                proximityLoad($(this));
            });
        };

        return {
            initLazyLoader: initLazyLoader
        };
    };

    /**
    * @name Twenty.dom.init
    * @memberof Twenty.dom
    * @description init of Twenty.dom
    * @method
    **/
    init = function init() {
        setUrlParams();
        initSendmessage();
        Twenty.event.subscribe({
            type: "pageWillLoad",
            callback: function callback(params) {
                if (params.id === "errorpage") {
                    return false;
                }
                window.addEventListener("orientationchange", handleRotation);
                rewriteUrl(params.rewriteObject);
            }
        });
    };

    Twenty.event.subscribe({
        type: "frameworkReady",
        callback: function callback() {
            init();
        }
    });

    return {
        addScript: addScript,
        addScripts: addScripts,
        scrollTo: scrollTo,
        topPosition: _topPosition,
        getScrollTop: getScrollTop,
        killWindowScroll: killWindowScroll,
        allowWindowScroll: allowWindowScroll,
        toggleFullScreen: toggleFullScreen,
        setupAutofit: setupAutofit,
        teardownAutofit: teardownAutofit,
        setupSendmessage: setupSendmessage,
        domainCheck: domainCheck,
        checkFormElements: checkFormElements,
        rewriteUrl: rewriteUrl,
        getURLParamsFromString: getURLParamsFromString,
        getURLParamsFromObject: getURLParamsFromObject,
        getValueFromUrlParam: getValueFromUrlParam,
        setUrlParams: setUrlParams,
        getForcedWWW: getForcedWWW,
        getCookie: getCookie,
        setCookie: setCookie,
        dataStorage: dataStorage,
        vote: vote,
        getURLNavigation: getURLNavigation,
        userHasAcceptedCookies: userHasAcceptedCookies,
        initializeLazyLoader: initializeLazyLoader,
        getOrientation: getOrientation,
        isVideoPlaying: isVideoPlaying,
        handleRotation: handleRotation,
        init: init
    };
}();

/**
 * @name Twenty.env
 * @class
 * @description Provides information about the current environment. <br>
 * As an Application implementor, when you initialise the framework from within your
    application, you can overwrite the following environment settings
    <pre>Twenty.app.config("env", MyConfigObject)</pre>
    where MyConfigObject can have the following values (or a subset of them, or, where
    indicated, a superset).<br>
    Note that for every key, you can specify either a string or an object to provide
    localisation values.
    The default language is required. Other supported languages are not.
    If there is a language object, and a supported language does not have a value (but other
    languages do), then the string for the default language will be returned.
    example:
    <pre>
        netMetrix: {
            de: "http://20minde.wemfbox.ch/cgi-bin/ivw/CP/mobilesite",
            fr: "http://20minro.wemfbox.ch/cgi-bin/ivw/CP/mobilesite"
        },
    </pre>
    If you request the netMetrix endpoint, the application will return the string for the
    currently set language.<br>
    If you also support, say, English but there is no specific netMatrix endpoint URL, the
    German string will be returned.<br>
    <style>
        td {vertical-align: top}
    </style>

    <table border=1>
        <thead>
            <tr>
                <th>name</th><th>key</th><th>example value</th><th>description</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td rowspan="15" valign="top">servers</td>
                <td>host</td>
                <td>http://m.20min.ch</td>
                <td>the base URL of the mobile-version website (ie, the one we are making here)</td>
            </tr>
            <tr>
                <td>live</td>
                <td>http://www.20min.ch</td>
                <td>the main address of the non-mobile version of the website</td>
            </tr>
            <tr>
                <td>local</td>
                <td>http://webapp.localhost/</td>
                <td>URI of the locally hosted site (this could be file://something if you are not running from a server)</td>
            </tr>
            <tr>
                <td>feeds</td>
                <td>http://api.20min.ch</td>
                <td>Your feed service base URL</td>
            </tr>
            <tr>
                <td>api</td>
                <td>http://api.20min.ch</td>
                <td>Alternative feeds service if you have one</td>
            </tr>
            <tr>
                <td>tag</td>
                <td>http://api.20min.ch/feed/tag/</td>
                <td>Where can we find tag lists?</td>
            </tr>
            <tr>
                <td>adServer</td>
                <td>https://s3-eu-west-1.amazonaws.com/media.das.tamedia.ch/tatm/tatm.js</td>
                <td>If you are using TATM, please provide a link to your service</td>
            </tr>
            <tr>
                <td>testAdServer</td>
                <td>http://ads.mr-wolf.ch/tamedia/pp/tatm/tatm.js</td>
                <td>TATM test server script</td>
            </tr>
            <tr>
                <td>adConfig</td>
                <td>de-20minuten.ch</td>
                <td>If you are using TATM, your site-specific config</td>
            </tr>
            <tr>
                <td>netMetrix</td>
                <td>http://20minde.wemfbox.ch/cgi-bin/ivw/CP/mobilesite</td>
                <td>Your NetMetrix pixel base URL</td>
            </tr>
            <tr>
                <td>seismo</td>
                <td>http://stats01.20min.ch/seismo/2/0/</td>
                <td>If you are using the DND / 20minuten tracking service, seism, give the URI of the script which processes hits</td>
            </tr>
            <tr>
                <td>formData</td>
                <td>http://www.20min.ch/formulare/upload.tmpl</td>
                <td>a server-side script capable of recieving multipart form data</td>
            </tr>
            <tr>
                <td>formUpload</td>
                <td> </td>
                <td> </td>
            </tr>
            <tr>
                <td>recommender</td>
                <td>http://20min.rcmd.tda.io/rec/v1/20min/rec.json</td>
                <td>if you use the DND recommender server, the URI for your feed</td>
            </tr>
            <tr>
                <td>agb</td>
                <td>http://m.20min.ch/community/stories/story/30367687 </td>
                <td>a link to the terms and conditions </td>
            </tr>
            <tr>
                <td valign="top">banners</td>
                <td>any category name</td>
                <td>provide an object with a url of a banner image and a link of a destination to open when the user clicks it <pre>

{
    url: "http://www.20min.ch/sponsorv02.jpg",
    link: "https://www.sponsor.ch/"
},
                </pre></td>
                <td>the base URL of the mobile-version website (ie, the one we are making here)</td>
            </tr>
            <tr>
                <td>languageMapping</td>
                <td>a function</td>
                <td>(lang) => reuturn mappedLang</td>
                <td>if you need to transform custom language string into a standard one, do it here</td>
            </tr>
        </tbody>
    </table>
 */

Twenty.env = function () {
    "use strict";

    var BUILDOPTS, getEnvironment, servers, banners, config;

    /**
     * testcomponent is set by hijack.js when testing a component
     * [TODO] Maybe we should use hijack to set local and live as well
     * It's gotta be better than trying to read it from somewhere else
    */
    BUILDOPTS = {
        TESTCOMPONENT: "testcomponent",
        LOCALBUILD: "local",
        LIVE: "live",
        STAGING: "staging",
        ALF: "alf"
    };

    getEnvironment = function getEnvironment() {
        return BUILDOPTS.LIVE;
    };

    /**
     * @name Twenty.env.getServer
     * @method
     * @param {string} server - the a lookup value to the server you are looking for
     * @returns {string} - a fully realised URL for a server
    **/
    servers = function () {
        var serversData, getServer, configExtendDeep;

        serversData = {};

        getServer = function getServer(server) {
            if (serversData.hasOwnProperty(server)) {
                if (Twenty.core.matchObjectKey(serversData[server], /^[a-z]{2}$/)) {
                    var lang = Twenty.i18n.lang;
                    if (Twenty.env.languageMapping) {
                        lang = Twenty.env.languageMapping(lang);
                    }
                    if (serversData[server][lang].hasOwnProperty(Twenty.env.environment)) {
                        return serversData[server][lang][Twenty.env.environment];
                    } else {
                        return serversData[server][lang];
                    }
                } else {
                    if (serversData[server].hasOwnProperty(Twenty.env.environment)) {
                        return serversData[server][Twenty.env.environment];
                    } else {
                        return serversData[server];
                    }
                }
            } else {
                return false;
            }
        };

        configExtendDeep = function configExtendDeep(newServersData) {
            // serversData = s;
            serversData = Twenty.core.extendDeep(serversData, newServersData);
        };

        return {
            getServer: getServer,
            config: configExtendDeep
        };
    }();

    banners = function () {
        var bannersData, getBanner, configExtendDeep;

        bannersData = {};

        getBanner = function getBanner(banner) {
            if (bannersData.hasOwnProperty(banner)) {
                if (bannersData[banner].de) {
                    return bannersData[banner][Twenty.i18n.getLangStandard()];
                } else {
                    return bannersData[banner];
                }
            } else {
                return false;
            }
        };

        configExtendDeep = function configExtendDeep(newBannerData) {
            // bannersData = b;
            bannersData = Twenty.core.extendDeep(bannersData, newBannerData);
        };

        return {
            getBanner: getBanner,
            config: configExtendDeep
        };
    }();

    config = function config(obj) {
        if (obj.servers) {
            servers.config(obj.servers);
        }
        if (obj.getEnvironment) {
            Twenty.env.environment = obj.getEnvironment();
        }
        if (obj.banners) {
            banners.config(obj.banners);
        }
    };

    return {
        environment: getEnvironment(),
        getServer: servers.getServer,
        getBanner: banners.getBanner,
        config: config
    };
}(window);

/**
 * @name Twenty.user
 * @class
 * @description Provides information about the current user and methods to communicate with gigya registration services. <br>
 */
Twenty.user = function () {

    var onLogin, onLogout, getServerLogin, setServerLogin, setKruxUser, getUserInfo, getPaywallUserInfoFromMeta, getUserId, setUserInfo, getLoginState, showLogin, init;

    /**
    * @name Twenty.user
    * @object
    * @description Stores information about the current user such as the gigya user object or login state.
    */
    var userData = {};
    var userIsLoggedIn = false;

    // callback of gigya login
    onLogin = function onLogin(eventObj) {
        gigya.accounts.getAccountInfo({ extraProfileFields: "username, address, phones",
            callback: setUserInfo
        });
        setServerLogin(eventObj);
    };

    // callback of gigya logout
    onLogout = function onLogout(eventObj) {
        Twenty.datamodel.runAJAXRequest({
            url: document.location.origin + "/log/out",
            data: eventObj,
            type: "POST",
            xhrFields: {
                withCredentials: true
            },
            success: function success() {
                gigya.accounts.getAccountInfo({ extraProfileFields: "username, address, phones",
                    callback: setUserInfo
                });
            },
            error: function error(data) {
                Twenty.tracking.errorlog({
                    category: "user",
                    action: "onLogout",
                    label: "Could not logout on our server: " + data
                });
            }
        });
    };

    /*
     * @name getServerLogin
     * @method
     * @private
     * @memberof Twenty.user
     * @description Sends ajax request to server with gigyaId. Calls Twenty.user.setServerLogin if not logged in yet.
     */
    getServerLogin = function getServerLogin() {
        Twenty.datamodel.runAJAXRequest({
            url: Twenty.env.getServer("api") + "/personal/" + userData.gigyaObj.UID + "/checklogin?lang=" + Twenty.i18n.lang + "&webapp=1&cors=" + location.host,
            type: "GET",
            xhrFields: {
                withCredentials: true
            },
            success: function success(data) {
                setKruxUser(userData);
                userData.isLoggedIn = data.login;
                userIsLoggedIn = data.login;

                Twenty.event.dispatch({ type: "gigyaReady" });
                if (data.login === false) {
                    gigya.accounts.getAccountInfo({ extraProfileFields: "username, address, phones",
                        callback: setServerLogin
                    });
                }
            },
            error: function error(data) {
                Twenty.tracking.errorlog({
                    category: "user",
                    action: "setUserInfo",
                    label: "Could not check login on our server: " + data
                });
            }
        });
    };

    /*
     * @name setServerLogin
     * @method
     * @private
     * @memberof Twenty.user
     * @description Fires login on server. Called in callback of gigya login or on load (when already logged in on gigya but not on our server).
     */
    setServerLogin = function setServerLogin(eventObj) {
        Twenty.datamodel.runAJAXRequest({
            url: Twenty.env.getServer("live") + "/log/in?cors=" + location.host,
            data: eventObj,
            type: "POST",
            xhrFields: {
                withCredentials: true
            },
            success: function success() {
                // location.reload();
            },
            error: function error(data) {
                Twenty.tracking.errorlog({
                    category: "user",
                    action: "setServerLogin",
                    label: "Could not login on our server: " + data
                });
            }
        });
    };

    /*
     * @name setKruxUser
     * @method
     * @private
     * @memberof Twenty.user
     * @description Generates a hash of gigya user id and expose as global variable. More info @ https://docs.google.com/document/d/1wjUhOWXwvRxpQaGj8T40vCPpnZKxJFo32F-AeSwhi2U/
     */
    setKruxUser = function setKruxUser(userDataVariable) {
        Twenty.dom.addScript({
            scriptName: Twenty.env.getServer("xxhash"),
            callback: function callback() {
                window.tamediaBID_loaded = true;
                if (userDataVariable && XXH) {
                    var userHash = XXH.h64(userDataVariable.gigyaObj.UID, 0).toString(16);
                    window.tamediaBID = "20min/" + userHash;
                }
            }
        });
    };

    /*
     * @name Twenty.user.getUserInfo
     * @method
     * @memberof Twenty.user
     * @returns {String}
     * @param {String} key of gigya user object
     * @description Returns specific value of gigya user object by given key in params.
     * @example Twenty.user.getUserInfo("firstName") => "Silvio"
    */
    getUserInfo = function getUserInfo(key) {
        if (userData) {
            if (Twenty.env.getServer("gigya") && userData.isLoggedIn) {
                return userData.gigyaObj.profile[key];
            }
            if (Twenty.env.getServer("paywall")) {
                return userData.paywall && userData.paywall[key];
            }
        } else {
            return "";
        }
    };

    /*
     * @name Twenty.user.getPaywallUserInfoFromMeta
     * @method
     * @memberof Twenty.user
     * @returns {Object}
     * @description Returns the object in meta c1_user_info added by paywall if set, else return undefined.
    */
    getPaywallUserInfoFromMeta = function getPaywallUserInfoFromMeta() {
        if (userIsLoggedIn) {
            return userData.paywall;
        } else {
            var metaElement = document.querySelectorAll('[name="c1_user_info"]').length ? document.querySelectorAll('[name="c1_user_info"]')[0] : false;
            if (metaElement && metaElement.getAttribute("content")) {
                try {
                    JSON.parse(metaElement.getAttribute("content"));
                } catch (e) {
                    return false;
                }
                userIsLoggedIn = true;
                userData.paywall = JSON.parse(metaElement.getAttribute("content"));
                return userData.paywall;
            }
        }
    };

    /*
    * @name Twenty.user.getUserId
    * @method
    * @memberof Twenty.user
    * @returns {String} Gigya UID or undefined
    * @description get the Gigya UID (user id) from the logged in user
    */
    getUserId = function getUserId() {
        if (getLoginState() === true) {
            return userData.gigyaObj.UID;
        } else {
            return "undefined";
        }
    };

    // callback of gigya login/logout
    setUserInfo = function setUserInfo(data) {
        if (data.errorCode === 0 && data.UID.length > 0) {
            userData.gigyaObj = data;
            getServerLogin(); // If already logged in on gigya, check login state on our server.
        } else {
            userData.isLoggedIn = false;
            userData.gigyaObj = data;
            setKruxUser();
            Twenty.event.dispatch({ type: "gigyaReady" });
        }
    };

    /*
     * @name Twenty.user.showLogin
     * @method
     * @memberof Twenty.user
     * @description Shows gigya login in a popup. If it's a webview within the native app, we do not initialize the gigya screenset by ourselves, but open a deeplink which initializes the native gigya screenset.
     */
    showLogin = function showLogin() {
        if (Twenty.app.getState("nativeView")) {
            document.location = "tmnews://loggedInOnly?id=" + Twenty.app.getState("story"); // deeplink to register/login screen which redirects back to this story when finished
        } else {
            var activePages = document.getElementsByClassName("page-active");
            for (var i = 0; i < activePages.length; i++) {
                activePages[i].style.display = "none"; // hiding currently active pages to prevent overflow problems
            }
            gigya.accounts.showScreenSet(Twenty.datamodel.gigyaCfg.showScreenSet.RegistrationLogin);
        }
    };

    /*
     * @name Twenty.user.getLoginState
     * @method
     * @memberof Twenty.user
     * @returns {Boolean}
     * @description Returns true if the current user is logged in.
     */
    getLoginState = function getLoginState() {
        if (Twenty.env.getServer("gigya")) {
            return userData.isLoggedIn;
        }

        if (Twenty.env.getServer("paywall")) {
            return userData.paywall;
        }
    };

    /**
    * @name Twenty.user.init
    * @memberof Twenty.user
    * @description init of Twenty.user
    * @method
    **/
    init = function init() {
        // get gigya or paywall info
        if (Twenty.env.getServer("gigya")) {
            // Fired by gigya when ready to use. More information @ http://developers.gigya.com/display/GD/JavaScript+API
            window.onGigyaServiceReady = function () {
                gigya.accounts.getAccountInfo({ extraProfileFields: "username, address, phones",
                    callback: setUserInfo
                });
                gigya.accounts.addEventHandlers({
                    onLogin: onLogin,
                    onLogout: onLogout
                });
            };
        }
        if (Twenty.env.getServer("paywall")) {
            var url = window.location.href;
            if (url.indexOf("//m.") > -1 || url.indexOf("//m-igr.") > -1) {
                var initPaywall = function initPaywall() {
                    cre_templateclient.setup({ container_id: "paywall_container" });
                    getPaywallUserInfoFromMeta();
                };
                Twenty.dom.addScripts({
                    scripts: [Twenty.env.getServer("paywallTemplateSets"), Twenty.env.getServer("paywallTemplateClient"), Twenty.env.getServer("paywallTracking")],
                    callback: initPaywall
                });
            }
        }
    };

    if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") {
        Twenty.event.subscribe({
            type: "frameworkReady",
            callback: function callback() {
                init();
            }
        });
    }

    return {
        getLoginState: getLoginState,
        getUserInfo: getUserInfo,
        getPaywallUserInfoFromMeta: getPaywallUserInfoFromMeta,
        getUserId: getUserId,
        showLogin: showLogin,
        init: init
    };
}();

/**
 * @name Twenty.history
 * @class
 * @description coming soon
 **/

Twenty.history = function () {
    "use strict";

    var history = [],
        adPreviewParams,
        clickedHistoryBtn = false,
        index = -1,
        lastIndex = index,
        push,
        back,
        forward,
        canGoBack,
        canGoForward,
        getLastIndex,
        reset,
        stats,
        goBack;

    /**
    * @name Twenty.history.push
    * @method
    * @memberOf Twenty.history
    * @param {Object} obj Contains a path attribute with a path-like-string value
    * @returns {Boolean} The path was pushed to the history
    * @description As this is a single page application, the only page that the browser is
        aware of is the initial index.html. Everything else needs to be faked, or pushed
        to the history. That is what this history method does, via an object parameter containing
        a path.
        If the app is launched with a search string, those values are available to the
        application via [@link Twenty.dom.savedUrlParams], but they are lost to the location
        bar.
        If you want them (for tracking purposes, for example) to be passed to the location
        bar for the first page load, then set
        controller.retainURLParams to true in your controller.
    */
    push = function push(obj) {
        var searchString = "";
        if (!obj || (typeof obj === "undefined" ? "undefined" : _typeof(obj)) !== "object") {
            return false;
        }

        // check if all the necessary keys are inside the provided object
        if (!Twenty.core.checkObjProps(obj, ["path"])) {
            return false;
        }

        // if user clicked forward or back button, don't push anything
        if (clickedHistoryBtn) {
            setTimeout(function () {
                clickedHistoryBtn = false;
            }, 700);
            return false;
        }

        if (Twenty.app && Twenty.app.getState) {
            adPreviewParams = Twenty.app.getState("adPreviewParams");
            if (adPreviewParams) {
                obj.path += adPreviewParams;
            }
        }

        /* Deleting something from the controller sounds whack, but it is
        valid in this instance. After we have used them once, we no longer
        want them retaining.
        */
        if (Twenty.app.controller && Twenty.app.controller.retainURLParams) {
            searchString = window.Tw.GLOBALS.originalPirateMaterial;
            if (obj.path.indexOf("?") > -1) {
                searchString = searchString.replace(/^\?/, "&");
            }
            obj.path += searchString;
            delete Twenty.app.controller.retainURLParams;
        }

        // in case we can go forward right now
        if (history[index + 1]) {
            // if the provided path is not the same as the one ahead
            if (obj.path !== history[index + 1].path) {
                // let's delete everything ahead and push the provied object, which will now be the last one in the array
                try {
                    obj.index = lastIndex = index;
                    window.history.pushState(obj, "", obj.path);
                    history.splice(index, history.length - index);
                    history.push(obj);
                    index = history.length - 1;
                    return true;
                } catch (err) {
                    Twenty.tracking.errorlog({
                        category: "history",
                        action: "push",
                        label: "Cross-Origin-Push to History is not allowed"
                    });
                    return false;
                }
            } else {
                return false;
            }
        } else {
            // in case we can't go forward right now
            // return false, if we try to push the same object with the same path again...
            if (history.length) {
                if (history[history.length - 1].path === obj.path) {
                    return false;
                }
            }

            // or just push the provied object
            try {
                obj.index = index + 1;
                window.history.pushState(obj, "", obj.path);
                history.push(obj);
                index = history.length - 1;
                lastIndex = index;
                return true;
            } catch (err) {
                Twenty.tracking.errorlog({
                    category: "history",
                    action: "push",
                    label: "Cross-Origin-Push to History is not allowed"
                });
                return false;
            }
        }
    };

    back = function back(steps) {
        // go back more than once if 'steps' is provied and return a history-object
        var i;
        if (steps && typeof steps === "number") {
            for (i = 0; i < steps; i++) {
                if (index > 0) {
                    lastIndex = index;
                    index--;
                }
            }
            return history[index];
        }

        // go back and return the history-object, or false if we can't go back
        if (index > 0) {
            lastIndex = index;
            index--;
        }
        if (!history[0]) {
            return false;
        } else {
            return history[index];
        }
    };

    forward = function forward(steps) {
        // go forward more than once if "steps" is provied and return a history-object
        var i;
        if (steps && typeof steps === "number") {
            for (i = 0; i < steps; i++) {
                if (index < history.length - 1) {
                    index++;
                    lastIndex = index;
                }
            }
            return history[index];
        }

        // go forward if we can and always return a history-object
        if (index < history.length - 1) {
            index++;
            lastIndex = index;
        }
        return history[index];
    };

    canGoBack = function canGoBack() {
        return index > 0;
    };

    canGoForward = function canGoForward() {
        return index < history.length - 1;
    };

    reset = function reset() {
        index = -1;
        history.length = 0;
    };

    getLastIndex = function getLastIndex() {
        return lastIndex;
    };

    stats = function stats() {
        console.log("History Index", index);
        console.log("History lastIndex", lastIndex);
        console.log("History Elements", history.length);
        console.log("History Array", history);
    };

    goBack = function goBack() {
        var path, nav;
        if (canGoBack()) {
            path = back().path;
            nav = Twenty.dom.getURLNavigation(path);

            // GTM tracking
            Twenty.event.dispatch({
                type: "backButtonClick",
                params: {
                    event: "backButtonClick",
                    refURL: window.location.origin + path
                }
            });
            nav.pageFunction(nav.params);
        } else {
            // if you can't go forwards, and you can't go back
            Twenty.app.controller.endOfHistoryFunction.call(this);
        }
    };

    window.onpopstate = function (e) {
        e.preventDefault();
        if (Twenty.app.getState("modal")) {
            // "undo" the popstate without triggering it again
            window.history.pushState(history[index], "", history[index].path);

            // then just close the modal
            Twenty.app.controller.closeModal();
        } else {
            if (e.state) {
                if (e.state.index <= getLastIndex()) {
                    Twenty.history.goBack();
                } else {
                    if (canGoForward()) {
                        var nav = Twenty.dom.getURLNavigation(Twenty.history.forward().path);
                        nav.pageFunction(nav.params);
                    }
                }
            } else {
                console.log("no state found in history");
                return false;
            }
        }
    };

    if ("scrollRestoration" in window.history) {
        window.history.scrollRestoration = "manual";
    }

    return {
        push: push,
        back: back,
        forward: forward,
        canGoBack: canGoBack,
        canGoForward: canGoForward,
        reset: reset,
        stats: stats,
        goBack: goBack
    };
}();

/**
* @mixin
* @memberof Twenty
* @description React allows for reusable chunks of react-specific code to be build in via
*   a <code>mixins</code> declaration in the configuration object of React.createClass()
*   (the place you put the <code>render</code> function.
*   <br>
*   They aren't really mixins, more like supers which can be used to enhance an existing
*   object to produce something which looks a bit like a mixin. If the quack fits, I guess.
* @example
* React.createClass({
*
*  mixins: [Twenty.mixins.pageMount],
*
*   render: (
*       return (
*           // something which renders to a single DOM node
*       )
*   )
*   )}
*
*  Note to self... you can totally find out what page is currently loaded with
*  Twenty.app.getState("page");
*/
Twenty.mixins = {

    /**
    * @name Twenty.mixins.inputValidation
    * @memberof Twenty.mixins
    * @description
    * regex: this tests inputs (first argument) against regex pattern (second) and outputs error messages
    * required: checks if required input has a value/input
    */
    validation: {
        regex: function regex(input, pattern) {
            var regex = new RegExp(pattern);
            return regex.test(input);
        },
        required: function required(input) {
            if (input) {
                return true;
            } else {
                return false;
            }
        }
    },

    /**
    * @name Twenty.mixins.i18n
    * @memberof Twenty.mixins
    * @description If a component can be instantiated as a widget, it's going to need to
        copy the i18n strings from the config object to the Twenty.i18n object.
        It will always overwrite an existing i18n object if there is one in the config.
    */
    i18n: {
        componentWillMount: function componentWillMount() {
            if (this.props.config && this.props.config.i18n) {
                Twenty.i18n.Components = Twenty.i18n.Components || {};
                Twenty.i18n.Components[this.myNameIs] = this.props.config.i18n;
            }
        }
    },

    /**
    * @name Twenty.mixins.pureRender
    * @memberof Twenty.mixins
    * @description Use this mixin to ensure that "simple" components (ie, those which do not have children
        or state changes) do not slow down the re-rendering of a page.
    */
    pureRender: {
        shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
            return !(Twenty.core.shallowCompare(this.props, nextProps) && Twenty.core.shallowCompare(this.state, nextState));
        }
    },

    /**
    * @name Twenty.mixins.pageMount
    * @memberof Twenty.mixins
    * @description This provides standard functionality to every react page and should be
    * included at the top of every react page.
    */
    pageMount: {
        getInitialState: function getInitialState() {
            return {
                data: [],
                onClick: ""
            };
        }
    },

    /**
    * name toast
    * @memberof Twenty.mixins
    * @description This mixin is used to show and hide toast-messages.
    */
    toast: {
        showToastMessage: function showToastMessage(name) {
            var _this = this;

            var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4000;

            this.showToast(name);
            setTimeout(function () {
                _this.hideToast(name);
            }, delay);
        },
        showToast: function showToast(configName) {
            var cfg = _extends({}, this.state[configName]);
            cfg.show = true;
            this.setState(_defineProperty({}, configName, cfg));
        },
        hideToast: function hideToast(configName) {
            var cfg = _extends({}, this.state[configName]);
            cfg.show = false;
            this.setState(_defineProperty({}, configName, cfg));
        }
    },

    /**
    * @name Twenty.mixins.runAfterRender
    * @memberof Twenty.mixins
    * @description will run WHEN Dom-Elements are available (unlike componentDidMount and React.render's callback. They work better with setTimeout)
    * Explanation: The variable "animationFramesPassed" is necessarry, because after "requestAnimationFrame" successfully found a DOM-Node,
    * it still doesn't work very reliably... so we let pass another frame and then we invoke the after-render-callback
    */
    runAfterRender: {
        componentDidMount: function componentDidMount() {
            var _this3 = this;

            var animationFramesPassed = 0,
                runAfterRender;

            runAfterRender = function (callback) {
                var _this2 = this;

                var browserPrefixes = ["ms", "o", "moz", "webkit"],
                    i = 0;
                for (i = 0; i < browserPrefixes.length && !window.requestAnimationFrame; i++) {
                    window.requestAnimationFrame = window[browserPrefixes[i] + "RequestAnimationFrame"];
                }
                window.requestAnimationFrame(function () {
                    try {
                        if (ReactDOM.findDOMNode(_this2) === null) {
                            runAfterRender(callback);
                        } else {
                            if (animationFramesPassed === 0) {
                                animationFramesPassed = 1;
                                runAfterRender(callback);
                                return;
                            }
                            callback();
                        }
                    } catch (e) {
                        console.log("the node you are trying to do something with has probably been removed from the dom.", e);
                    }
                });
            }.bind(this);

            runAfterRender(function () {
                _this3.state.runAfterRenderCallback();
            });
        }
    }
};

/**
 *  @name Twenty.staticpages
 *  @class
    @description There are four ways to create a page -
    Placeholder for static pages.
    Static pages must contain all their JS and CSS within the HTML file. This will be
    unloaded when the page is also unloaded, so keep it self contained. <br>
    A static page should initialise itself at the end of the body, and it's functionality
    should be exclusively comprised the attaching of event listeners to dom nodes.

    @example
    <script>
        Twenty.staticpages.leserreporter();
    </script>
 */
Twenty.staticpages = {};

/**
 *  @name Twenty.page
 *  @class
 *  @description A collection of {TwentyPageParam} objects which represent the meta-data
 *    required to create and populate pages, and to manage the trasitions between them.
 *    These are not the actual pages, and this namespace is intended for internal framework
 *    use and should never be addressed directly. <br>
 *  There are four ways to create a page -
 *   <ul>
 *       <li>build it yourself from JQuery / DOM manipuations</li>
 *       <li>or create a jsx file full of lovely React components</li>
 *       <li>write it all as a renderable HTML string</li>
 *       <li>create a static page and create an accessor method in {@link Twenty.app.controller}
 *   </ul>
 * Once you have built a page, register (With Twenty.page.register(@TwentyPageParam)) it in here. This is guaranteed to be available before
 * component is mounted, so you can (well, [must]{@link https://www.ietf.org/rfc/rfc2119.txt}) add the Twenty.page.pages
 * definition to your jsx file.
 */
Twenty.page = function () {
    var animationEndListener = {},
        _close,
        closeModal,
        showPage,
        loadPageContent,
        getPageContent,
        saveScrollPos,
        createPage,
        load,
        register,
        initStaticPage;

    /**
     * @name clearAnimationEndListener
     * @memberof Twenty.page
     * @private
     * @param {Object} pageNode a page node (needs to have an id)
     * @description clears the stored animation end listener
     */
    var clearAnimationEndListener = function clearAnimationEndListener(pageNode) {
        // remove event listener
        if (animationEndListener[pageNode.id]) {
            pageNode.removeEventListener("webkitAnimationEnd", animationEndListener[pageNode.id]);
            pageNode.removeEventListener("animationend", animationEndListener[pageNode.id]);
        }

        // clear stored listener
        animationEndListener[pageNode.id] = null;
    };

    /**
     * @name setAnimationEndListener
     * @memberof Twenty.page
     * @private
     * @param {Object} pageNode  a page node (needs to have an id)
     * @param {Callback} listener an event listener callback
     * @description clears a previously set animation end listener and then sets a new one
     */
    var setAnimationEndListener = function setAnimationEndListener(pageNode, listener) {
        // clear old event listener first
        clearAnimationEndListener(pageNode);

        // then add new event listener
        pageNode.addEventListener("webkitAnimationEnd", listener);
        pageNode.addEventListener("animationend", listener);

        // and finally store new event listener for later removal
        animationEndListener[pageNode.id] = listener;
    };

    /**
    * @name Twenty.page.close
    * @memberof Twenty.page
    * @method
    * @param {TwentyPageParams} pageParams of the page to close
    * @description closes a page
    **/
    _close = function close(pageParams) {
        var pageNode = document.getElementById(pageParams.id),
            classesIn = pageParams.transition.in,
            classesOut = pageParams.transition.out;
        if (pageNode) {
            if (classesIn && classesIn.length) {
                var _pageNode$classList;

                (_pageNode$classList = pageNode.classList).remove.apply(_pageNode$classList, _toConsumableArray(classesIn));
            }
            if (pageParams.type === "modal") {
                var lastPageBeforeModal = Twenty.app.getState("lastPageBeforeModal"),
                    lastScrollBeforeModal = Twenty.app.getState("lastScrollBeforeModal"),
                    currentPage = Twenty.app.getState("page"),
                    endCloseModalTransition = function endCloseModalTransition() {
                    // only run if the modal is closed on "animationend"
                    if (!Twenty.app.getState("modal")) {
                        pageNode.classList.remove("modal-active");
                        if (classesOut && classesOut.length) {
                            var _pageNode$classList2;

                            (_pageNode$classList2 = pageNode.classList).remove.apply(_pageNode$classList2, _toConsumableArray(classesOut));
                        }
                        if (!pageParams.persist) {
                            ReactDOM.unmountComponentAtNode(pageNode);
                        }
                    }
                    clearAnimationEndListener(pageNode, endCloseModalTransition);
                };

                Twenty.app.setState("modal", false);
                document.getElementById(lastPageBeforeModal.id).style.height = "auto";
                document.body.style.overflow = "visible";

                if (lastPageBeforeModal.id === currentPage.id) {
                    if (currentPage.lastScrollPosIndicator) {
                        if (lastPageBeforeModal[lastPageBeforeModal.lastScrollPosIndicator] === currentPage[currentPage.lastScrollPosIndicator]) {
                            window.scrollTo(0, lastScrollBeforeModal);
                        }
                    } else {
                        window.scrollTo(0, lastScrollBeforeModal);
                    }
                    Twenty.event.dispatch({
                        type: "modalClosed",
                        headerConfig: lastPageBeforeModal.headerConfig
                    });
                } else {
                    _close(lastPageBeforeModal);
                }

                if (classesOut && classesOut.length) {
                    var _pageNode$classList3;

                    (_pageNode$classList3 = pageNode.classList).add.apply(_pageNode$classList3, _toConsumableArray(classesOut));
                    setAnimationEndListener(pageNode, endCloseModalTransition);
                } else {
                    endCloseModalTransition();
                }
            }
            if (pageParams.type === "page") {
                var lastScrollPos = void 0;
                /* eslint-disable indent */
                var endClosePageTransition = function endClosePageTransition() {
                    if (classesOut && classesOut.length) {
                        var _pageNode$classList4;

                        (_pageNode$classList4 = pageNode.classList).remove.apply(_pageNode$classList4, _toConsumableArray(classesOut));
                    }
                    pageNode.classList.remove("page-active");
                    ReactDOM.unmountComponentAtNode(pageNode);
                    clearAnimationEndListener(pageNode, endClosePageTransition);
                };
                /* eslint-enable indent */
                if (pageParams.lastScrollPosIndicator) {
                    var indicator = pageParams[pageParams.lastScrollPosIndicator];
                    lastScrollPos = pageParams.lastScrollPos[indicator] || 0;
                } else {
                    lastScrollPos = pageParams.lastScrollPos || 0;
                }
                pageNode.style.top = -lastScrollPos + (window.pageYOffset || window.scrollY || document.documentElement.scrollTop) + "px";

                if (classesOut && classesOut.length) {
                    var _pageNode$classList5;

                    (_pageNode$classList5 = pageNode.classList).add.apply(_pageNode$classList5, _toConsumableArray(classesOut));
                    setAnimationEndListener(pageNode, endClosePageTransition);
                } else {
                    endClosePageTransition();
                }
            }
        }
    };

    /**
    * @name Twenty.page.closeModal
    * @memberof Twenty.page
    * @method
    * @description calls {@link Twenty.page.close} with modal page params
    **/
    closeModal = function closeModal() {
        var openModal = Twenty.app.getState("modal");
        if (openModal) {
            Twenty.page.close(openModal);
        }
    };

    /**
    * @name showPage
    * @memberof Twenty.page
    * @method
    * @private
    * @param {TwentyPageParams} pageParams the params of the page to show
    * @description callback to {@link Twenty.page.loadPageContent}
    **/
    showPage = function showPage(pageParams) {
        var pageNode = document.getElementById(pageParams.id),
            classesIn = pageParams.transition.in,
            classesOut = pageParams.transition.out,
            headerConfig = pageParams.headerConfig;
        if (pageNode) {
            if (classesOut && classesOut.length) {
                var _pageNode$classList6;

                (_pageNode$classList6 = pageNode.classList).remove.apply(_pageNode$classList6, _toConsumableArray(classesOut));
            }
            if (pageParams.type === "modal") {
                /* eslint-disable indent */
                var endOpenModalTransition = function endOpenModalTransition() {
                    // only run if the modal is open on "animationend"
                    if (Twenty.app.getState("modal")) {
                        Twenty.event.dispatch({
                            type: "pageLoaded",
                            isModal: true,
                            headerConfig: headerConfig
                        });
                        document.getElementById(Twenty.app.getState("page").id).style.height = window.innerHeight + "px";
                        document.body.style.overflow = "hidden";
                        if (classesIn && classesIn.length) {
                            var _pageNode$classList7;

                            (_pageNode$classList7 = pageNode.classList).remove.apply(_pageNode$classList7, _toConsumableArray(classesIn));
                        }
                    }
                    clearAnimationEndListener(pageNode, endOpenModalTransition);
                };
                /* eslint-enable indent */
                Twenty.app.setState("modal", pageParams);
                pageNode.classList.add("modal-active");
                if (classesIn && classesIn.length) {
                    var _pageNode$classList8;

                    (_pageNode$classList8 = pageNode.classList).add.apply(_pageNode$classList8, _toConsumableArray(classesIn));
                    setAnimationEndListener(pageNode, endOpenModalTransition);
                } else {
                    endOpenModalTransition();
                }
            }
            if (pageParams.type === "page") {
                var lastScrollPos = void 0;
                var oldPage = Twenty.app.getState("lastPage"),
                    endOpenPageTransition = function endOpenPageTransition() {
                    Twenty.event.dispatch({
                        type: "pageLoaded",
                        headerConfig: headerConfig
                    });
                    if (classesIn && classesIn.length) {
                        var _pageNode$classList9;

                        (_pageNode$classList9 = pageNode.classList).remove.apply(_pageNode$classList9, _toConsumableArray(classesIn));
                    }
                    clearAnimationEndListener(pageNode, endOpenPageTransition);
                };

                pageNode.classList.add("page-active");
                pageNode.style.top = "0";

                if (pageParams.saveScrollPos) {
                    if (pageParams.lastScrollPosIndicator) {
                        var indicator = pageParams[pageParams.lastScrollPosIndicator];
                        lastScrollPos = pageParams.lastScrollPos && pageParams.lastScrollPos[indicator] || 0;
                    } else {
                        lastScrollPos = pageParams.lastScrollPos || 0;
                    }
                } else {
                    lastScrollPos = 0;
                }
                window.scrollTo(0, lastScrollPos);

                if (oldPage) {
                    closeModal();
                    _close(Twenty.page.pages[oldPage.id]);
                } else {
                    classesIn = ["page-fade-in"];
                }

                if (classesIn && classesIn.length) {
                    var _pageNode$classList10;

                    (_pageNode$classList10 = pageNode.classList).add.apply(_pageNode$classList10, _toConsumableArray(classesIn));
                    setAnimationEndListener(pageNode, endOpenPageTransition);
                } else {
                    endOpenPageTransition();
                }
            }
        }
    };

    /**
    * @name loadPageContent
    * @memberof Twenty.page
    * @method
    * @private
    * @param {TwentyPageParams} pageParams the params of the page
    * @param {JSON} content the JSON content we get from the API
    * @param {function} callback the callback which gets executed
    * @description load the page content, callback to {@link Twenty.page.getPageContent}
    **/
    loadPageContent = function loadPageContent(pageParams, content, callback) {
        var pageName = pageParams.id,
            keyValue = Twenty.core.getUniqueKey("page"),
            adserver_url = content && content.content && content.content.adserver_url || Twenty.datamodel.getDefaultCategory(),
            errorMessage = "";

        adserver_url = adserver_url.replace(/\//g, "");

        if (pageParams.type === "page") {
            Twenty.app.setState("adserver_url", adserver_url);
        }
        switch (pageParams.contentType) {
            case "react":
                if (pageParams.type === "modal") {
                    ReactDOM.render(React.createElement("div", {
                        className: "modal-background",
                        onClick: function onClick() {
                            closeModal();
                        }
                    }, React.createElement("div", {
                        className: "modal-content",
                        onClick: function onClick(e) {
                            e.stopPropagation();
                        }
                    }, React.createElement(Twenty.Components[pageName], {
                        data: content,
                        key: keyValue
                    }))), document.getElementById(pageName), function () {
                        callback.call(this, pageParams);
                    });
                } else {
                    ReactDOM.render(React.createElement(Twenty.Components[pageName], {
                        data: content,
                        key: keyValue
                    }), document.getElementById(pageName), function () {
                        callback.call(this, pageParams);
                    });
                }
                break;
            case "staticpage":
                ReactDOM.render(React.createElement(Twenty.Components.staticpage, {
                    title: content.title
                }), document.getElementById(pageName), function () {
                    var $contentIframe = $("#" + pageName + " #staticcontentiframe"),
                        $contentDiv = $("#" + pageName + " #staticcontentdiv");
                    if (content.url) {
                        $contentIframe.attr("src", content.url);
                        $contentIframe.width("100%");
                        $contentIframe.height(Tw.GLOBALS.documentheight);
                        $contentIframe.css("display", "block");
                        $contentDiv.css("display", "none");
                        $contentIframe.addClass("autofit");
                        Twenty.dom.setupAutofit();
                        callback.call(this, pageParams);
                    } else {
                        $contentDiv.load("/webapp/staticpages/" + pageName + ".html", function (response, status, xhr) {
                            if (status === "error") {
                                Twenty.app.controller.loadErrorPage(xhr.statusText);
                            } else {
                                initStaticPage(pageName);
                                callback.call(this, pageParams);
                            }
                        });
                        $contentDiv.css("display", "block");
                        $contentIframe.css("display", "none");
                    }
                });
                break;
            case "domnode":
            case "string":
                $("#" + pageParams.id).empty().append(content);
                callback.call(this, pageParams);
                break;
            default:
                errorMessage = pageName + " does not seem to have a valid pageParams.contentType";
                Twenty.tracking.errorlog({
                    category: "page",
                    action: "loadPageContent",
                    label: pageName + " does not have a valid pageParams.contentType"
                });
                Twenty.app.controller.loadErrorPage(errorMessage);
        }
        if (errorMessage === "") {
            if (pageParams.type === "page") {
                Twenty.event.dispatch({
                    type: "contentLoaded"
                });
            }
        }
    };

    /**
    * @name getPageContent
    * @memberof Twenty.page
    * @method
    * @private
    * read the next two lines backwards
    * @param {TwentyPageParam} pageParams the page you want to render it into
    * @param {Object} dataObject is the data object that want to render
    * @param {Function} callback callback function to call after page content is received
    * @description get the page content
    **/
    getPageContent = function getPageContent(pageParams, dataObject, callback) {
        var useFeed;

        if (pageParams.preloadFeed && Twenty.datamodel.getSavedFeed(pageParams.preloadFeed)) {
            useFeed = Twenty.datamodel.getSavedFeed(pageParams.preloadFeed);
            loadPageContent(pageParams, useFeed, callback);
        } else {
            if (pageParams.feedParams && pageParams.feedParams.length !== 0) {
                useFeed = Twenty.datamodel.getFeedUrlWithParams(pageParams.feedUrl, pageParams.feedParams);
            } else {
                useFeed = Twenty.datamodel.getFeedUrl(pageParams.feedUrl);
            }
            Twenty.datamodel.runAJAXRequest({
                url: useFeed,
                dataType: "json",
                success: function success(data) {
                    loadPageContent(pageParams, data, callback);
                },
                error: function error(xhr, status) {
                    var errorMsg;
                    if (status === "error") {
                        errorMsg = xhr.statusText || xhr.responseJSON.message;
                    } else {
                        errorMsg = "Unknown error";
                    }
                    Twenty.app.controller.loadErrorPage(errorMsg);
                    Twenty.tracking.errorlog("error");
                }
            });
        }
    };

    /**
    * @name saveScrollPos
    * @memberof Twenty.page
    * @method
    * @private
    * @param {TwentyPageParam} pageParams page params
    * @description gets and saves the last scroll position into the page, if a lastScrollPosIndicator is defined the position is saved per instance of the page
    **/
    saveScrollPos = function saveScrollPos(pageParams) {
        var lastScrollPos = window.pageYOffset || window.scrollY || document.documentElement.scrollTop;

        if (pageParams.lastScrollPosIndicator) {
            var indicator = pageParams[pageParams.lastScrollPosIndicator];
            if (_typeof(pageParams.lastScrollPos) !== "object") {
                pageParams.lastScrollPos = {};
            }
            pageParams.lastScrollPos[indicator] = lastScrollPos;

            if (pageParams.id.endsWith("two")) {
                Twenty.page.pages[pageParams.id.substr(0, pageParams.id.length - 3)].lastScrollPos[indicator] = lastScrollPos;
            } else {
                if (Twenty.page.pages[pageParams.id + "two"]) {
                    Twenty.page.pages[pageParams.id + "two"].lastScrollPos[indicator] = lastScrollPos;
                }
            }
        } else {
            pageParams.lastScrollPos = lastScrollPos;

            if (pageParams.id.endsWith("two")) {
                Twenty.page.pages[pageParams.id.substr(0, pageParams.id.length - 3)].lastScrollPos = lastScrollPos;
            } else {
                if (Twenty.page.pages[pageParams.id + "two"]) {
                    Twenty.page.pages[pageParams.id + "two"].lastScrollPos = lastScrollPos;
                }
            }
        }
    };

    /**
    * @name createPage
    * @memberof Twenty.page
    * @method
    * @private
    * @param {TwentyPageParam} pageParams the page params of the page you want to create
    * @description The page holds the components. Create it with TwentyPageParams
    **/
    createPage = function createPage(pageParams) {
        var newPage = document.createElement("div");
        newPage.id = pageParams.id;
        newPage.setAttribute("height", "auto");
        newPage.classList.add(pageParams.type);
        return newPage;
    };

    /**
    * @name Twenty.page.load
    * @memberof Twenty.page
    * @method
    * @param {TwentyPageParam} pageParams - a page parameters object
    * @param {string} pageParams - a reference to a page (same as the id) which has been registered
    * @param {JSON} data -  if the page was registered with <kbd>params.content = "data"</kbd>,
        you can deliver a JSON object to form the page data here.
    * @param {string} data - If the page was registered with  <kbd>params.content = "feed"</kbd>, you can send
        a URL String here to update the feed URL.
    * @description page must exist as a valid object key in Twenty.page.pages - ie, it must have been registered. <br>
        Once the page definition is available to the app (ie, in Twenty.page.pages), you can
        magically swap to it from anywhere in the app by calling load with the registered page parameter object. <br>
        In more detail, Twenty.page.load does:
        <ul>
            <li>save old page scroll position<br>
                It would be nice to do this on close page, but it turns out that's too late - everything
                has already scrolled to the top again by the time we remove the old page ( we do it
                only after the new page is fully loaded.
                Storypages don't get their scroll position saved. Always loads stories at the top
                Category pages need saving individually, so in a lastScrollPos object. </li>
            <li>get and existing DOMNode, or create one if it doesn't exit. Give it an id of TwentyPageParam.id</li>
            <li>sets up a listener to Twenty.event.pageLoaded event</li>
            <li>check to see if the page content exists in memory. If not, goes and gets it</li>
            <li>position the page. This triggers the CSS classes update that triggers a page transition</li>
            <li>the end of this transition triggers the Twenty.event.pageLoaded event.</li>
        </ul>
    * @example
    * <caption>load by page params object, or by page name</caption>
    * Twenty.page.load(Twenty.page.pages.myPage);
    * Twenty.page.load(Twenty.page.pages.storypage, {// a feed object });
    * Twenty.page.load(Twenty.page.pages.staticpage, {pagename: "leserreporter", title: "Leser Reporter"});
    **/
    load = function load(pageParams, data) {
        var newPageNode,
            oldPage = Twenty.app.getState("page"),
            showFunction = showPage;

        if (typeof pageParams === "string") {
            pageParams = Twenty.page.pages[pageParams];
        }
        if (pageParams.id === oldPage.id) {
            if (Twenty.core.shallowCompare(pageParams, oldPage)) {
                closeModal();
                return false;
            } else {
                if (!Twenty.Components[pageParams.id + "two"]) {
                    Twenty.Components[pageParams.id + "two"] = Twenty.Components[pageParams.id];
                }
                pageParams.id = pageParams.id + "two";
            }
        }

        // we need to update the categorypage object after getting the page state
        Twenty.page.pages[pageParams.id] = pageParams;

        if (pageParams.type === "page") {
            Twenty.event.dispatch({
                type: "pageWillLoad",
                rewriteObject: pageParams.rewriteObject
            });
        }

        // if we're changing the feedUrl of a page, it gets sent as "data".
        if (pageParams.content === "feed" && typeof data === "string") {
            pageParams.feedUrl = data;
        }

        // save old page scroll position
        if (oldPage) {
            if (pageParams.type === "modal") {
                var lastScrollBeforeModal = window.pageYOffset || window.scrollY || document.documentElement.scrollTop;
                saveScrollPos(oldPage);
                Twenty.app.setState("lastPageBeforeModal", Twenty.page.pages[oldPage.id]);
                Twenty.app.setState("lastScrollBeforeModal", lastScrollBeforeModal);
            }
            if (pageParams.type === "page") {
                Twenty.app.setState("lastPage", Twenty.page.pages[oldPage.id]);

                // save scoll position only if NO modal is open
                if (!Twenty.app.getState("modal")) {
                    saveScrollPos(oldPage);
                }
            }
        }
        if (pageParams.type === "page") {
            Twenty.app.setState("page", pageParams);
        }

        if (document.getElementById(pageParams.id)) {
            newPageNode = document.getElementById(pageParams.id);
        } else {
            newPageNode = document.getElementsByClassName("application")[0].appendChild(createPage(pageParams));
        }

        // we either have some content, or we need some
        if (pageParams.content === "data") {
            loadPageContent(pageParams, data, showFunction);
        } else {
            switch (pageParams.contentType) {
                case "react":
                    if (pageParams.content === "feed" || Twenty.env.environment === "testcomponent") {
                        getPageContent(pageParams, "", showFunction);
                    } else {
                        loadPageContent(pageParams, "", showFunction);
                    }
                    break;
                case "domnode":
                    loadPageContent(pageParams, Twenty.Components[pageParams.id], showFunction);
                    break;
                default:
                    loadPageContent(pageParams, "", showFunction);
            }
        }

        if (pageParams.type === "page") {
            if (pageParams.callback) {
                pageParams.callback(newPageNode);
            }
        }
    };

    /**
    * @name Twenty.page.register
    * @memberof Twenty.page
    * @method
    * @param {TwentyPageParam} params - registration options
    * @description if you want load or change to a page, you must first register it
    * @example
    * <caption>this is how we register the categorypage page. It's a react page, based on a feed</caption>
    * Twenty.page.register({
        id: "categorypage",
        type: "page",
        feedParams: {},
        categoryName: "",
        preloadFeed: "",
        lastScrollPosIndicator: "categoryName",
        contentType: "react",
        content: "feed",
        feedUrl: "http://www.20min.ch/feed/view.tmpl?",
        transition: {
            in: ["page-slide-in-from-right"],
            out: ["page-slide-out-to-left"]
        },
        saveScrollPos: true
        feedUrl: "http://api.20min.ch/feed/view/1?key=276925d8d98cd956d43cd659051232f7&pagesize=12&page=1"
    * });
    **/
    register = function register(params) {
        if (Twenty.page.pages[params.id]) {
            Twenty.tracking.errorlog({
                category: "page",
                action: "register",
                label: "'" + params.id + "' already exists"
            });
        } else {
            Twenty.page.pages[params.id] = params;
        }
    };

    /**
    * @name initStaticPage
    * @memberof Twenty.page
    * @method
    * @private
    * @param {string} page the name of the static page
    * @description call the init function of a static page
    **/
    initStaticPage = function initStaticPage(page) {
        if (Twenty.page.pages[page] && Twenty.page.pages[page].init) {
            Twenty.page.pages[page].init();
        }
        Twenty.i18n.setupStaticPage(page);
    };

    return {
        close: _close,
        closeModal: closeModal,
        load: load,
        register: register
    };
}();

/**
 * @name Twenty.page.pages
 * @memberof Twenty.page
 * @description
 * This is the object which holds references to page constructor objects, {@link TwentyPageParam}
 **/
Twenty.page.pages = {};

Twenty.page.register({
    id: "loading-page",
    transition: {
        in: ["page-fade-in"],
        out: ["page-fade-out"]
    }
});

/**
 * @name Twenty.ads
 * @class
 * @memberof Twenty
 * @description all sorts of advertising management jollies. Please try to contain anything
 * ad based in here. Don't build it into the app.
 *
*/
Twenty.ads = function () {
    var storedPlacements = [],
        getAdServerUrl,
        registerPlacement,
        sendToTATM,
        loadPage,
        initialPageSetUp,
        dfpTargetingObj,
        init;

    dfpTargetingObj = {
        adpreview: "",
        sbpreview: "",
        storyid: null
    };

    getAdServerUrl = function getAdServerUrl() {
        var ads = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

        return ads.replace(/^\/(ro\/)?/, "");
    };

    /**
     * @name Twenty.ads.registerPlacement
     * @memberof Twenty.ads
    */
    registerPlacement = function registerPlacement(position, elementId) {
        var adserverUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
        var adHeader = arguments[3];
        var callback = arguments[4];


        adserverUrl = getAdServerUrl(adserverUrl);

        var placement = {
            adUnitName: position,
            targetContainerId: elementId,
            adserver_url: adserverUrl,
            adHeader: adHeader,
            callback: callback
        };
        storedPlacements.push(placement);
    };

    sendToTATM = function sendToTATM() {
        TATM.core.initAdUnits(storedPlacements);
        storedPlacements = [];
        setTimeout(function () {
            TATM.displayAds();
        }, 350);
    };

    loadPage = function loadPage() {
        if (window.TATM) {
            var adserverUrl = "",
                currentCat = void 0;
            var pageParams = Twenty.app.getState("modal") || Twenty.app.getState("page");

            // some placements won't have adserver_urls. Find one with one, and use this as the default
            for (var i = 0; i < storedPlacements.length; i++) {
                if (adserverUrl === "") {
                    adserverUrl = storedPlacements[i].adserver_url || "";
                }
            }

            // if somehow none of the stored placements managed to save an adserver_url, get the current category
            if (adserverUrl === "") {
                if (Twenty.app.getState("category")) {
                    currentCat = Twenty.app.getState("category");
                    currentCat = (currentCat.category || currentCat.category_id).toLowerCase();
                } else {
                    currentCat = Twenty.datamodel.getDefaultCategory();
                }
                adserverUrl = currentCat;
            }

            // fix the adserverUrl to every placement without it (from the default obtained above)
            for (var _i2 = 0; _i2 < storedPlacements.length; _i2++) {
                if (storedPlacements[_i2].adserver_url === "") {
                    storedPlacements[_i2].adserver_url = adserverUrl;
                }
            }

            dfpTargetingObj.storyid = Twenty.app.getState("story");
            TATM.updateView(Twenty.env.getServer("adConfig"), adserverUrl, dfpTargetingObj);

            if (pageParams.type !== "modal" && pageParams.id !== "commentspage") {
                // register an overlay advert
                storedPlacements.push({
                    adUnitName: "overlay",
                    targetContainerId: "werbung-overlay",
                    adserver_url: getAdServerUrl(adserverUrl),
                    callback: function callback() {
                        // console.log("overlay advert");
                    }
                });
            }

            sendToTATM();
        } else {
            Twenty.event.subscribe({
                type: "adLibLoaded",
                callback: function callback() {
                    initialPageSetUp(true);
                }
            });
        }
    };

    /**
     * @name Twenty.ads.initialPageSetUp
     * @memberof Once the ad library has loaded, initialise it. And, if there should be a page
     * to load, do that.
    **/
    initialPageSetUp = function initialPageSetUp(andLoadPage) {
        if (window.TATM) {
            var cat = Twenty.app.getState("category") || Twenty.datamodel.getDefaultCategory();
            if (cat.category_id) {
                cat = cat.category_id;
            }
            if (cat.category) {
                cat = cat.category;
            }
            cat = cat.toLowerCase();
            TATM.init(Twenty.env.getServer("adConfig"), cat, dfpTargetingObj);
            if (andLoadPage) {
                loadPage();
            }
        }
    };

    /**
     * @name Twenty.ads.init
     * @memberof Twenty.ads
    **/
    init = function init() {
        var googleParams = Twenty.dom.getValueFromUrlParam("google_preview"),
            adpreview = Twenty.dom.getValueFromUrlParam("adpreview");

        if (googleParams) {
            Twenty.app.setState("adPreviewParams", window.location.search);
            console.log("we have adPreviewParams");
        }
        if (adpreview) {
            Twenty.app.setState("adpreview", adpreview);
            dfpTargetingObj.adpreview = adpreview;
            console.log("initialised TATM with adpreview=" + adpreview);
        }
        Twenty.event.subscribe({
            type: "infiniteScroll",
            callback: function callback() {
                sendToTATM();
            }
        });
        Twenty.event.subscribe({
            type: "pageLoaded",
            callback: function callback() {
                // there are no adverts on overlays. Especially not modals
                // Fixes WEB-161
                var pageParams = Twenty.app.getState("modal") || Twenty.app.getState("page");
                // eslint-disable-next-line
                if ((pageParams.type !== "modal" || pageParams.showAds) && pageParams.contentType !== "staticpage") {
                    loadPage();
                }
            }
        });
        Twenty.event.subscribe({
            type: "adLibLoaded",
            callback: function callback() {
                initialPageSetUp();
            }
        });
        Twenty.event.subscribe({
            type: "appReady",
            callback: function callback() {
                if (!window.TATM && Twenty.env.getServer("adServer")) {
                    Twenty.dom.addScript({
                        scriptName: Twenty.env.getServer("adServer"),
                        callback: Twenty.event.dispatch,
                        params: { type: "adLibLoaded" }
                    });
                }
            }
        });

        // set up a placeholder for the page overlay adverts
        var wo = document.createElement("DIV");
        wo.id = "werbung-overlay";
        document.body.appendChild(wo);
    };

    Twenty.event.subscribe({
        type: "frameworkReady",
        callback: function callback() {
            init();
        }
    });

    return {
        registerPlacement: registerPlacement,
        init: init
    };
}();

/**
* @name Twenty.tracking
* @method
* @description Event tracking and error logging via google analytics.<br>
* Our google analytics dashboard is here: https://analytics.google.com/analytics/web/#home/a51607705w108477765p113039889/ <br>
* The list of events tracked is here, please see https://20minuten.atlassian.net/wiki/display/MW/API+Error+Tracking

/seismo/2/{lang - 0(de)| 1(ro)}/{storyid}/"undefined" (yes, the string "undefined")
*/
/**
* @name Twenty.tracking.errorlog
* @method
* @returns {Object}
*/
Twenty.tracking = function () {
    var dataLayerQueue = [],
        saveDataLayer,
        clearDataLayer,
        trackingPixels = {},
        netMetrixTracking,
        initTrackingPixel,
        trackNetMetrix,
        pageimpression,
        // eslint-disable-line no-unused-vars
    slideimpression,
        // eslint-disable-line no-unused-vars
    slidefullscreen,
        // eslint-disable-line no-unused-vars
    track,
        errorlog,
        initGhostbuster,
        initGTM,
        initNetMetrixProfile,
        init;

    saveDataLayer = function saveDataLayer(dataLayerObject) {
        dataLayerQueue.push(dataLayerObject);
    };

    clearDataLayer = function clearDataLayer() {
        dataLayerQueue = [];
    };

    initTrackingPixel = function initTrackingPixel(tracking) {
        if (!trackingPixels.hasOwnProperty(tracking)) {
            var trackingid = "TWENTY_PIXEL_" + tracking.toUpperCase(),
                trackingimg = document.createElement("img");
            trackingimg.id = trackingid;
            trackingimg.height = 1;
            trackingimg.width = 1;
            trackingPixels[tracking] = {
                id: trackingid,
                image: trackingimg
            };
            document.getElementsByTagName("body")[0].appendChild(trackingimg);
        }
    };

    trackNetMetrix = function trackNetMetrix(trackWhat) {
        var netMetrixStoryParams = "",
            splitUrlNetMetrix = [],
            splitUrl = window.location.pathname.split("/"),
            netMetrixPixUrl = "",
            additionalNetMetrixUrl;

        netMetrixPixUrl = Twenty.env.getServer("netMetrix");
        additionalNetMetrixUrl = Twenty.env.getServer("additionalNetMetrix");

        if (trackWhat === "pageimpression") {
            var page = Twenty.app.getState("page");

            // instead of the whole url /schweiz/zuerich/story/31253746 we only send /schweiz/zuerich/ to netmetrix
            for (var i = 0; i < splitUrl.length; i++) {
                if (splitUrl[i] === "story") {
                    break;
                }
                splitUrlNetMetrix.push(splitUrl[i]);
            }

            if (page.contentType === "staticpage" && !(splitUrlNetMetrix[1] === "tamedia" && splitUrlNetMetrix[2] === "ergebnisse")) {
                return false;
            }

            if (splitUrlNetMetrix[1] === "articles") {
                var storyData = Twenty.app.getState("storyData");
                if (Twenty.app.getState("storyData")) {
                    splitUrlNetMetrix[1] = Twenty.datamodel.netMetrixTag;
                    splitUrlNetMetrix[2] = storyData.main_catname.toLowerCase();
                }
            }

            if (splitUrlNetMetrix[1] === "categories") {
                var categoryName = Twenty.app.getState("category");
                if (categoryName.category) {
                    splitUrlNetMetrix[1] = Twenty.datamodel.netMetrixTag;
                    splitUrlNetMetrix[2] = categoryName.category.toLowerCase();
                }
            }

            if (splitUrlNetMetrix.length) {
                netMetrixStoryParams = splitUrlNetMetrix.join("/");
                netMetrixStoryParams = Twenty.core.removeSpecialChars(netMetrixStoryParams);
            }

            // WEMF
            // this would take way too many ifs and ors to do any other way....
            var referrer = "";
            try {
                referrer = Twenty.datamodel.host + "/" + Twenty.app.getState("lastPage").rewriteObject.path;
            } catch (error) {
                referrer = document.referer || "";
            }
            netMetrixStoryParams += "?r=" + encodeURIComponent(referrer);
            netMetrixStoryParams += "&d=" + Math.random() * 1e6;
            netMetrixStoryParams += "&x=" + parseInt(window.Tw.GLOBALS.documentwidth) + "x" + screen.height;

            netMetrixPixUrl += netMetrixStoryParams;
            if (trackingPixels.netmetrix) {
                trackingPixels.netmetrix.image.src = netMetrixPixUrl;
            }
            if (additionalNetMetrixUrl) {
                additionalNetMetrixUrl += netMetrixStoryParams;
                trackingPixels.additionalnetmetrix.image.src = additionalNetMetrixUrl;
            }
        }
        if (trackWhat === "slideimpression" || trackWhat === "slidefullscreen") {
            netMetrixStoryParams += "/diashow?d=" + Math.random() * 1e6;
            trackingPixels.netmetrix.image.src = netMetrixPixUrl + netMetrixStoryParams;

            if (additionalNetMetrixUrl) {
                trackingPixels.additionalnetmetrix.image.src = additionalNetMetrixUrl + netMetrixStoryParams;
            }
        }
        if (trackWhat === "openComments" || trackWhat === "orderComments") {
            netMetrixStoryParams += "/comments?d=" + Math.random() * 1e6;
            trackingPixels.netmetrix.image.src = netMetrixPixUrl + netMetrixStoryParams;
        }
    };

    pageimpression = function pageimpression() {
        var storyId = Twenty.app.getState("story"),
            seismoUrl = "";

        /*
        If you clear your cookies, and come to the site on a device, via www.20min.ch,
        it scores one (1) extra PI by NetMetrix. Out of billions.
        So yeah. That needs to go.
        */
        if (Twenty.dom.savedUrlParams.redirect) {
            delete Twenty.dom.savedUrlParams.redirect;
        } else {
            if (trackingPixels.netmetrix) {
                trackNetMetrix("pageimpression");
            }
        }

        if (trackingPixels.seismo) {
            // seismo (only on story pages)
            if (storyId) {
                seismoUrl = Twenty.env.getServer("seismo");
                seismoUrl += storyId + "/category/" + Math.random().toString().substr(2, 6) + "/";
                trackingPixels.seismo.image.src = seismoUrl;
            }
        }
    };

    slideimpression = function slideimpression() {
        if (trackingPixels.netmetrix) {
            trackNetMetrix("slideimpression");
        }
    };

    slidefullscreen = function slidefullscreen() {
        if (trackingPixels.netmetrix) {
            trackNetMetrix("slidefullscreen");
        }
    };

    /**
    * @name Twenty.tracking.track
    * @memberOf Twenty.tracking
    * @method
    * @param {String} type  the name of the event which can possibly trigger a tracking event
    * @param {!Object} params
    * @description. Set up events for tracking.
    * I just had a thought... this doesn't need to change much.
    * If all the functions are replaced with, eg,
    Twenty.controller.tracking.pageimpression();
    * then the work is basically done
    */
    track = function track(type, params) {
        if (params && params.event) {
            if (type === "pageview" && Twenty.datamodel.gtmDataStructure) {
                params = Object.assign({}, Twenty.datamodel.gtmDataStructure[type], params);
            }

            // add user UID info to tracking & rules no-undefined is disabled because GTM need undefined to reset
            params.uid = Twenty.user.getUserInfo("user_id") || undefined; // eslint-disable-line no-undefined
            window.dataLayer.push(params);
        }
        if (netMetrixTracking) {
            switch (type) {
                case "pageimpression":
                    pageimpression();
                    break;
                case "slideimpression":
                    trackNetMetrix("slideimpression");
                    break;
                case "slidefullscreen":
                    trackNetMetrix("slidefullscreen");
                    break;
                case "openComments":
                    trackNetMetrix("openComments");
                    break;
                case "orderComments":
                    trackNetMetrix("orderComments");
                    break;
                default:
            }
        }
    };

    /**
    * @name Twenty.tracking.errorlog
    * @memberOf Twenty.app
    * @method
    * @param {Object} errObj  event object parameter
    * @param {String} errObj.eventCategory API file, or "component"
    * @param {String} errObj.eventAction name of the method or name of the component
    * @param {String} errObj.eventLabel a meaningful error message
    * @param {!String} errObj.eventValue A numeric value associated with the event (e.g. 42)
    * @description  For a complete description, please see https://20minuten.atlassian.net/wiki/display/MW/API+Error+Tracking
    */
    errorlog = function errorlog(errObj) {
        return errObj;

        // stop logging errors for a bit
        /*
        var errorMessage;
        errObj.preLoad = true;
        errorMessage = JSON.stringify(errObj);
        errors.push(errorMessage);
        */
    };

    initGhostbuster = function initGhostbuster() {
        var ray = new Ghostbuster();
        ray.run(function (isDetected) {
            if (isDetected) {
                window.dataLayer.push({
                    event: "Adblocker",
                    action: "detection",
                    uid: Twenty.user.getUserId()
                });
            }
        });
    };

    initGTM = function initGTM() {
        // init ghostbuster script
        Twenty.dom.addScript({
            scriptName: Twenty.env.getServer("ghostbuster"),
            callback: initGhostbuster
        });
    };

    initNetMetrixProfile = function initNetMetrixProfile() {
        var szmvars = Twenty.env.getServer("szmvars");

        // This is not leaking to global. This is being exported to global.
        window.szmopt = { mobile: true };
        window.szmvars = szmvars;
        Twenty.dom.addScript({
            scriptName: Twenty.env.getServer("adSurvey")
        });
    };

    /**
    * @name Twenty.tracking.init
    * @memberOf Twenty.tracking
    * @method
    * @description. Set up events for tracking.
    * All of the tracking is very application specific. We should set this up differently
    * so that events are listened to, tracking triggered and the actual tracking details
    * specified by the applicaitons. This could be as simple as the "switch" in the track function
    */
    init = function init() {
        var additionalNetMetrix = Twenty.env.getServer("additionalNetMetrix");
        netMetrixTracking = Twenty.env.getServer("netMetrix");

        if (netMetrixTracking) {
            initTrackingPixel("netmetrix");
        }
        if (additionalNetMetrix) {
            initTrackingPixel("additionalnetmetrix");
        }
        if (Twenty.env.getServer("szmvars")) {
            initNetMetrixProfile();
        }
        if (Twenty.env.getServer("seismo")) {
            initTrackingPixel("seismo");
        }

        // GTM init
        if (Twenty.env.getServer("gtm")) {
            window.dataLayer = window.dataLayer || [];
            window.dataLayer.push({ "gtm.start": new Date().getTime(), "event": "gtm.js", "uid": Twenty.user.getUserId() });
            Twenty.dom.addScript({
                scriptName: Twenty.env.getServer("gtm") + "?id=" + Twenty.env.getServer("gtmId"),
                callback: initGTM
            });
        }

        Twenty.event.subscribe({
            type: "pageLoaded",
            callback: function callback(params) {
                if (!Twenty.app.getState("modal") && !params.isModal) {
                    track("pageimpression", params);
                }
                for (var i = 0; i < dataLayerQueue.length; i++) {
                    track("pageview", dataLayerQueue[i]);
                }
                clearDataLayer();
            }
        });
        Twenty.event.subscribe({
            type: "social",
            callback: function callback(params) {
                track("social", params.params);
            }
        });
        Twenty.event.subscribe({
            type: "storyCommentAdded",
            callback: function callback(params) {
                track("storyCommentAdded", params.params);
            }
        });
        Twenty.event.subscribe({
            type: "storynavigation",
            callback: function callback(params) {
                track("storynavigation", params.params);
            }
        });
        Twenty.event.subscribe({
            type: "slideshow",
            callback: function callback(params) {
                track("slideshow", params.params);
            }
        });
        Twenty.event.subscribe({
            type: "slideimpression",
            callback: function callback(params) {
                track("slideimpression", params.params);
            }
        });
        Twenty.event.subscribe({
            type: "slidefullscreen",
            callback: function callback() {
                track("slidefullscreen");
            }
        });
        Twenty.event.subscribe({
            type: "like",
            callback: function callback(params) {
                track("like", params.params);
            }
        });
        Twenty.event.subscribe({
            type: "dislike",
            callback: function callback(params) {
                track("dislike", params.params);
            }
        });
        Twenty.event.subscribe({
            type: "pageview",
            callback: function callback(params) {
                track("pageview", params.params);
            }
        });
        Twenty.event.subscribe({
            type: "search",
            callback: function callback(params) {
                track("search", params.params);
            }
        });
        Twenty.event.subscribe({
            type: "sitemapDidMount",
            callback: function callback(params) {
                track("sitemapLoaded", params.params);
            }
        });
        Twenty.event.subscribe({
            type: "infinitescroll",
            callback: function callback(params) {
                track("scrolled", params.params);
            }
        });
        Twenty.event.subscribe({
            type: "backButtonClick",
            callback: function callback(params) {
                track("backButtonClick", params.params);
            }
        });
        Twenty.event.subscribe({
            type: "userClick",
            callback: function callback(params) {
                track("userClick", params.params);
            }
        });
        Twenty.event.subscribe({
            type: "isVisible",
            callback: function callback(params) {
                track("isVisible", params.params);
            }
        });
        Twenty.event.subscribe({
            type: "storyvoted",
            callback: function callback(params) {
                track("storyvoted", params.params);
            }
        });
        Twenty.event.subscribe({
            type: "50ContentRead",
            callback: function callback(params) {
                track("50ContentRead", params.params);
            }
        });
        Twenty.event.subscribe({
            type: "openComments",
            callback: function callback() {
                track("openComments");
            }
        });
        Twenty.event.subscribe({
            type: "orderComments",
            callback: function callback() {
                track("orderComments");
            }
        });
    };

    if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") {
        Twenty.event.subscribe({
            type: "frameworkReady",
            callback: function callback() {
                if (Twenty.env.getServer("gtm")) {
                    init();
                }
            }
        });
    }

    return {
        saveDataLayer: saveDataLayer,
        init: init,
        track: track,
        errorlog: errorlog,
        errorClass: "has-error"
    };
}();

/**
 * @name Twenty.datamodel
 * @memberOf Twenty
 * @class
*/

Twenty.datamodel = function () {
    var APPKEY = "",
        FBID = "",
        STORYCOUNT = 16,
        storyIdentifierFromUrl = new RegExp(),
        defaultCategory = "front",
        baseUrlParams,
        // base url parameters set for every feed request
    agbIdentifierFromFieldName = "_27",
        supportedStoryTypes,
        dateFormat = {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
        hour: "2-digit",
        minute: "2-digit"
    },
        getStoryData,
        addURLParams,
        getDefaultCategory,
        savedFeeds = {},
        saveFeed,
        getSavedFeed,
        getSavedFeedList,
        getFeedUrl,
        getFeedUrlWithParams,
        getFeedUrlFromStoryId,
        getSiteMapObject,
        isFullCategory,
        getCurrentCategoryID,
        storyFromFeed,
        _getNextStory,
        excludeStory,
        filterStoryImages,
        storyBreakdown,
        getBanner,
        frontPageController,
        vote,
        getLeadTitleClass,
        getDisplayTitle,
        runAJAXRequest,
        getAppKey,
        setAppKey,
        getSupportedStoryTypes,
        setSupportedStoryTypes,
        getBaseUrlParams,
        setBaseUrlParams,
        config;

    baseUrlParams = {
        key: function key() {
            return getAppKey();
        },
        json: true,
        cors: (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" ? window.location.hostname : "",
        lang: function lang() {
            return Twenty.i18n.lang;
        }
    };

    supportedStoryTypes = {
        storybundle: 1,
        story: 1,
        category_title: 1, // blue category header
        breakingnews: 1, // big red story item
        media: 1, // list of videos and bildstrecken
        horizontal_slide: 1, // list of videos and slideshows
        videosection: 1, // list of videos
        weather: 0,
        sportticker: 0, // url for json list of active tickers
        sportresults: 0, // link to http://20min.ch/sport/tabellen/
        galleries: 0,
        gallery: 1,
        webview: 1, // iframe stuff. A particularly shonky solution
        // ad types
        smart_rectangle: 1,
        wideboard: 0,
        facebooklikebox: 1,
        custom_title: 1, // {title: "Infinity", type: "custom_title"}
        meteonews: 1,
        smartad: 1,
        recommender: 1,
        longformstory: 1
    };

    getAppKey = function getAppKey() {
        return APPKEY;
    };
    setAppKey = function setAppKey(val) {
        APPKEY = val;
    };
    getSupportedStoryTypes = function getSupportedStoryTypes() {
        return supportedStoryTypes;
    };
    setSupportedStoryTypes = function setSupportedStoryTypes(val) {
        supportedStoryTypes = val;
    };
    getBaseUrlParams = function getBaseUrlParams() {
        return baseUrlParams;
    };
    setBaseUrlParams = function setBaseUrlParams(val) {
        baseUrlParams = val;
    };

    /**
     * @name Twenty.datamodel.getStoryData
     * @method
     * @param {object} data this is the specific story feed.
     * @description get a specific feed data, parse it, output a story object.
     * @returns {object} Story
     * @returns {boolean} Story.sponsoredContent - is it sponsored content?
     * @returns {object} Story.topelement
     * @returns {object[]} Story.article_elements - required.
     * @returns {object} Story.extra_data - required.
     * @returns {object} Story.extra_data.communityobject
     * @returns {string} Story.extra_data.id - the id that belongs to this story.
     * @returns {string} Story.extra_data.talkback_api_url - comments form.
     * @returns {string} Story.extra_data.adserver_url
     * @returns {string} Story.extra_data.title
     * @returns {string} Story.extra_data.oberzeile - kicker title.
     * @returns {string} Story.extra_data.lead - used to set page meta data(such as og:description) and sharer.
     * @returns {string} Story.extra_data.livepage_url - used to set page meta data(such as og:url) and sharer.
     * @returns {string} Story.extra_data.pic_bigstory - used to set page meta data(such as og:image) and sharer.
     * @returns {string} Story.extra_data.ageofstory - how old is the story? (example: "Vor 2 h").
     * @returns {string} Story.extra_data.pubDate - publication date (example: "11.10.2016, 14:55").
    */
    getStoryData = function getStoryData(data) {
        return data;
    };

    addURLParams = function addURLParams(url) {
        var urlParams = getBaseUrlParams();
        var params = "";

        Object.keys(urlParams).forEach(function (param) {
            switch (_typeof(urlParams[param])) {
                case "boolean":
                    params += "&" + param;
                    break;
                case "function":
                    params += "&" + param + "=" + urlParams[param]();
                    break;
                default:
                    params += "&" + param + "=" + urlParams[param];
                    break;
            }
        });
        url += url.charAt(url.length - 1) === "?" || !params ? "" : "?";

        return url + params;
    };

    getDefaultCategory = function getDefaultCategory() {
        return defaultCategory;
    };

    /**
     * @name Twenty.datamodel.saveFeed
     * @method
     * @description Save feed data to use later. Currently, this is not given for free by the API.
     * @param {string} feedName - the name of the feed to save.
     * @param {Object} data - the feed as returned from the json call
     * @param {Number} catOrTagID - the id of the current category or tag
    */
    saveFeed = function saveFeed(feedName, data) {
        var pageName = feedName + "page";

        Twenty.app.setState("feed", feedName);
        if (Twenty.page.pages[pageName]) {
            Twenty.page.pages[pageName].preloadFeed = feedName;
        }
        savedFeeds[feedName] = data;
    };

    /**
     * @name Twenty.datamodel.getSavedFeed
     * @method
     * @param {string} feedName the feed required
     * @description get a specific feed as saved by {@link Twenty.datamodel.saveFeed}
     * @returns {object | false} a saved feed, or false
    */
    getSavedFeed = function getSavedFeed(feedName) {
        return savedFeeds[feedName] && savedFeeds[feedName];
    };

    /**
     * @name Twenty.datamodel.getSavedFeedList
     * @method
     * @description get a list of feeds saved by {@link Twenty.datamodel.saveFeed}
     * @returns {Array} list of feeds
    */
    getSavedFeedList = function getSavedFeedList() {
        return Object.getOwnPropertyNames(savedFeeds);
    };

    /**
     * @name Twenty.datamodel.getFeedUrl
     * @method
     * @description Get a complete feed url for the current environment
     * @param {string} feed - the name of the perl file which will provide the feed.
     * @returns {string} complete url string
    */
    getFeedUrl = function getFeedUrl(feed, type) {
        var environment = Twenty.env.environment,
            servUrl;

        if (environment === "testcomponent") {
            return "feed/component.json";
        }

        if (feed.indexOf("http") === 0) {
            return addURLParams(feed);
        }

        if (type) {
            servUrl = Twenty.env.getServer(type);
        } else {
            servUrl = Twenty.env.getServer("feeds");
        }
        if (!servUrl) {
            Twenty.tracking.errorlog({
                category: "data_model",
                action: "getFeedUrl",
                label: "accessing feed: '" + feed + "'. Invalid server: '" + servUrl + "'"
            });
            return false;
        }
        return addURLParams(servUrl + "/" + feed);
    };

    /**
     * @name Twenty.datamodel.getFeedUrlWithParams
     * @method
     * @description Get a complete feed url for the current environment, including extra key/value
     *          pairs stringified
     * @param {string} feed - the name of the perl file which will provide the feed.
     * @param {Object} params - object of params to be converted into key value parameter string and appended to
     *      the url returned
     * @returns {string} complete url string
    */
    getFeedUrlWithParams = function getFeedUrlWithParams(feed, params, type) {
        var paramsString = Twenty.dom.getURLParamsFromObject(params),
            feedUrl = getFeedUrl(feed, type || null);

        return feedUrl + paramsString;
    };

    /**
     * @name Twenty.datamodel.getFeedUrlFromStoryId
     * @method
     * @description Generate a full url to fetch a specific story
     * @param {string | number} storyId - the name of the perl file which will provide the feed.
     * @returns {string} complete url string
    */
    getFeedUrlFromStoryId = function getFeedUrlFromStoryId(storyId) {
        if (typeof storyId === "number") {
            storyId = storyId.toString();
        }
        if (storyId.match(storyIdentifierFromUrl)) {
            return getFeedUrlWithParams(Twenty.env.getServer("story"), { id: storyId });
        } else {
            return false;
        }
    };

    /**
     * @name Twenty.datamodel.getSiteMapObject
     * @method
     * @description get a full category reference object from the site map
     * @param {string} categoryNameOrNumber - the reference to the object we want - its name or its number
     * @returns {TwentySiteMapObject} or false
    */
    getSiteMapObject = function getSiteMapObject(categoryNameOrNumber) {
        var sitemapData = getSavedFeed("sitemap");
        if (typeof categoryNameOrNumber === "string") {
            categoryNameOrNumber = categoryNameOrNumber.toLowerCase();
        }
        if (sitemapData) {
            var sitemapItems = sitemapData.content.items.item;
            var result = sitemapItems.find(function (item) {
                return item.category && item.category.toLowerCase() === categoryNameOrNumber || item.category_id && item.category_id === categoryNameOrNumber;
            });
            if (result) {
                return result;
            } else {
                Twenty.tracking.errorlog({
                    category: "data_model",
                    action: "getSiteMapObject",
                    label: "category " + categoryNameOrNumber + " doesn't appear in the sitemap"
                });
            }
        } else {
            Twenty.tracking.errorlog({
                category: "data_model",
                action: "getSiteMapObject",
                label: "tried to load a category before the sitemap was available"
            });
        }
        return false;
    };

    isFullCategory = function isFullCategory(categoryObj) {
        return getSiteMapObject(categoryObj.category) !== false;
    };

    /**
     * @name Twenty.datamodel.getCurrentCategoryID
     * @method
     * @description get the current category_id from the sitemap feed
     * @returns {number} category_id or false
    **/
    getCurrentCategoryID = function getCurrentCategoryID() {
        var catObj = Twenty.app.getState("category"),
            sitemapObj = getSavedFeed("sitemap");

        if (catObj && catObj.category_id) {
            if (isNaN(catObj.category_id)) {
                for (var i = 0; i < sitemapObj.content.items.item.length; i++) {
                    if (sitemapObj.content.items.item[i].category) {
                        if (catObj.category_id.toLowerCase() === sitemapObj.content.items.item[i].category.toLowerCase()) {
                            return sitemapObj.content.items.item[i].category_id;
                        }
                    }
                }
            } else {
                return catObj.category_id;
            }
        }
        return false;
    };

    /**
    * @name Twenty.datamodel.storyFromFeed
    * @method
    * @memberOf Twenty.datamodel
    * @param {number} storyId    the current story ID. Either a "new" or a "legacy" id.
    * @param {String} feedName    the current story ID
    * @returns {Number}  the index of the storyId in the feedName
    * @returns {Boolean} false if not found
    * @description Is a particular story in a particular saved feed?
    **/
    storyFromFeed = function storyFromFeed(storyId, feedName, getIndex) {
        var currentFeed = getSavedFeed(feedName),
            currentFeedLength;
        if (currentFeed) {
            if (feedName === "search") {
                currentFeedLength = currentFeed.items.length;
            } else {
                currentFeedLength = currentFeed.content.items.item.length;
            }
            for (var i = 0; i < currentFeedLength; i++) {
                var obj = feedName === "search" ? currentFeed.items[i] : currentFeed.content.items.item[i];
                if (obj.id === storyId || obj.legacy_id && obj.legacy_id === storyId) {
                    if (getIndex) {
                        return i;
                    } else {
                        return obj;
                    }
                }
            }
        }
        return false;
    };

    /**
     * @name Twenty.datamodel.getNextStory
     * @method
     * @memberOf Twenty.datamodel
     * @param {Number} storyId    the current story ID
     * @param {!Function} callback   If there isn't a story to be found, getNextStory will
        attempt to retrieve one from the server. The callback is the function to send the #
        discovered story to for loading. Should be handled with event states [TODO]
     * @returns {Object}  a story
     * @returns {Boolean} false if not found
     * @description     If I have a story ID, what was the next story from the last viewed
     *       category page? Note: "front" is a sort of a category.
     *      If there isn't a currently loaded category, load the front feed, save it and
     *      return the first story. It might interest the user, and that's all we claim
    **/
    _getNextStory = function getNextStory(storyId, callback) {
        var currentFeed, nextStory;

        if (getSavedFeedList().length > 0) {
            currentFeed = getSavedFeed(Twenty.app.getState("feed"));
            var storyFoundIndex = storyFromFeed(storyId, Twenty.app.getState("feed"), true);
            if ((storyFoundIndex || storyFoundIndex === 0) && storyFoundIndex < currentFeed.content.items.item.length - 1) {
                nextStory = currentFeed.content.items.item[storyFoundIndex + 1];
            } else if (getSavedFeedList().toString().indexOf("front") > -1) {
                nextStory = getSavedFeed("front").content.items.item[0];
            }
        }

        if (nextStory) {
            if (excludeStory(nextStory)) {
                _getNextStory(nextStory.id);
            } else {
                return nextStory;
            }
        } else {
            /** if we don't know what the next story is, try and get it **/
            Twenty.datamodel.runAJAXRequest({
                url: getFeedUrl(Twenty.page.pages.frontpage.feedUrl),
                dataType: "json",
                success: function success(result) {
                    Twenty.datamodel.saveFeed(Twenty.datamodel.getDefaultCategory(), result);
                    Twenty.app.setState("feed", Twenty.datamodel.getDefaultCategory());
                    if (callback) {
                        callback(result.content.items.item[0]);
                    }
                }
            });
        }
    };

    /**
     * @name Twenty.datamodel.excludeStory
     * @method
     * @memberOf Twenty.datamodel
     * @param {storyData} Object    the renderable story item object
     * @return {Boolean}
     * @description  If there are certain stories which are present in your feed, but should
        not be shown, and that reason can be extracted from the story data itself, you can
        optionally supply a datamodel.excludeStory method which returns true for all stories which
        should not be shown.
    **/
    excludeStory = function excludeStory() {
        return false;
    };

    /**
     * @name Twenty.datamodel.filterStoryImages
     * @method
     * @memberOf Twenty.datamodel
     * @param {images} Object[]    Array of story image objects
     * @return {Object[]}
     * @description  If there are certain story images which are present in your feed, but should
        not be used, and that reason can be extracted from the image data itself, you can
        optionally supply a datamodel.filterStoryImages method which filters out all images that should
        not be used.
    **/
    filterStoryImages = function filterStoryImages(images) {
        return images;
    };

    frontPageController = function () {
        // this can add data, and it can return data.
        // it adds data from Twenty.page.addPageContent
        // or an internal thing in frontpage.jsx
        // once it has decided what the right data is, it returns it
        var getNextView;

        /**
            returns a feed to generate the full (next) view
            React isn't clever enough to merge the two, so we do it here
        */
        getNextView = function getNextView() {
            var nextPage = getSavedFeed("front").content.nextpage;
            if (nextPage) {
                Twenty.datamodel.runAJAXRequest({
                    url: nextPage,
                    success: function success(result) {
                        Twenty.datamodel.addData(result);
                        Twenty.page.load("frontpage");
                    }
                });
            }

            // update the front page so that it always loads from data
            return Twenty.datamodel.getSavedFeed("frontdisplay");
        };

        return {
            getNextView: getNextView
        };
    }();

    /**
     * @alias Twenty.datamodel.breakdownStoryList
     * @method
     * @param {JSON} data -  a feed
     * @description this groups a feed into component groups, filtering by supported types
     *
    **/
    storyBreakdown = function storyBreakdown(data) {
        if (data.content) {
            var storyBreakdownList = [],
                currentData = data.content,
                // contains langauge, next page, copyright, etc
            stories = currentData.items.item;

            // group the stories into contigous blocks
            for (var i = 0; i < stories.length; i++) {
                var currentType = stories[i].type;
                if (supportedStoryTypes[currentType]) {
                    /* if this is the first consecutive instance of a
                        type, make a new array of this type.
                        If this is not the first instance, push it into the array
                        you just made
                    */
                    if (storyBreakdownList.length && storyBreakdownList[storyBreakdownList.length - 1].type === currentType) {
                        storyBreakdownList[storyBreakdownList.length - 1].items.push(stories[i]);
                    } else {
                        storyBreakdownList.push({
                            type: currentType,
                            items: [stories[i]]
                        });
                    }
                } else {
                    Twenty.tracking.errorlog({
                        category: "data_model",
                        action: "storyBreakdown",
                        label: "story " + stories[i].id + " excluded because unsupported story type " + currentType
                    });
                }
            }
            return storyBreakdownList;
        }
    };

    /**
     * @alias Twenty.datamodel.getBanner
     * @method
     * @description is there a category banner for this story? (c.f. Post Finance). Should be overwritten in the controller.
     * @param {Object} data Object data by which to decide what banner to load
    **/
    getBanner = function getBanner(data) {
        // eslint-disable-line no-unused-vars
        return false;
    };

    /**
     * @alias Twenty.datamodel.getLeadTitleClass
     * @memberof Twenty.datamodel
     * @description get the lead title class of a story
     * @param {object} storyData - the object containing the story data we need
    **/
    getLeadTitleClass = function getLeadTitleClass(storyData) {
        var extraClass = "";
        if (storyData.main_catname === "Sponsored" || storyData.catname === "Wettbewerbe" || storyData.catname === "Postfinance_News") {
            extraClass = "sponsored";
            if (storyData.catname === "Postfinance_News") {
                extraClass += " postfinance";
            }
        }
        return extraClass;
    };

    /**
     * @alias Twenty.datamodel.getDisplayTitle
     * @memberof Twenty.datamodel
     * @description get the display title of current page
     * @param {object} data
    **/
    getDisplayTitle = function getDisplayTitle(data) {
        if (data) {
            if (data.main_catname) {
                return data.main_catname;
            } else if (data.content && data.content.title) {
                return data.content.title.split(" | ")[1] || data.content.title;
            } else if (data.categoryName) {
                return data.categoryName;
            } else if (data.title) {
                return data.title;
            }
        } else {
            return Twenty.i18n.getString("Core.front");
        }
    };

    /**
     * @alias Twenty.datamodel.runAJAXRequest
     * @memberof Twenty.datamodel
     * @description run an AJAX request using the jQuery ajax interface,
     * the parameter object is the same as in jQuery
     * @param {Object} configObj - the parameter object
     * @param {String} configObj.url - the url which gets called on the request
     * @param {Object|String|Array} configObj.data - the data which should be sent to the server
     * @param {String} configObj.type - method GET or POST
     * @param {String} configObj.dataType - the type of response data
     * @param {Boolean|String} configObj.contentType - the type of content which should be sent to the server
     * @param {Object} configObj.xhrFields - jQuery ajax xhrFields
     * @param {Boolean} configObj.processData - jQuery ajax processData
     * @param {Function} configObj.success - the function which should be executed on success
     * @param {Function} configObj.error - the function which should be executed on error
    **/
    runAJAXRequest = function runAJAXRequest(configObj) {
        /*
        configObj.headers = configObj.headers || {};
        configObj.headers["X-Alt-Referer"] = Twenty.datamodel.host || "";
        */
        return $.ajax({
            url: configObj.url,
            data: configObj.data || "",
            type: configObj.type || "GET",
            // eslint-disable-next-line no-undefined
            dataType: configObj.dataType || undefined, // default = Intelligent Guess
            contentType: configObj.contentType || "application/x-www-form-urlencoded; charset=UTF-8",
            xhrFields: configObj.xhrFields || {},
            processData: configObj.processData || true,
            headers: configObj.headers || {},
            success: function success(response) {
                // do some tracking here later?
                if (configObj.success) {
                    configObj.success(response);
                }
            },
            error: function error(xhr, status, err) {
                // do some tracking here later?
                if (configObj.error) {
                    configObj.error(xhr, status, err);
                }
                if (window.navigator.onLine === false) {
                    // Twenty.app.controller.loadErrorPage("no internet connection");
                } else {

                        //  if(xhr.status.toString().match(/^[4,5].*/g)) {
                        //      Twenty.app.controller.loadErrorPage(xhr.statusText);
                        //  }
                    }
            }
        });
    };

    config = function config(obj) {
        Object.keys(obj).map(function (el) {
            if (el === "APPKEY") {
                setAppKey(obj[el]);
            }
            if (el === "supportedStoryTypes") {
                setSupportedStoryTypes(obj[el]);
            }
            if (el === "baseUrlParams") {
                setBaseUrlParams(obj[el]);
            }
        });
        return false;
    };

    return {
        STORYCOUNT: STORYCOUNT,
        FBID: FBID,
        dateFormat: dateFormat,
        getStoryData: getStoryData,
        getDefaultCategory: getDefaultCategory,
        getSiteMapObject: getSiteMapObject,
        getCurrentCategoryID: getCurrentCategoryID,
        isFullCategory: isFullCategory,
        agbIdentifierFromFieldName: agbIdentifierFromFieldName,
        getSavedFeed: getSavedFeed,
        getSavedFeedList: getSavedFeedList,
        saveFeed: saveFeed,
        getFeedUrl: getFeedUrl,
        getFeedUrlWithParams: getFeedUrlWithParams,
        getFeedUrlFromStoryId: getFeedUrlFromStoryId,
        storyFromFeed: storyFromFeed,
        getNextStory: _getNextStory,
        excludeStory: excludeStory,
        filterStoryImages: filterStoryImages,
        getBanner: getBanner,
        breakdownStoryList: storyBreakdown,
        frontPageController: frontPageController,
        vote: vote,
        getLeadTitleClass: getLeadTitleClass,
        getDisplayTitle: getDisplayTitle,
        runAJAXRequest: runAJAXRequest,
        getSupportedStoryTypes: getSupportedStoryTypes,
        config: config
    };
}();

/**
 * @name Twenty.app
 * @class
 * @memberof Twenty
 * @description This is where application configuration and management stuff goes.
 */
Twenty.app = function () {
    var state = {},
        setState,
        getState,
        setHeader,
        getFBId,
        appLoadTasks,
        registerServiceWorker,
        unRegisterServiceWorker,
        init,
        config;

    setState = function setState(key, val) {
        state[key] = val;
        if (Object(val) === val) {
            state.timestamp = new Date();
        }
        return val;
    };

    getState = function getState(key) {
        return state.hasOwnProperty(key) && state[key];
    };

    setHeader = function setHeader(configHeader) {
        if (configHeader) {
            Twenty.appComponent.setState(configHeader);
        }
    };

    getFBId = function getFBId() {
        return Twenty.datamodel.FBID;
    };

    appLoadTasks = function appLoadTasks() {
        Twenty.app.controller.appLoadTasks && Twenty.app.controller.appLoadTasks();
        return true;
    };

    registerServiceWorker = function registerServiceWorker() {
        if ("serviceWorker" in navigator) {
            navigator.serviceWorker.register("/service-worker.js", { scope: "/" }).then(function (reg) {
                // registration worked
                console.log("Registration succeeded. Scope is " + reg.scope);
            }).catch(function (error) {
                // registration failed
                console.log("Registration failed with " + error);
            });
        }
    };

    unRegisterServiceWorker = function unRegisterServiceWorker() {
        if ("serviceWorker" in navigator) {
            navigator.serviceWorker.getRegistrations().then(function (registrations) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = registrations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var registration = _step.value;

                        registration.unregister();
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            });
        }
    };

    /**
     * @name Twenty.app.init
     * @memberof Twenty.app
     * @description Kicks off the whole app. Called on page load.<br>
     After the front page is loaded, the app has an almost self-aware ability to know what to
     do next. This is because architecture and design. Baby.<br>
     The main things done here are<br>
     <strong><em>Get and save a copy of the current sitemap.</em></strong><br>
     Throughout the application, we need to know things about categories - for
     example in the feed, category headers and category links look the same.
     All the info we need about categories is in the sitemap, so we need a copy of
     it right at page initialisation. This grabs and saves it. {@link Twenty.datamodel.saveFeed}<br>
     <strong><em>Handle Deeplinking</em></strong><br>
     The application is, naturally, only initialised once, and that on window load. <br>
     The app on initialisation needs to decide if it should direct the user to the front
     page, or is the user trying to access a story, or other deeplinked item?
     This is where we find out and load the appropriate page.<br>
     See deeplinking story page loading {@link Twenty.app.controller.loadDeepLinkStoryPage}<br>
     See front page loading {@link Twenty.app.controller.loadFrontPageWithAdCheck}<br>
     Glue stuff (controller, router, call it what you will) is to be found in {@link Twenty.app.controller}.<br>
     <strong><em>Custom start page (static or react)</em></strong><br>
     We can add a custom start by adding some configuration inside the controller of the application.<br>
     @example
     startPage: {
        pageType: "staticpage",
            params: {
                pagename: "example",
                title : "Hello Dogs"
            }
        }
     * @method
     */

    init = function init() {
        var loadAPage;

        // load external libraries when the app is done
        Twenty.event.subscribe({
            type: "appReady",
            callback: function callback() {
                appLoadTasks();
                if (Twenty.env.activateSW) {
                    registerServiceWorker();
                } else {
                    unRegisterServiceWorker();
                }
            }
        });
        window.Tw = window.Tw || {};
        window.Tw.GLOBALS = window.Tw.GLOBALS || {};
        window.Tw.GLOBALS.LOADED = true;
        window.Tw.GLOBALS.documentwidth = window.getComputedStyle(document.getElementsByTagName("body")[0], null).getPropertyValue("width");
        window.Tw.GLOBALS.documentheight = window.getComputedStyle(document.getElementsByTagName("body")[0], null).getPropertyValue("height");
        document.getElementsByTagName("BODY")[0].setAttribute("width", window.Tw.GLOBALS.documentwidth);
        document.getElementsByTagName("HTML")[0].classList.add("twenty_app_mmxvii");

        window.Tw.GLOBALS.originalPirateMaterial = window.location.search || "";

        // are we embedded in webview?
        var nativeView = Twenty.app.controller.nativeView;
        Twenty.app.setState("nativeView", Twenty.dom.getValueFromUrlParam(nativeView));

        var body = document.getElementsByTagName("body")[0],
            appHeader = document.createElement("div"),
            initialAppProps = Twenty.app.controller.setInitialAppState();
        body.insertBefore(appHeader, body.firstChild);
        body.id = Twenty.datamodel.appname;
        Twenty.appComponent = ReactDOM.render(React.createElement(Twenty.Components.app, initialAppProps), appHeader);

        Twenty.event.dispatch({ type: "frameworkReady" });

        /* load the sitemap. You need this to create the site map page, which should be
            there, if not immediately at load, a little bit afterwards. But definitely
            for category page loads
        */
        var sitemapUrl = Twenty.env.getServer("sitemap");
        if (sitemapUrl) {
            Twenty.datamodel.runAJAXRequest({
                url: Twenty.datamodel.getFeedUrl(sitemapUrl),
                success: function success(result) {
                    Twenty.datamodel.saveFeed("sitemap", result);
                    Twenty.event.dispatch({
                        type: "sitemapLoaded"
                    });
                }
            });
        }

        /* decide, based on the URL, what page to load */
        loadAPage = Twenty.dom.getURLNavigation(window.location.href);

        /* you can't load a category page until you have the sitelist, don't trigger the
            page load until you know it's in. For others, go ahead and load it.
            When it's done, fire the app ready event
        */
        if (loadAPage.pageType === "categorypage") {
            Twenty.event.subscribe({
                type: "sitemapLoaded",
                callback: function callback() {
                    $.when(loadAPage.pageFunction(loadAPage.params, true)).then(function () {
                        Twenty.event.dispatch({ type: "appReady" });
                    });
                }
            });
        } else {
            $.when(loadAPage.pageFunction(loadAPage.params, true)).then(function () {
                Twenty.event.dispatch({ type: "appReady" });
            });
        }

        // do clean up on unload
        Twenty.event.subscribe({
            type: "beforeunload",
            callback: function callback() {
                Twenty.app.controller.unloadApp();
            }
        });

        // init user settings
        var userSettings = JSON.parse(localStorage.getItem("userSettings")) || {};
        if (userSettings.fontSize) {
            document.getElementsByTagName("html")[0].style.fontSize = userSettings.fontSize;
        }
    };

    /**
     * @name Twenty.app.config
     * @memberof Twenty.app
     * @description Kicks off the whole app. Called on page load.<br>
     */
    config = function config(ns) {
        var configObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var ref = Twenty;
        var nss = ns;
        if (typeof ns === "string") {
            ns = ns.split(".");
        }
        while (ns.length) {
            ref = ref[ns.shift()];
        }
        var updateSuccess = false;
        if (ref && ref.config) {
            updateSuccess = ref.config(configObject);
        }
        if (!updateSuccess) {
            try {
                ref = Twenty.core.extendDeep(ref, configObject);
            } catch (err) {
                console.log("trying to config " + nss + ". It either does not exist, or is non configurable");
            }
        }
    };

    return {
        setState: setState,
        getState: getState,
        setHeader: setHeader,
        getFBId: getFBId,
        init: init,
        config: config,
        state: state
    };
}();

/**
 * @name Twenty.app.controller
 * @memberof Twenty.app
 * @description it is possible to load any page in the application from any other page in
     the application. This is as close as we get to a C in an MVC structure. But its also
     kinda like a router as well. Which is basically a controller. So here it is.<br>
     I'm not going to document most of the methods in here (and neither should you) for reasons:
     <ol>
     <li>They should have really descriptive names. If you want to know what they do,
     read the name. When creating a new one, read the names of the previous ones and
     be equally awesome</li>
     <li>They don't really constitute any part of an API. They are specific glues to a
     specific implementation of an API. Or, "The application".</li>
     <li>They routing things are mostly kinda generic. You don't need documentation</li>
     <li>They are absolutely not reusable. This is almost the same as the reason above.
     But it's such a good reason, it can be said twice in two different ways
     </li>
     </ol>
 * @returns {Object}
 **/

Twenty.app.controller = function () {
    var nativeView, loadFrontPage, loadStaticPage, loadErrorPage, endOfHistoryFunction, closeModal, unloadFullscreenMedia, openMedia;

    /**
     * @name Twenty.app.controller.appLoadTasks
     * @memberof Twenty.app.controller
     * @method
     * @description If there are tasks you want to perform specifically at the end of the
     * API loading, put them in here. Things like loading external scripts for facebook and
     * twitter, for example.
     */

    /**
     * @name Twenty.app.controller.nativeView
     * @String
     * @memberof Twenty.app.controller
     * @description if you want your application to behave differently when it called by
        direct access to a URL (website) and when embedded inside a native app (webview),
        you can add a marker to the query string of the URL.
        If this is present and truthy, then Twenty.app.getState("nativeView") will also
        be truthy
     * @example
        For the URL:
        http://www.myapp.com/12345678?app=true
        And the definition:
        Twenty.app.controller.nativeView = "app"
         Twenty.app.getState("nativeView")
        > true;
     */
    nativeView = "app";

    /**
     * @name Twenty.app.controller.loadFrontPageWithAdCheck
     * @memberof Twenty.app.controller
     * @description The application assumes that you have a page registered as "frontpage"
        and attempts to load this on the initial application startup if no deeplinking
        rules are met.
        Or, in other words <strong>A frontpage is required!</strong>
     */
    loadFrontPage = function loadFrontPage() {
        Twenty.page.load(Twenty.page.pages.frontpage);
    };

    /**
     * @name Twenty.app.controller.loadStaticPage
     * @memberof Twenty.app.controller
     * @param {Object} paramsToPageLoad an object to be passed directly through to
     *  [@link Twenty.page.load] Twenty.page.load
     * @param {string} paramsToPageLoad.pagename
     * @param {string} paramsToPageLoad.url
     * @param {string} paramsToPageLoad.title
     */
    loadStaticPage = function loadStaticPage(paramsToPageLoad) {
        var pageName = paramsToPageLoad.pagename || paramsToPageLoad.id;
        if (!Twenty.page.pages[pageName]) {
            Twenty.page.register({
                id: pageName,
                type: "page",
                contentType: "staticpage",
                content: "data",
                url: paramsToPageLoad.url,
                title: paramsToPageLoad.title,
                transition: paramsToPageLoad.transition || Twenty.page.pages.staticpage.transition,
                headerConfig: paramsToPageLoad.headerConfig || {},
                rewriteObject: paramsToPageLoad.rewriteObject || {}
            });
        }
        Twenty.page.load(Twenty.page.pages[pageName], paramsToPageLoad);
    };

    /**
     * @name Twenty.app.controller.loadErrorPage
     * @memberof Twenty.app.controller
     * @description {Object} Load a standard error page
     */
    loadErrorPage = function loadErrorPage(statusText) {
        if (statusText) {
            Twenty.page.pages.errorpage.statusText = statusText;
        }
        Twenty.page.load(Twenty.page.pages.errorpage);
    };

    /**
     * @name Twenty.app.controller.endOfHistoryFunction
     * @method
     * @memberof Twenty.app.controller
     * @description The API provides control over both soft and hard back buttons.
     * when the user navigates to the end of the history, you may want to provide some
     * functionality. For example, loading a starting page
     */
    endOfHistoryFunction = function endOfHistoryFunction() {
        console.log("you have reached the end of history");
    };

    /**
     * @name Twenty.app.controller.closeModal
     * @method
     * @memberof Twenty.app.controller
     * @description utility function for your pleasure
     */
    closeModal = function closeModal() {
        Twenty.tracking.track("closemodal");
        Twenty.page.closeModal();
    };

    /**
     * @name Twenty.app.controller.unloadFullscreenMedia
     * @method
     * @memberof Twenty.app.controller
     * @description utility function for your pleasure
     */
    unloadFullscreenMedia = function unloadFullscreenMedia() {
        if (Twenty.app.slideshowControl && Twenty.app.slideshowControl.unloadSlideshows) {
            Twenty.app.slideshowControl.unloadSlideshows();
        }
        if (Twenty.app.getState("modal")) {
            Twenty.page.closeModal();
        }
    };

    /**
     * @name Twenty.app.controller.closeModal
     * @method
     * @memberof Twenty.app.controller
     * @description utility function to open a slideshow or a video in a full screen page
     */
    openMedia = function openMedia(type, params) {
        if (type === "slideshow") {
            Twenty.page.load(Twenty.page.pages.mediamodal, params);
        }
        if (type === "video") {
            Twenty.page.load(Twenty.page.pages.mediamodal, params);
        }
    };

    return {
        nativeView: nativeView,
        loadFrontPage: loadFrontPage,
        loadStaticPage: loadStaticPage,
        loadErrorPage: loadErrorPage,
        endOfHistoryFunction: endOfHistoryFunction,
        closeModal: closeModal,
        unloadFullscreenMedia: unloadFullscreenMedia,
        openMedia: openMedia
    };
}();

/**
 * @name loadDeepLinkStoryPage
 * @memberof Twenty.app.controller
 * @param {string} storyId the id of the story which is to be loaded
 * @description. Congratulations, player. You have reached the end of the developer
 * "understanding the app" link trail. You can jump into the actual code now.
**/

/**
 *  Do some funky appcache stuff and register service worker
**/
if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") {
    window.addEventListener("load", function () {
        window.applicationCache.addEventListener("updateready", function () {
            if (window.applicationCache.status === window.applicationCache.UPDATEREADY) {
                window.applicationCache.swapCache();

                // I want to try taking this out for a bit...
                // this means that the user doesn't get the newest stuff immeditately
                // but on the next time they load the application
                // window.location.reload();
            }
        }, false);
    }, false);
}

Twenty = Twenty || {};

Twenty.developer = function () {
    var isDebug, debugWin, openDebugConsole, debugParams, init;

    isDebug = function isDebug(param) {
        return debugParams[0] && debugParams[0] === "all" || debugParams.indexOf(param) > -1;
    };

    openDebugConsole = function openDebugConsole() {
        var host = location.origin;
        var relative = host.indexOf("webapp.localhost") > -1 ? "/webapp/" : "/";
        return window.open(host + relative + "staticpages/debug.html", "DebugWindow", "menubar=no,location=no,resizable=yes,scrollbars=yes,status=yes,width=590,height=620");
    };

    init = function init(param) {
        if (Twenty.dom.getCookie("webAppUserLang")) {
            Twenty.dom.setCookie("webAppLang", Twenty.dom.getCookie("webAppUserLang"), 1);
        } else if (window.location.href.indexOf("/ro/") !== -1) {
            Twenty.dom.setCookie("webAppLang", "ro", 1);
        } else {
            Twenty.dom.setCookie("webAppLang", "de", 1);
        }

        if (param === "psycho") {
            param = "app,tracking,state";
        }

        if (param) {
            debugParams = param.split(",");
            console.info("Debugging for: " + debugParams.join(", "));
        } else {
            console.info("Developer tools: off");
            return;
        }

        if (isDebug("testplayground")) {
            var tp = document.createElement("DIV");
            tp.id = "testplayground";
            document.body.appendChild(tp);
            ReactDOM.render(React.createElement(Twenty.Components.rating), document.getElementById("testplayground"), function () {
                setTimeout(function () {
                    $(".page").hide();
                }, 1000);
            });
        }

        if (isDebug("adoverlay")) {
            var _tp = document.createElement("DIV");
            _tp.id = "adoverlay";
            document.body.appendChild(_tp);
            ReactDOM.render(React.createElement(Twenty.Components.ad, { adUnitName: "overlay", adserver_url: "werbung-overlay" }), document.getElementById("adoverlay"));
        }

        if (isDebug("rating") || isDebug("duell")) {
            var isRating = debugParams.indexOf("rating") > -1;
            var renderComponent = void 0;

            if (isRating) {
                renderComponent = Twenty.Components.rating;
            } else {
                renderComponent = Twenty.Components.duell;
            }

            var _tp2 = document.createElement("DIV");
            _tp2.id = "testplayground";
            document.body.appendChild(_tp2);
            ReactDOM.render(React.createElement(renderComponent), document.getElementById("testplayground"), function () {
                setTimeout(function () {
                    $(".page").hide();
                }, 1000);
            });
        }

        if (isDebug("app")) {
            debugWin = openDebugConsole();

            Twenty.event.subscribe = function (params) {
                var type = params.type;
                if (!Twenty.event.listeners[type]) {
                    Twenty.event.listeners[type] = [];
                }
                Twenty.event.unsubscribe(params);
                Twenty.event.listeners[type].push({
                    source: params.source,
                    callback: params.callback
                });
                debugWin.postMessage("<strong>Event subscribed</strong>: " + type, location.origin);
            };

            Twenty.event.dispatch = function (params) {
                var callbacks = Twenty.event.listeners[params.type] || [];
                var i = 0;
                for (i = 0; i < callbacks.length; i++) {
                    callbacks[i].callback.call(this, params);
                }
                debugWin.postMessage("<strong>Event dispatched</strong> (" + i + "): " + params.type, location.origin);
            };

            Twenty.app.setState = function (key, val) {
                var oldVal = Twenty.app.state[key];
                Twenty.app.state[key] = val;
                if (Object(val) === val) {
                    Twenty.app.state.timestamp = new Date();
                }
                debugWin.postMessage("<strong>State change</strong>: " + key + ": " + oldVal + " -> " + val, location.origin);
                if (isDebug("state")) {
                    debugWin.postMessage("<em>" + Object.keys(Twenty.app.state) + "</em>", location.origin);
                }
                return val;
            };
        }

        if (isDebug("tracking")) {
            debugWin = openDebugConsole();

            var config = {
                attributes: true
            },
                targetWEMF = document.getElementById("TWENTY_PIXEL_NETMETRIX"),
                callbackWEMF = function callbackWEMF(mutation) {
                var st = mutation.target.src,
                    src = st.substring(st.indexOf("/CP/") + 4, st.indexOf("?"));
                debugWin.postMessage("<strong>WEMF update</strong>: " + src, location.origin);
            },
                observerWEMF = new MutationObserver(function (mutations) {
                mutations.forEach(callbackWEMF);
            }),
                targetSeismo = document.getElementById("TWENTY_PIXEL_SEISMO"),
                callbackSeismo = function callbackSeismo(mutation) {
                var st = mutation.target.src,
                    src = st.substring(st.indexOf("/seismo/2/0/") + 12);
                debugWin.postMessage("<strong>SEISMO update</strong>: " + src, location.origin);
            },
                observerSeismo = new MutationObserver(function (mutations) {
                mutations.forEach(callbackSeismo);
            });

            observerWEMF.observe(targetWEMF, config);
            observerSeismo.observe(targetSeismo, config);

            Twenty.event.subscribe({
                type: "sendToGoogle",
                callback: function callback(message) {
                    console.log(message);
                    debugWin.postMessage("<strong>GA Event " + message.params[0] + "</strong>:" + JSON.stringify(message.params), location.origin);
                }
            });
        }

        console.log("Twenty.developer initted with ", debugParams);
    };

    Twenty.event.subscribe({
        type: "appReady",
        callback: function callback() {
            if (Twenty.dom.savedUrlParams && Twenty.dom.savedUrlParams.debug) {
                init(Twenty.dom.savedUrlParams.debug);
            }
        }
    });

    console.log("Twenty.developer loaded");
}(window);

/**
* @name Twenty.widget
* @method
* @memberof Twenty
* @description The Twenty Component have a create function in it which will return the a widget object.
*/
Twenty.widget = function () {
    var create;

    /**
      * @name Twenty.Widget.create
      * @method
      * @memberOf Twenty.Widget
      * @param {DOMNode | String} createPosition Either a dom node, or a unique ID of a DOM Node already rendered on the page in which to place the widget
      * @param {TwentyComponent | String} component Either an instance of a Twenty Component, or the unique string name of it
      * @param {Object} data
      * @return {TwentyWidget} the created widget
      * @description A widget is a freely exportable integrated, self sufficient conmponent.
        For each standalone {@link Twenty.Component}, there is a corresponding Widget which can be exported
      **/
    create = function create(component, parent, data) {
        var twentyWidget = null;
        if (document.getElementById(parent)) {
            twentyWidget = Twenty.widget.twentyWidget(component, parent, data);
            twentyWidget.mount();
            return twentyWidget;
        } else {
            console.group("Twenty.widget");
            console.error("Element with ID '" + parent + "' doesn't exist");
            console.groupEnd();
            return twentyWidget;
        }
    };
    return {
        create: create
    };
}();

Twenty.widget.twentyWidget = function (component, parent, data) {
    var mount, unmount, remove, setData, addData, getData, getType, getDomNode, domElement, init, createDOMNode, domNode, hookComponent, twentyComponent, componentData;

    createDOMNode = function createDOMNode(twentyComp, data) {
        var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        // console.log("widget data", data);
        domNode = React.createElement(twentyComp, { data: data }, children);

        return domNode;
    };

    init = function init(twentyComp, parentComponent, data) {
        switch (typeof twentyComp === "undefined" ? "undefined" : _typeof(twentyComp)) {
            case "string":
                twentyComponent = Twenty.Components[twentyComp];
                break;
            case "function":
                twentyComponent = twentyComp;
                break;
            default:
                console.group("Component is not accepted");
                console.error("Component is not accepted : ", twentyComp);
                console.error("typeof component : ", typeof twentyComp === "undefined" ? "undefined" : _typeof(twentyComp));
                console.error("Only types of string or function are accepted");
                console.groupEnd();
                break;
        }
        hookComponent = parentComponent;
        componentData = data;
        if (typeof parentComponent === "string") {
            domElement = document.getElementById(parentComponent);
        } else {
            if (parentComponent instanceof HTMLElement && parentComponent instanceof Node) {
                domElement = parentComponent;
            } else {
                console.group("Twenty.widget.twentyWidget: init");
                console.error("domElement is null");
                domElement = null;
                console.groupEnd();
            }
        }
        createDOMNode(twentyComponent, componentData);
    };

    /**
     * @name mount
     * @method
     * @memberof Twenty.widget.twentyWidget
     * @param {string}
     * @example
     *  Twenty.widget.mount();
     */
    mount = function mount() {
        if (domElement !== null && domNode !== null) {
            ReactDOM.render(domNode, domElement);
        } else {
            console.group("Twenty.widget.twentyWidget: mount()");
            console.error("domElement or/and domNode is not defined");
            console.group("");
            console.error("domElement : ", domElement);
            console.error("domNode : ", domNode);
            console.groupEnd();
            console.groupEnd();
        }
    };

    /**
     * @name unmount
     * @method
     * @memberof Twenty.widget.twentyWidget
     * @param {string}
     * @example
     *  Twenty.widget.unmount();
     */
    unmount = function unmount() {
        ReactDOM.unmountComponentAtNode(domElement);
    };

    /**
     * @name remove
     * @method
     * @memberof Twenty.widget.twentyWidget
     * @param {string}
     * @example
     *  Twenty.widget.remove();
     */
    remove = function remove() {
        unmount();
        domElement = null;
        domNode = null;
        return null;
    };

    /**
     * @name setData
     * @method
     * @memberof Twenty.widget.twentyWidget
     * @param {string}
     * @example
     *  Twenty.widget.setData();
     */
    setData = function setData(data) {
        componentData = data;
        init(twentyComponent, hookComponent, componentData);
        mount();
    };

    /**
     * @name addData
     * @method
     * @memberof Twenty.widget.twentyWidget
     * @param {string}
     * @example
     *  Twenty.widget.addData();
     */
    addData = function addData(data) {
        componentData = Object.assign(componentData, data);
        init(twentyComponent, hookComponent, componentData);
        mount();
    };

    /**
     * @name getData
     * @method
     * @memberof Twenty.widget.twentyWidget
     * @param {string}
     * @example
     *  Twenty.widget.getData();
     */
    getData = function getData() {
        return componentData;
    };

    /**
     * @name getType
     * @method
     * @memberof Twenty.widget.twentyWidget
     * @param {string}
     * @example
     *  Twenty.widget.getType();
     */
    getType = function getType() {
        return typeof domNode === "undefined" ? "undefined" : _typeof(domNode);
    };

    /**
     * @name getDomNode
     * @method
     * @memberof Twenty.widget.twentyWidget
     * @param {string}
     * @example
     *  Twenty.widget.getDomNode();
     */
    getDomNode = function getDomNode() {
        return domNode;
    };

    init(component, parent, data);

    return {
        mount: mount,
        unmount: unmount,
        remove: remove,
        setData: setData,
        addData: addData,
        getData: getData,
        getType: getType,
        getDomNode: getDomNode,
        reinit: init
    };
};
//# sourceMappingURL=framework.js.map

/**
 * @name Twenty.i18n
 * @class
 * @memberof Twenty
 * @description Here is how to handle and import localisation strings. And some
 * internationaisation bits and bobs as well.
 * If you are making a component, it <em>must not<em> contain display strings within the .jsx file.
 * Instead, at the same level as the jsx, create a strings.json file. Inside this file, create a strings object
 * like the following:
Twenty.i18n.Components.breakingnews = {
    de: {
        breaking: "Breaking News"
    },
    fr : {
        breaking: "briser Nouvelles"
    },
    en: {
        breaking: "Breaking News"
    }
};
 * Include a language object for each language you want to support.
 * These may also be complex objects of variable depths
 *
* There are three ways to import a string.
  <dl>
  <dt>React</dt>
  <dd>Include the Twenty.i18n.str Component {@link Twenty.i18m.str}. Full documentation can be found there</dd>
  <dt>A string</dt>
  <dd>If you absolutely must have a string without markup (for a placeholder, for example), there is a {@link Twenty.i18n.getString}</dd>
  <dt>Static pages</dt>
  <dd>Pages generally should not have any strings in them at all. A page is a collection of components. Components have strings, pages do not.
    Static pages, on the other hand, are content. They are content which does not need to be, or cannot be, rendered by react. They appear within the
    react world, but are not of react.
 **/

Twenty.i18n = {
    Core: {
        de: {
            front: "Front"
        },
        fr: {
            front: "Ã la une"
        }
    },
    Components: {},
    Pages: {},
    API: {},
    APP: {},

    // string ref

/**
 * @name Twenty.i18n.getString
 * @memberOf Twenty.i18n
 * @param {String} textref
 * @param {Object} replaces
 */

    getString: function(textref, replaces) {
        var refs = textref.split("."),
            lang,
            re = /\{(\w+)\}/g,
            firstRef,
            pathValue,
            extracts,
            extract,
            i;

        firstRef = refs.shift();
        lang = Twenty.i18n.lang || "de";

        if(lang === "ro") lang = "fr";

        switch(firstRef) {
            case "Pages":
                pathValue = Twenty.i18n.Pages[refs.shift()][lang];
                break;
            case "Core":
                pathValue = Twenty.i18n.Core[lang];
                break;
            default:
                pathValue = Twenty.i18n.Components.hasOwnProperty(firstRef) ? Twenty.i18n.Components[firstRef][lang] : "";
        }

        while(refs.length) {
            if(pathValue) {
                pathValue = pathValue[refs.shift()];
            } else {
                return "";
            }
        }
        if(pathValue.match(re)) {
            // parse counts
            extracts = pathValue.match(re);
            for(i = 0; i < extracts.length; i++) {
                extract = extracts[i].slice(1, -1);
                if(replaces[extract]) {
                    pathValue = pathValue.replace(extracts[i], replaces[extract])
                }
            }
        }

        return pathValue;
    },

/**
 * @name Twenty.i18n.setupStaticPage
 * @memberOf Twenty.i18n
 */

    setupStaticPage: function() {
        var nodes = document.querySelectorAll("[data-i18n]"),
            i,
            string,
            textnode;
        for(i = 0; i < nodes.length; i++) {
            string = Twenty.i18n.getString(nodes[i].dataset.i18n);
            textnode = document.createTextNode(string);
            nodes[i].appendChild(textnode);
        }
    },

/**
 * @name Twenty.i18n.formatCHF
 * @memberOf Twenty.i18n
 * @param {Number} to be converted
 * @param {!Boolean} withUnits  should the string "CHF" be appended to the output?
 * @returns {String}    looking like a swiss currency format string. With units if
 *  required by the optional param above
 */
    formatCHF: function(val, withUnits) {
        var numDec,
            decimals,
            returnVal,
            chf = withUnits ? " CHF" : "";
        if(val < 10000) {
            returnVal = val;
        } else {
            if(Math.floor(val) === val) {
                numDec = 0;
            } else {
                numDec = val.toString().split(".")[1].length;
            }
            decimals = (val - Math.floor(val)).toFixed(numDec);
            returnVal = (Math.floor(val) / 1000).toFixed(3).toString().replace(".", "'");
            if(numDec) {
                returnVal = returnVal + "." + decimals.split(".")[1];
            }
        }
        return returnVal + chf;
    },

    /**
     * @function lang gets the current language edition
     * @memberof Twenty.i18n
     * @returns {String} the current language one of 'it', 'de', 'fr'
     * @description If the back-end knows what language the user is going to use, then
        it sets the cookie "webAppLang".
        This can be overwritten at any time in the front.end app with another cookie "webAppUserLang"
        This user-set cookie will always overrule the server-side set one.
     */

    lang: Twenty && Twenty.dom && typeof Twenty.dom.getCookie === "function" ? Twenty.dom.getCookie("webAppUserLang") || Twenty.dom.getCookie("webAppLang") || "de" : "de",

    getLangStandard: function() {
        var lang = Twenty.i18n.lang;
        if(lang === "ro") {
            lang = "fr";
        }
        return lang;
    }
};

Twenty.i18n.Components.actionicons = {
    de: {
        liveticker: "LIVETICKER",
        news: "NEWSTICKER",
        video: "VIDEO"
    },
    fr : {
        liveticker: "LIVETICKER",
        news: "NEWSTICKER",
        video: "VIDEO"
    },
};

Twenty.i18n.Components.ad = {
    "de": {
        "headline": "Werbung"
    },
    "fr" : {
        "headline": "PublicitÃ©"
    }
};

Twenty.i18n.Components.agb = {
    de: {
        text: "Ich akzeptiere die",
        link: "Kommentarregeln"
    },
    fr : {
        text: "Je suis d'accord avec",
        link: "les rÃ©gles sur les commentaires"
    },
};

Twenty.i18n.Components.audiostreamer = {
    de: {
        radioName: "20 Minuten Radio",
        startMessage: "Neue Musik entdecken!"
    },
    fr : {
        radioName: "20 minutes radio",
        startMessage: "20 minutes radio"
    },
};

Twenty.i18n.Components.authors = {
    de: {
        by: "von"
    },
    fr : {
        by: "de"
    },
};

Twenty.i18n.Components.breakingnews = {
    de: {
        breaking: "Breaking News"
    },
    fr : {
        breaking: "Breaking News"
    },
};

Twenty.i18n.Components.chart = {
    de: {
        totalVotes: "Teilnehmer"
    },
    fr : {
        totalVotes: "participants"
    }
};

Twenty.i18n.Components.commentlink = {
    "de": {
        "showComments": "Alle Kommentare anzeigen",
        "writeComment": "Schreiben Sie jetzt einen Kommentar."
    },
    "fr" : {
        "showComments": "Montrer tous les commentaires",
        "writeComment": "RÃ©digez votre commentaire."
    },
};
Twenty.i18n.Components.commentlist = {
    "de": {
        "header": "Kommentare"
    },
    "fr" : {
        "header": "RÃ©actions"
    },
};

Twenty.i18n.Components.commentform = {
    "de": {
        "title": {
            "placeholder": "Titel"
        },
        "name": {
            "placeholder": "Vorname Name"
        },
        "text": {
            "placeholder": "Eigenen Kommentar verfassen..."
        },
        "data": {
            "placeholder": "Antwort an {owner} ..."
        },
        "report": {
            "NNTitleReport": "Regelverstoss melden",
            "NNOrderReport": "Sie sind der Meinung, dass dieser Kommentar gelÃ¶scht werden sollte? Dann fÃ¼llen Sie bitte dieses Formular aus.",
            "link": "melden",
            "linkUppercase": "Melden",
            "submit": "Kommentar melden",
            "text": {
                "placeholder": "Ist dieser Kommentar regelwidrig? BegrÃ¼nden Sie das bitte ganz kurz..."
            },
            "name": {
                "placeholder": "Vorname Name"
            },
            "email": {
                "placeholder": "E-Mail-Adresse"
            }
        },
        "sorting": {
            "latest": "Neuste",
            "favoured": "Beliebteste",
            "eldest": "Ãlteste"
        },
        "submit": "Senden",
        "toast": {
            "title": {
                "thanks": "Gesendet!",
                "error": "Oops.",
                "errorValidate": "Hoppla, das hat leider nicht geklappt."
            },
            "thanks": "Der Kommentar wird zur Freischaltung Ã¼berprÃ¼ft.",
            "error": "Das Formular konnte nicht abgeschickt werden. Bitte versuchen Sie es erneut.",
            "errorValidate": "Haben Sie alle Felder korrekt ausgefÃ¼llt und die Kommentarregeln akzeptiert?",
            "errorValidateReport": "Haben Sie alle Felder korrekt ausgefÃ¼llt?"
        },
        "vote": {
            "recommend": "Empfehlen"
        }
    },
    "fr": {
         "sorting": {
            "latest": "Les plus rÃ©cents",
            "favoured": "Les plus lus",
            "eldest": "Les plus anciens"
        },
        "title": {
            "placeholder": "Titre"
        },
        "name": {
            "placeholder": "PrÃ©nom / Nom"
        },
        "text": {
            "placeholder": "RÃ©digez votre commentaire"
        },
        "data": {
            "placeholder": "RÃ©pondre Ã  {owner}"
        },
        "report": {
            "NNTitleReport": "Signaler un abus",
            "NNOrderReport": "Vous pensez que ce commentaire devrait Ãªtre supprimÃ©? Alors SVP remplissez ce formulaire:",
            "link": "signaler",
            "linkUppercase": "Signaler",
            "submit": "Envoyer",
            "text": {
                "placeholder": "Ce commentaire contrevient Ã  nos rÃ¨gles? Motivez briÃ¨vement votre point de vue..."
            },
            "name": {
                "placeholder": "PrÃ©nom / Nom"
            },
            "email": {
                "placeholder": "Adresse E-Mail"
            }
        },
        "submit": "Envoyer",
        "toast": {
            "title": {
                "thanks": "Merci!",
                "error": "",
                "errorValidate": ""
            },
            "thanks": "Nous avons bien reÃ§u votre commentaire et allons le vÃ©rifier.",
            "error": "Service indisponible actuellement. Merci de rÃ©essayer plus tard.",
            "errorValidate": "Avez-vous renseignÃ© tous le champs nÃ©cessaires et acceptÃ© la charte des commentaires?",
            "errorValidateReport": "Avez-vous renseignÃ© tous le champs nÃ©cessaires?"
        },
        "vote": {
            "recommend": "Recommander",
        }
    }
};

Twenty.i18n.Components.commentInteractionBox = {
    "de": {
        "reply": "Antworten",
        "replayPlaceholder": "Schreiben Sie einen Kommentar...",
        "checkboxAgb": {
            "labelFirst": "Ich habe die",
            "labelInLink": "Regeln",
            "labelEnd": "gelesen und erklÃ¤re mich einverstanden.",
        },
        "formData": {
            "firstName": "Vorname",
            "lastName": "Name",
            "zipCode": "PLZ",
            "city": "Wohnort",
            "email": "E-Mail-Adresse",
        },
        "meta": {
            "reqmsg": "Bitte fÃ¼llen Sie alle Felder korrekt aus und akzeptieren Sie die Regeln.",
            "submit": "Senden",
            "successtxt": "Vielen Dank fÃ¼r Ihren Beitrag. Ihr Kommentar wurde versandt. Bis er von der Redaktion freigeschaltet wird, kann es eine gewisse Zeit dauern.",
        }
    },
    "fr" : {
        "reply": "RÃ©pondre",
        "replayPlaceholder": "Laisser un commentaire...",
        "checkboxAgb": {
            "labelFirst": "J'ai pris connaissance des",
            "labelInLink": "conditions d'utilisation",
            "labelEnd": "et les accepte.",
        },
        "formData": {
            "firstName": "PrÃ©nom",
            "lastName": "Nom",
            "zipCode": "NPA",
            "city": "Lieu",
            "email": "Adresse email",
        },
        "meta": {
            "reqmsg": "Veuillez remplir tous les champs correctement et accepter les conditions.",
            "submit": "Envoyer",
            "successtxt": "Merci pour votre contribution. Votre commentaire a Ã©tÃ© envoyÃ©. Veuillez prÃ©voir un dÃ©lai avant qu'il ne soit validÃ© par la rÃ©daction.",
        }
    }
};

Twenty.i18n.Components.contentbox = {
    "de": {
        "headline": "Artikel zum Thema"

    },
    "fr" : {
        "headline": "Articles en relation"
    }
};

Twenty.i18n.Components.cookiemessage = {
    "de": {
        "message": "Unser Portal verwendet Cookies. Indem Sie weitersurfen, stimmen Sie der Cookie-Nutzung & den Datenschutzbestimmungen zu.",
        "moreInfo": "Mehr erfahren",
        "buttontext": "OK"
    },
    "fr" : {
        "message": "Notre portail utilise des cookies. En continuant Ã  parcourir, vous consentez Ã  l'Utilisation des cookies et politique de confidentialitÃ©.",
        "moreInfo": "En savoir plus",
        "buttontext": "OK"
    }
};

Twenty.i18n.Components.counterstriker = {
    "de": {
        "days": "Tage",
        "hours": "St.",
        "minutes": "Min.",
        "seconds": "Sek."
    },
    "fr" : {
        "days": "Jour",
        "hours": "H.",
        "minutes": "Min.",
        "seconds": "Sec."
    }
};

Twenty.i18n.Components.duell = {
    de: {
        instructions: 'Bitte geben Sie Ihre erste Stimme ab.<br><br>Danach sehen Sie hier, ob Sie mit den anderen Lesern &uuml;berein-stimmen.'
    },
    fr : {
        instructions: 'Veuillez voter une premiÃ¨re fois ici.<br><br>Vous verrez ensuite ici si vous correspondez aux autres lecteurs.'
    },
};

Twenty.i18n.Components.form = {
    "de": {
        "toast": {
            "success": {
                "title": "Danke!",
                "message": ""
            },
            "error":  {
                "title": "Upps..",
                "message": "Das Formular konnte nicht abgeschickt werden. Bitte versuchen Sie es erneut."
            },
            "sending":  {
                "title": "",
                "message": "Datei wird gesendet... "
            },
            "invalid":  {
                "title": "",
                "message": "Bitte Ã¼berprÃ¼fen Sie die erforderlichen Felder."
            }
        },
        "textarea" : {
            "labelCharsCount": "",
        } ,
        "gigyaFields": {
            "firstName": "Vorname",
            "lastName": "Name",
            "gender": "Anrede",
            "genderM": "Herr",
            "genderF": "Frau",
            "email": "E-Mail",
            "zip": "PLZ",
            "city": "Ort",
            "address": "Strasse",
            "phone": "Handy"
        }
    },
    "fr": {
        "toast": {
            "success": {
                "title": "Merci",
                "message": ""
            },
            "error":  {
                "title": "Oops",
                "message": "Le formulaire ne peut Ãªtre envoyÃ©. Merci d'essayer Ã  nouveau."
            },
            "sending":  {
                "title": "",
                "message": "En cours d'envoi..."
            },
            "invalid":  {
                "title": "",
                "message": "Merci de remplir les champs exigÃ©s."
            }
        },
        "textarea" : {
            "labelCharsCount": "",
        } ,
        "gigyaFields": {
            "firstName": "PrÃ©nom",
            "lastName": "Nom",
            "gender": "Appellation",
            "genderM": "Monsieur",
            "genderF": "Madame",
            "email": "E-Mail",
            "zip": "NPA",
            "city": "Lieu",
            "address": "Rue",
            "phone": "NÂ° portable"
        }
    }
};

Twenty.i18n.Components.header = {
    de: {
        commentspageLabel: "Kommentare"
    },
    fr : {
        commentspageLabel: "RÃ©actions"
    },
};



Twenty.i18n.Components.medialist = {
    de: {
        title: "Bildstrecken & Videos"
    },
    fr : {
        title: "Diaporamas et vidÃ©os"
    },
};

Twenty.i18n.Components.mobile2liveticker = {
    de: {
        tag: "Ticker",
        loading: "Liveticker wird geladen...",
        auto_refresh: "Liveticker aktualisiert automatisch",
        lastUpdatedAtText: "letzte Meldung",
        moreRead: "Mehr anzeigen...",
        meta: {
            reqmsg: "Bitte fÃ¼llen Sie alle Felder korrekt aus und akzeptieren Sie die Regeln.",
            submit: "Senden",
            successtxt: "Vielen Dank fÃ¼r Ihren Beitrag. Ihr Kommentar wurde versandt. Bis er von der Redaktion freigeschaltet wird, kann es eine gewisse Zeit dauern."
        },
        formData: {
            question: "Ihre Frage...",
            firstName: "Vorname",
            lastName: "Name",
            city: "Wohnort",
            infoText: "Der Live-Chat wird moderiert. Die Redaktion wird ausgewÃ¤hlte Einsendungen verÃ¶ffentlichen."
        }
    },
    fr : {
        tag: "Live",
        loading: "Live en cours de chargement...",
        auto_refresh: "Le ticker s'actualise automatiquement",
        lastUpdatedAtText: "derniÃ¨re nouvelle",
        moreRead: "Afficher plus...",
        meta: {
            reqmsg: "Veuillez remplir tous les champs correctement et accepter les conditions.",
            submit: "Envoyer",
            successtxt: "Merci pour votre contribution. Votre commentaire a Ã©tÃ© envoyÃ©. Veuillez prÃ©voir un dÃ©lai avant qu'il ne soit validÃ© par la rÃ©daction."
        },
        formData: {
            question: "Votre question...",
            firstName: "PrÃ©nom",
            lastName: "Nom",
            city: "Lieu d'habitation",
            infoText: "Le live chat est modÃ©rÃ©. La rÃ©daction sÃ©lectionnera parmi les messages reÃ§us."
        }
    },
};

Twenty.i18n.Components.mobile2scoreboard = {
    de: {
        additionalResultsTitle: "Die anderen Spiele",
    },
    fr : {
        additionalResultsTitle: "Autres matchs",
    },
};

Twenty.i18n.Components.newsletter = {
    de: {
        emailPlaceholder: "Ihre E-Mail Adresse",
        emailError: "Bitte geben Sie eine gÃ¼ltige E-Mail Adresse an.",
        sendButtonText: "Senden",
        thankYouMessage: "Vielen Dank fÃ¼r Ihre Anmeldung."
    },
    fr : {
        emailPlaceholder: "Adresse e-mail",
        emailError: "Veuillez entrer une adresse email valide.",
        sendButtonText: "Envoyer",
        thankYouMessage: "Merci beaucoup pour votre inscription."
    },
};

Twenty.i18n.Components.nextstoryfooter = {
    de: {
        next: "Diese Story dÃ¼rfte Sie auch interessieren"
    },
    fr : {
        next: "Cet article pourrait vous intÃ©resser"
    },
};

Twenty.i18n.Components.nxpliveticker = {
    de: {
        tag: "Ticker"
    },
    fr : {
        tag: "Live"
    },
};

Twenty.i18n.Components.rating = {
    "de": {
        "maximum": "Maximum {maxSelections}",
        "singleChoice": "W&auml;hlen Sie Ihren Favoriten. Nur eine Auswahl m&ouml;glich.",
        "multiChoice": "Multiple-Choice: W&auml;len Sie einen oder mehrere Favoriten.",
        "starsRating": "Geben Sie jedem Bild zwischen 1 und 5 Sterne.",
        "ranking": "Ranking",
        "votes": "Stimmen",
        "vote": "abstimmen",
        "send": "senden",
        "contestTitle": "Wettbewerbsformular",
        "ratings": "Alle Ratings in der &Uuml;bersicht",
        "agb": "Ich akzeptiere die <a href='http://www.20min.ch/login/agp.html' target='_blank'>AGB</a>",
        "merci": "Besten Dank f&#252;r Ihre Teilnahme.",
        "empty": "Bitte alle Felder korrekt ausf\xfcllen.",
        "closed": "Dieses Rating ist geschlossen."
    },
    "fr": {
        "maximum": "Maximum {maxSelections}",
        "singleChoice": "Choisissez vos favoris",
        "multiChoice": "Choisissez un ou plusieurs favoris.",
        "starsRating": "Attribuez une Ã  cinq Ã©toiles Ã  chaque image.",
        "ranking": "Classement",
        "votes": "votes",
        "vote": "voter",
        "send": "envoyer",
        "contestTitle": "formulaire dâinscription au concours",
        "ratings": "vue dâensemble sur tous les classements",
        "agb": "Jâaccepte les <a href='http://www.20min.ch/login/agp.html' target='_blank'>conditions gÃ©nÃ©rales</a>",
        "merci": "Merci pour votre participation.",
        "empty": "Veuillez compl\xf6ter ce champ.",
        "closed": "Dieses Rating ist geschlossen."
    }
};

Twenty.i18n.Components.recommender = {
    de: {
        headline: "Mehr Themen",
        loading: "Laden ..."

    },
    fr : {
        headline: "Plus de sujets",
        loading: "Chargement ..."
    },
};

Twenty.i18n.Components.sharemenu = {
    de: {
        email: "E-mail",
        emailSubject: "Story%20Empfehlung",
        emailBody: "{location}"
    },
    fr : {
        email: "E-mail",
        emailSubject: "Recommandation%20Story",
        emailBody: "{location}"
    }
};

Twenty.i18n.Components.slideshow = {
    "de": {
        "voteMessage": "War diese Bildstrecke sehenswert?",
        "creditTitle": "Bild: "
    },
    "fr": {
        "voteMessage": "Ce diaporama vous a plu?",
        "creditTitle": "Image: "
    }
};

Twenty.i18n.Components.socialbox = {
    de: {
        header: "Ist dieser Artikel lesenswert?"
    },
    fr : {
        header: "Cet article est-il interessant?"
    },
};

Twenty.i18n.Components.story = {
    de: {
        by: "Von"
    },
    fr : {
        by: "De"
    },
};

Twenty.i18n.Components.tags = {
    "de": {
        "header": "Tags"
    },
    "fr": {
        "header": "ThÃ¨mes"
    }
};


Twenty.i18n.Components.videoplayer = {
    de: {
        close: "Schliessen"
    },
    fr : {
        close: "Fermer"
    },
};

"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * @method Twenty.Components.actionicon
 * @memberof Twenty.Components
 * @description Icons under Storyteaser. Populated by {@link Twenty.Components.actioniconlist}.
 * @param {Object} data
 * @param {('comments' | 'livestream' | 'video' | 'newsticker' | 'context' | 'infoBox' | 'html_content' | 'gallery' | 'poll' | 'nxp_ticker' | 'share_count')} data.type type of the action.
 */

/* istanbul ignore next */
Twenty.Components.actionicon = createReactClass({
    displayName: "actionicon",


    myNameIs: "actionicon",
    mixins: [Twenty.mixins.pureRender],

    render: function render() {
        var iconsRender = void 0;

        if (this.props.data.type === "comments") {
            return React.createElement(
                "div",
                { className: "actionicon comment" },
                React.createElement("span", { className: "icon icon-comment" }),
                React.createElement(
                    "span",
                    null,
                    this.props.data.value
                )
            );
        }
        if (this.props.data.type === "livestream") {
            return React.createElement(
                "div",
                { className: "actionicon video" },
                React.createElement("span", { className: "icon icon-video" })
            );
        }
        if (this.props.data.type === "video") {
            return React.createElement(
                "div",
                { className: "actionicon video" },
                React.createElement(
                    "div",
                    { className: "text" },
                    React.createElement(Twenty.i18n.str, { textref: "actionicons.video" })
                )
            );
        }
        if (this.props.data.type === "newsticker") {
            return React.createElement(
                "div",
                { className: "actionicon nxp_ticker" },
                React.createElement(
                    "div",
                    { className: "text" },
                    React.createElement(Twenty.i18n.str, { textref: "actionicons.news" })
                )
            );
        }
        if (this.props.data.type === "context") {
            return React.createElement(Twenty.Components.emptycomponent, null);
        }
        if (this.props.data.type === "infoBox") {
            return React.createElement(Twenty.Components.emptycomponent, null);
        }
        if (this.props.data.type === "icons") {
            iconsRender = this.props.data.value.map(function (icon, i) {
                return React.createElement("span", { className: "icon " + icon, key: i });
            });
            return React.createElement(
                "div",
                { className: "actionicon icon-wrap" },
                iconsRender
            );
        }
        if (this.props.data.type === "html_content") {
            // generate the html from the application or create a author and time condition. the html_content is more generic
            return React.createElement("div", { className: "actionicon html-content", dangerouslySetInnerHTML: { __html: this.props.data.value } });
        }
        if (this.props.data.type === "gallery") {
            return React.createElement(
                "div",
                { className: "actionicon gallery" },
                React.createElement("span", { className: "icon icon-camera" })
            );
        }
        if (this.props.data.type === "poll") {
            return React.createElement(
                "div",
                { className: "actionicon poll" },
                React.createElement("span", { className: "icon icon-chart-bar" })
            );
        }
        if (this.props.data.type === "nxp_ticker") {
            return React.createElement(
                "div",
                { className: "actionicon nxp_ticker" },
                React.createElement(
                    "span",
                    { className: "text" },
                    React.createElement(Twenty.i18n.str, { textref: "actionicons.liveticker" })
                )
            );
        }
        if (this.props.data.type === "share_count") {
            return React.createElement(
                "div",
                { className: "actionicon share" },
                React.createElement("span", { className: "icon icon-share" }),
                " ",
                this.props.data.value
            );
        }

        if (typeof Twenty.tracking !== "undefined") {
            Twenty.tracking.errorlog({
                category: "component",
                action: "actionicons",
                label: "unsupported storyteaser icon: " + this.props.data.type
            });
        }

        return React.createElement(Twenty.Components.emptycomponent, null);
    }
});

/**
 * @method Twenty.Components.actioniconlist
 * @memberof Twenty.Components
 * @description Icon block under Storyteaser. Rendered from within {@link Twenty.Components.storylistitem}
 * @param {Object} data
 * @param {Object} data.icons which icons to show under story teaser. value of each key in icons doesn't matter. do not put an icon when not shown.
 * @param {number} data.icons.video video icon
 * @param {number} data.icons.context not displayed. {@link Twenty.Components.emptycomponent} will be rendered.
 * @param {number} data.icons.newsticker news ticker icon
 * @param {number} data.icons.info_box not displayed. {@link Twenty.Components.emptycomponent} will be rendered.
 * @param {number} data.icons.gallery gallery icon
 * @param {number} data.icons.poll poll icon
 * @param {number} data.icons.comment comment icon
 * @param {number} data.icons.nxp_ticker nxp ticker icon
 * @param {number} data.comment_count number of comments for that story
 */

Twenty.Components.actioniconlist = createReactClass({
    displayName: "actioniconlist",


    myNameIs: "actioniconlist",
    mixins: [Twenty.mixins.pureRender],

    render: function render() {

        var actionIconsList = [];

        if (this.props.data && this.props.data.icons) {
            var commentCount = this.props.data.comment_count,
                shareCount = this.props.data.shares_total,
                htmlContent = this.props.data.html_content,
                iconNames = this.props.data.icon_names;
            actionIconsList = Object.keys(this.props.data.icons).map(function (item, i) {
                // eslint-disable-next-line prefer-const
                var actionData = {};
                switch (item) {
                    case "video":
                        /* [TODO] I broke this @BDG
                        if(this.props.data.actionicon === 'live refresh') {
                            actionData.type = 'livestream';
                        } else { }
                        */
                        actionData.type = "video";
                        break;
                    case "context":
                        actionData.type = "context";
                        break;
                    case "newsticker":
                        actionData.type = "newsticker";
                        break;
                    case "info_box":
                        actionData.type = "infoBox";
                        break;
                    case "html_content":
                        actionData.type = "html_content";
                        actionData.value = htmlContent;
                        break;
                    case "aboplus":
                        actionData.type = "html_content";
                        actionData.value = "<span class='premium_abo_plus'>ABO+</span>";
                        break;
                    case "icons":
                        actionData.type = "icons";
                        actionData.value = iconNames;
                        break;
                    case "gallery":
                        actionData.type = "gallery";
                        break;
                    case "poll":
                        actionData.type = "poll";
                        break;
                    case "comment":
                        if (commentCount) {
                            actionData.type = "comments";
                            actionData.value = commentCount;
                        }
                        break;
                    case "share":
                        if (shareCount !== false && shareCount !== null && shareCount !== 0) {
                            actionData.type = "share_count";
                            actionData.value = shareCount;
                        }
                        break;
                    case "nxp_ticker":
                        actionData.type = "nxp_ticker";
                        break;
                    default:
                        Twenty.tracking.errorlog({
                            category: "component",
                            action: "storylistitem",
                            label: "unsupported multimedia icon: " + item
                        });
                        break;
                }
                return React.createElement(Twenty.Components.actionicon, { data: actionData, key: i });
            });
        }

        return React.createElement(
            "div",
            { className: "actionicons" },
            actionIconsList
        );
    }
});

/**
 * @method Twenty.Components.ad
 * @memberof Twenty.Components
 * @description display adverts as specified in the feed
 * @param {string} adUnitName input parameter to {@link Twenty.ads.registerPlacement}. As well as used for the css class name together with "ad-container"
 * @param {string} adserver_url input parameter to {@link Twenty.ads.registerPlacement}
 * @param {boolean} defaultLabel fallback to default label if none is provided by feed data
 *
 * @example Twenty.Components.ad("inside-full-top", "front")
 */

/* istanbul ignore next */
Twenty.Components.ad = createReactClass({
    displayName: "ad",


    myNameIs: "ad",
    elementId: null,

    getInitialState: function getInitialState() {
        return {
            displayComponent: "no-show"
        };
    },

    componentWillMount: function componentWillMount() {
        this.elementId = Twenty.core.getUniqueKey("werbung");
    },

    componentDidMount: function componentDidMount() {
        var _this = this;

        var adTitle = this.props.defaultLabel ? Twenty.i18n.getString("ad.headline", null) : "";

        if (this.props.data && this.props.data.items.length > 0 && this.props.data.items[0].title) {
            adTitle = this.props.data.items[0].title;
        }

        var adHeader = "<span class='ad-label'>" + adTitle.toUpperCase() + "</span>";
        Twenty.ads.registerPlacement(this.props.adUnitName, this.elementId, this.props.adserver_url, adHeader, function (e) {
            if (e && !e.isEmpty) {
                _this.setState({
                    displayComponent: "show"
                });
            }
        });
    },

    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        return this.state.displayComponent === "no-show" && nextState.displayComponent === "show";
    },

    render: function render() {
        // TOTM debug mode -do not remove
        // window.totmdbg=true;
        return React.createElement("div", { className: "ad-container ad " + this.props.adUnitName + " " + this.state.displayComponent, id: this.elementId, key: this.elementId });
    }
});

/**
 * @method Twenty.Components.adbanner
 * @memberof Twenty.Components
 * @description display a banner ad at the top of the page.
 * @param {Object} banner One of the banners set in environment variables {@link Twenty.env.banners}
 * @param {string} banner.link Link target for the ad baner
 * @param {string} banner.url Image link for the ad banner
 *
 * @example
    Twenty.Components.adbanner({
        banner: {
            url: "https://www.20minuten.ch/2010/sponsoren/sponsor_postfinance_FR_v02.jpg",
            link: "https://www.postfinance.ch/fr.html?WT.mc_id=20min_pf_pf_logo"
        }
    })
 */

/* istanbul ignore next */
Twenty.Components.adbanner = createReactClass({
    displayName: "adbanner",


    myNameIs: "adbanner",
    mixins: [Twenty.mixins.pureRender],
    banner: false,

    handleClick: function handleClick() {
        if (this.props.banner) {
            window.open(this.props.banner.link);
        } else {
            return false;
        }
    },

    getInitialState: function getInitialState() {
        return {
            bannerStyle: {
                backgroundImage: "none",
                display: "none"
            },
            classes: "adbanner"
        };
    },

    componentWillMount: function componentWillMount() {
        if (this.props.banner && !Twenty.app.getState("nativeView")) {
            var classes = "adbanner show";
            if (this.props.category) {
                classes += " " + this.props.category;
            }
            this.setState({
                bannerStyle: {
                    backgroundImage: "url(" + this.props.banner.url + ")",
                    display: "block"
                },
                classes: classes
            });
        }
    },

    render: function render() {
        return React.createElement("div", { className: this.state.classes, style: this.state.bannerStyle, onClick: this.handleClick });
    }
});

/**
 * @method Twenty.Components.agb
 * @memberof Twenty.Components
 * @description renders a checkbox-switch button with a label that refers to the AGBs. Label text is previously defined in i18n with textref="agb.text"
 * @param {Object} data
 * @param {boolean} data.required if it is required to accept the rules before posting.
 * @param {boolean} validating state variable that changes while validating.
 */

/* istanbul ignore next */

Twenty.Components.agb = createReactClass({
    displayName: "agb",


    myNameIs: "agb",
    mixins: [Twenty.mixins.validation],
    currentlyValidating: false,

    loadAGBPage: function loadAGBPage(e) {
        var storyId = this.AGBLink.href.match(/\d{8}$/)[0];
        e.preventDefault();
        Twenty.app.controller.loadDeepLinkStoryPage(storyId);
    },

    requiredCheck: function requiredCheck() {
        if (this.props.data.required) {
            if ($(this.domNode).find("input:checked").length === 0) {
                this.setState({
                    isValid: false
                });
            } else {
                this.setState({
                    isValid: true
                });
            }
        }
    },

    getDefaultProps: function getDefaultProps() {
        return { data: {} };
    },

    getInitialState: function getInitialState() {
        return { isValid: true };
    },

    componentDidUpdate: function componentDidUpdate() {
        if (this.props.data.required && this.props.validating && !this.currentlyValidating) {
            this.requiredCheck();
            this.currentlyValidating = true;
        } else {
            this.currentlyValidating = false;
        }
    },

    render: function render() {
        var _this2 = this;

        var cssClass = !this.state.isValid ? "has-error" : "",
            linkHref = Twenty.env.getServer("agb"),
            id = Twenty.core.getUniqueKey("agb");
        return React.createElement(
            "div",
            { className: "agb checkbox-switch label-right", ref: function ref(_ref2) {
                    _this2.domNode = _ref2;
                } },
            React.createElement("input", { type: "checkbox", id: id, name: "accept-agb", onChange: this.requiredCheck, "data-valid": this.state.isValid, required: true }),
            React.createElement(
                "label",
                { className: cssClass, htmlFor: id },
                React.createElement("span", { className: "toggle" }),
                React.createElement(Twenty.i18n.str, { textref: "agb.text" }),
                " ",
                React.createElement(
                    "a",
                    { href: linkHref, ref: function ref(_ref) {
                            _this2.AGBLink = _ref;
                        }, onClick: this.loadAGBPage },
                    React.createElement(Twenty.i18n.str, { textref: "agb.link" })
                ),
                "."
            )
        );
    }
});

/**
 * @method Twenty.Components.articleElement
 * @memberof Twenty.Components
 * @description initializes various types of elements to construct a story page.
 * @param {Object} props.nextElement - Data for the article element passed by {@link Twenty.Components.story}
 * @param {"text" | "action_toolbar" | "comment_bubble" | "custom_html" | "diashow" | "iframe" | "gallery" | "image" | "info_box" | "inline_poll" | "video" | "video_ad" | "nxp_liveticker" | "nxp_scoreboard" | "20min_liveticker" | "form"} props.nextElement.boxtype Type of this article element.
 * @param {string} props.nextElement.id - Id of this story.
 * @param {string} props.nextElement.data - Text to display
 * @param {string} props.nextElement.description - Description
 * @param {string} props.nextElement.iframe_url - iframe source url.
 * @param {string} props.nextElement.link When the element type is diashow, this is the feed link to diashow.
 * @param {Object} data - Data for the story
 * @param {Object} data.communityobject - Community object
 * @param {"inactive" | "active"} data.communityobject.comments_active - When "inactive", no more new comments can be added (but replying to a comment is allowed),
 * @param {string} data.talkback_api_url - Feed url to the discussion.
 * @param {string} data.adserver_url - Ad server url.
 **/

Twenty.Components.articleElement = createReactClass({
    displayName: "articleElement",


    supportedElements: {
        "text": "text",
        "counterstriker": "counterstriker",
        "action_toolbar": "socialbox",
        "comment_bubble": "commentbubble",
        "custom_html": "customHTML",
        "diashow": "diashow",
        "slideshow": "slideshow",
        "gallery": "diashow",
        "iframe": "iframe",
        "image": 0,
        "info_box": "infobox",
        "inline_poll": "poll",
        "video": "video",
        "video_ad": "video_ad",
        "nxp_liveticker": "nxp_liveticker",
        "nxp_scoreboard": "nxp_scoreboard",
        "20min_liveticker": "liveticker",
        "mobile2_liveticker": "mobile2liveticker",
        "form": "form",
        "poll": "chartPoll",
        "newsletter": "newsletter",
        "cotext_element": "cotext"
    },

    scoreboard: 0,

    render: function render() {
        var boxtype = false,
            elType,
            returnComponent;

        if (this.props.nextElement) {
            boxtype = this.props.nextElement.boxtype;
            elType = boxtype in this.supportedElements && this.supportedElements[boxtype];
        } else {
            elType = false;
            return null;
        }

        switch (elType) {
            case "text":
            case "cotext":
                returnComponent = React.createElement("div", { dangerouslySetInnerHTML: { __html: this.props.nextElement.data } });
                break;
            case "counterstriker":
                return React.createElement(Twenty.Components.counterstriker, _extends({ key: Twenty.core.getUniqueKey("counterstriker") }, this.props.nextElement));
            case "diashow":
            case "slideshow":
                if (this.props.nextElement.link) {
                    returnComponent = React.createElement(Twenty.Components.slideshow, { slideshowType: "inline", feedUrl: this.props.nextElement.link, key: Twenty.core.getUniqueKey("slideshow") });
                } else {
                    returnComponent = React.createElement(Twenty.Components.slideshow, { slideshowType: "inline", pagination: true, data: this.props.nextElement.slideshow.data, key: Twenty.core.getUniqueKey("slideshow") });
                }
                break;
            case "socialbox":
                if (this.props.data.communityobject) {
                    var socialboxKey = Twenty.core.getUniqueKey("socialbox"),
                        data = this.props.data;
                    returnComponent = React.createElement(Twenty.Components.socialbox, { key: socialboxKey, data: data, className: "article-element" });
                } else {
                    returnComponent = React.createElement(Twenty.Components.emptycomponent, null);
                }
                break;
            case "poll":
                returnComponent = React.createElement(Twenty.Components.poll, { data: this.props.nextElement, className: "article-element" });
                break;
            case "infobox":
                var infoboxKey = Twenty.core.getUniqueKey("infobox");
                returnComponent = React.createElement(Twenty.Components.infobox, { key: infoboxKey, data: this.props.nextElement, className: "article-element" });
                break;
            case "commentbubble":
                var commentlinkKey = Twenty.core.getUniqueKey("commentlink"),
                    feedurl = Twenty.env.getServer("commentFeed") + this.props.data.id + "/order_newest";
                returnComponent = React.createElement(Twenty.Components.commentlink, { key: commentlinkKey, classNames: "btn infobox comment-infobox", data: this.props.nextElement, feedurl: feedurl, className: "article-element", textref: "commentlink.writeComment" });
                break;
            case "form":
                var server = Twenty.env.getServer("formData"),
                    formId = this.props.nextElement.id,
                    formUrl = server + "/form" + formId + ".json",
                    formUrlData = {
                    getFormUrl: formUrl
                },
                    formelementKey = Twenty.core.getUniqueKey("formelement");
                returnComponent = React.createElement(Twenty.Components.form.formelement, { key: formelementKey, data: formUrlData, cssClass: "form" });
                break;
            case "video":
                var configData = Twenty.datamodel.videoplayerParams || null;
                returnComponent = React.createElement(Twenty.Components.videoplayer, { videoID: this.props.nextElement.id, videoDescription: this.props.nextElement.description, configData: configData });
                break;
            case "iframe":
                var iframeStyle = { width: "94vw" };
                if (this.props.nextElement.iframe_height) {
                    iframeStyle.minHeight = this.props.nextElement.iframe_height + "px";
                }
                returnComponent = React.createElement("iframe", { src: this.props.nextElement.iframe_url, style: iframeStyle, scrolling: "no", frameBorder: "0", allowtransparency: "true" });
                break;
            case "video_ad":
                var adkey = Twenty.core.getUniqueKey("articleelementad");
                returnComponent = React.createElement(Twenty.Components.ad, { adUnitName: "inside-full-pos1", adserver_url: this.props.data.adserver_url, key: adkey, defaultLabel: true });
                break;
            case "nxp_scoreboard":
                Twenty.app.setState("scoreboard", this.props.nextElement.id);
                returnComponent = React.createElement(Twenty.Components.emptycomponent, { key: Twenty.core.getUniqueKey("emptycomponent") });
                break;
            case "nxp_liveticker":
                var nxptickerId = this.props.nextElement.id,
                    scoreboardId = Twenty.app.getState("scoreboard");
                Twenty.app.setState("scoreboard", null);
                returnComponent = React.createElement(Twenty.Components.nxpliveticker, { tickerid: nxptickerId, scoreboard: scoreboardId });
                break;
            case "liveticker":
                var tickerId = this.props.nextElement.id;
                returnComponent = React.createElement(Twenty.Components.liveticker, { tickerid: tickerId });
                break;
            case "mobile2liveticker":
                var mobile2tickerId = this.props.nextElement.id,
                    mobile2scoreboardId = this.props.nextElement.scoreboardId;
                returnComponent = React.createElement(Twenty.Components.mobile2liveticker, { tickerid: mobile2tickerId, scoreboardId: mobile2scoreboardId });
                break;
            case "chartPoll":
                returnComponent = React.createElement(Twenty.Components.chartPoll, { data: this.props.nextElement });
                break;
            case "newsletter":
                returnComponent = React.createElement(Twenty.Components.newsletter, { key: Twenty.core.getUniqueKey("newsletter"), data: this.props.nextElement });
                break;
            default:
                var defaultboxtype = boxtype || "unknown box type";
                Twenty.tracking.errorlog({
                    category: "component",
                    action: "story",
                    label: "unsupported story element: " + defaultboxtype
                });
                returnComponent = React.createElement(Twenty.Components.emptycomponent, { key: Twenty.core.getUniqueKey("emptycomponent") });
                break;
        }

        return returnComponent;
    }

});

/**
 * @method Twenty.Components.articleelementlist
 * @memberof Twenty.Components
 * @description a group of article elements. each article element is passed to {@link Twenty.Components.articleElement} and then wrapped in another container.
 * [.. a long time ago]
 * I just realised that this really needs a little more explanation that offered above.
 * Stories in the feed are a big block of text that we need to pull apart and make look
 * pretty. Considering how explicit the feed can be sometimes, this is a bit of an
 * anomaly, but let's roll with it for now [MW-1327]
 * We get an array of "article elements". These need to be translated into relevant
 * components (see the bit in the render starting "switch(elType) {"
 * The markers for "article elements" are in the text as
 * <!--\[articleElementIndex:\d+\]-->
 * So, firstly, we break the story up on this string. This effectively deletes the markers
 * and splits the rest of the story into an array of strings which we call storyBits.
 * We know that the articleElementIndex's are an autoincrementing integer staring on 0
 * (which makes the number irrelevant, but that's another matter)
 * this means, we can iterate through the "storyBits", and interleave them with the array
 * article elements.
 * Or, in other words, map through the storyBits and on each loop, render the current
 * storyBit *and* the same-indexed articleElement
 * If the storyBit is blank, just render the articleElement. If the articleElement is not
 * supported, render the emptyComponent instead.
 * @param {Object[]} articleElements an array of article elements to be rendered.
 * @param {Object} extra_data extra data needed for the story
 * @param {string} extra_data.title the title of the story
 * @param {string} extra_data.lead the lead text of the story
 * @param {string} extra_data.livepage_url the url of the story
 * @param {string} extra_data.pic_bigstory the picture of the story in big size
 * @param {string} extra_data.oberzeile kicker title
 * @param {string} extra_data.ageofstory how old is the story
 * @param {string} extra_data.pubDate date the story is published
 */
Twenty.Components.articleelementlist = createReactClass({
    displayName: "articleelementlist",

    render: function render() {
        return React.createElement(
            "div",
            { className: "article-element-list" },
            this.props.articleElements.map(function (articleEl, index) {
                return React.createElement(
                    "div",
                    { key: index, className: "story-layout-section" },
                    React.createElement(Twenty.Components.articleElement, { nextElement: articleEl, data: this.props.extraData })
                );
            }, this)
        );
    }
});
/**
 * @method Twenty.Components.audiostreamer
 * @memberof Twenty.Components
 * @description can render a start stop button for a audio url streamer and can stream a audio source from a url
 * @param {string} pageName - should contain the name of the page
 * @param {integer} scrollTolerance
 */

Twenty.Components.audiostreamer = createReactClass({
    displayName: "audiostreamer",


    myNameIs: "audiostreamer",
    scrollData: {},
    streamURLData: "",
    expiration: 0,
    interval: null,

    handleClickShare: function handleClickShare(e) {
        e.preventDefault();
        if (this.refs.playerSharemenu.style.display === "block") {
            this.refs.playerSharemenu.style.display = "none";
        } else {
            this.refs.playerSharemenu.style.display = "block";
        }
    },

    songUpdate: function songUpdate(refs) {
        var _this3 = this;

        var trackDelay = this.props && this.props.data.trackDelay ? this.props.data.trackDelay : 25,
            timeNow = Date.now() / 1000 || 0,
            remaining = this.expiration - timeNow + trackDelay;

        if (this.state.audioPlayer === null) {
            clearInterval(this.interval);
            this.interval = null;
            return false;
        }

        this.refs.songInfoTop.classList.remove("song-info-changed");
        this.refs.songInfoBottom.classList.remove("song-info-changed");
        if (this.state.audioPlayer.paused) {
            clearInterval(this.interval);
            this.interval = null;
        } else {
            if (remaining < 4) {
                Twenty.datamodel.runAJAXRequest({
                    url: this.streamURLData.streamDescriptionUrlStart + Twenty.app.controller.getRandomKey() + this.streamURLData.streamDescriptionUrlEnd,
                    type: "get",
                    dataType: "json",
                    success: function success() {}
                }).then(function (data) {
                    if (_this3.refs.songInfoTop.innerHTML === "" && _this3.refs.songInfoBottom.innerHTML === "" || _this3.state.songInfo === "" && _this3.state.artistInfo === "") {
                        _this3.refs.songInfoTop.classList.remove("song-info-changed");
                        _this3.refs.songInfoBottom.classList.remove("song-info-changed");
                    } else if (_this3.refs.songInfoTop.innerHTML !== data.track && _this3.refs.songInfoBottom.innerHTML !== data.artist || _this3.state.songInfo !== data.track && _this3.state.artistInfo !== data.artist) {
                        _this3.refs.songInfoTop.classList.add("song-info-changed");
                        _this3.refs.songInfoBottom.classList.add("song-info-changed");
                    }

                    _this3.expiration = data.expiration;
                    _this3.setState({
                        songInfo: data.track,
                        artistInfo: data.artist
                    });
                });
            }

            if (this.interval === null) {
                this.interval = setInterval(function () {
                    _this3.songUpdate(_this3.expiration, refs);
                }, 2000);
            }
        }
    },

    handleClick: function handleClick() {
        var _this4 = this;

        var audioPlayerLocale = null;
        if (this.state.play) {
            this.state.audioPlayer.pause();
            this.refs.playerContainer.classList.remove("slide-down-hide-solve");
            if (Twenty.app.getState("page").id !== "frontpage") {
                this.refs.startPauseButton.classList.add("slide-down-hide-button");
            } else {
                this.refs.playerContainer.classList.remove("slide-down-hide-solve");
            }

            // reset audioPlayer : It resets the audio player and destroy it.
            // It is necessary, because if we only would pause the player, it would continue download data in the backend.
            audioPlayerLocale = this.state.audioPlayer;
            audioPlayerLocale.src = "";
            audioPlayerLocale.load();
            audioPlayerLocale.currentTime = 0;
            audioPlayerLocale = null;

            this.setState({
                play: false,
                audioPlayer: audioPlayerLocale
            });
        } else {
            this.expiration = 0;

            audioPlayerLocale = new Audio(this.streamURLData.streamUrl);
            audioPlayerLocale.load();
            audioPlayerLocale.play();

            this.setState({
                play: true,
                audioPlayer: audioPlayerLocale,
                songInfo: "",
                artistInfo: ""
            }, function () {
                return _this4.songUpdate(_this4.refs);
            });
        }
    },

    getDefaultProps: function getDefaultProps() {
        return {
            data: {
                scrollTolerance: 30
            }
        };
    },

    getInitialState: function getInitialState() {
        return {
            play: false,
            audioPlayer: null,
            songInfo: "",
            artistInfo: "",
            showShareOption: false
        };
    },

    componentWillMount: function componentWillMount() {
        this.streamURLData = Twenty.env.getServer("audioStreamer");

        this.scrollData = {
            scrollTolerance: this.props.data.scrollTolerance,
            scrollDirection: "down",
            additionalScrollElements: [{
                id: "player-sharemenu",
                scrollDistance: "far-slide"
            }],
            hideShowElements: [{
                id: "player-info-1"
            }]
        };
    },
    // eslint-disable-next-line no-unused-vars
    componentWillUpdate: function componentWillUpdate(nextProps, nextState) {
        // this is application specific
        if (Twenty.app.getState("page").id === "frontpage") {
            this.refs.playerContainer.classList.remove("slide-down-hide");
            this.refs.startPauseButton.classList.remove("slide-down-hide-button");
        } else {
            this.refs.playerContainer.classList.add("slide-down-hide");
        }
    },

    render: function render() {
        return React.createElement(
            "div",
            { className: "audiostreamer" },
            !Twenty.app.getState("nativeView") && React.createElement(
                "div",
                null,
                React.createElement(
                    "div",
                    null,
                    this.showShareOption && React.createElement(
                        "div",
                        { className: "player-sharemenu", ref: "playerSharemenu" },
                        React.createElement(Twenty.Components.sharemenu, { originalStory: { data: { title: "title", pic_bigstory: "", lead: "leade", id: "111", oberzeile: "oberzeile" } } })
                    ),
                    this.state.play ? React.createElement(
                        "div",
                        { className: "audio-player-container", ref: "playerContainer", onClick: this.handleClick },
                        React.createElement(
                            "div",
                            { className: "start-pause-button", ref: "startPauseButton" },
                            React.createElement("img", { ref: "startStopImage", src: "/webapp/img/audiostreamer/RadioPauseButtonV2.png" })
                        ),
                        React.createElement(
                            "div",
                            { className: "player-info-box" },
                            React.createElement(
                                "div",
                                { className: "song-info top song-info-changed truncate", ref: "songInfoTop" },
                                this.state.songInfo
                            ),
                            React.createElement(
                                "div",
                                { className: "song-info bottom song-info-changed truncate", ref: "songInfoBottom" },
                                this.state.artistInfo
                            )
                        ),
                        this.showShareOption && React.createElement(
                            "div",
                            { className: "share-button", ref: "shareButton", onClick: this.handleClickShare },
                            "c"
                        )
                    ) : React.createElement(
                        "div",
                        { className: "audio-player-container", ref: "playerContainer", onClick: this.handleClick },
                        React.createElement(
                            "div",
                            { className: "start-pause-button", ref: "startPauseButton" },
                            Twenty.app.getState("page").id === "frontpage" && React.createElement("img", { ref: "startStopImage", src: "/webapp/img/audiostreamer/RadioPlayButtonV2.png" })
                        ),
                        React.createElement(
                            "div",
                            { className: "player-info-box" },
                            React.createElement(
                                "div",
                                { className: "player-info-top" },
                                React.createElement(Twenty.i18n.str, { textref: "audiostreamer.startMessage" })
                            )
                        ),
                        this.showShareOption && React.createElement(
                            "div",
                            { className: "share-button", ref: "shareButton", onClick: this.handleClickShare },
                            "c"
                        )
                    )
                ),
                React.createElement(Twenty.Components.retreat, { data: this.scrollData, domNode: this.refs.playerContainer })
            )
        );
    }
});

/**
 * @method Twenty.Components.authors
 * @memberof Twenty.Components
 * @param {Object} data
 * @param {string} data.name name of the author.
 * @param {string} data.url site url to the profile page of author.
 * @param {string} data.twitter twitter handle of the author as it appears in the link: twitter.com/_id_.
 * @param {string} data.picture image url to the picture of author.
 */

Twenty.Components.authors = createReactClass({
    displayName: "authors",

    myNameIs: "authors",

    render: function render() {
        if (!this.props.data || this.props.data.length === 0) {
            return false;
        }

        return React.createElement(
            "div",
            { className: "authors" },
            React.createElement(
                "h2",
                null,
                React.createElement(Twenty.i18n.str, { textref: "authors.by" })
            ),
            React.createElement(
                "ul",
                null,
                this.props.data.map(function (author, i, arr) {
                    return React.createElement(
                        "li",
                        { className: "author", key: i },
                        arr.length === 1 && author.picture && React.createElement("img", { alt: "", src: author.picture || "" }),
                        React.createElement(
                            "p",
                            { className: "author-name" },
                            author.name
                        ),
                        author.twitter && React.createElement(
                            "p",
                            { className: "author-twitter" },
                            React.createElement(
                                "a",
                                { href: "https://twitter.com/" + author.twitter, target: "_blank" },
                                React.createElement("span", { className: "icon icon-twitter" }),
                                " @",
                                author.twitter
                            )
                        )
                    );
                }, this)
            )
        );
    }
});

/**
 * @method Twenty.Components.breakingnews
 * @memberof Twenty.Components
 * @description big red breaking thing at the top when something super-important happens. some properties are input to {@link Twenty.app.controller}.handleFrontPageClick.
 * @param {object} data
 * @param {string} data.id story id
 * @param {"story" | "breakingnews" | "category_title"} data.type handled page types are: "story" | "breakingnews" | "category_title". input to method {@link Twenty.app.controller}.handleFrontPageClick.
 * @param {object[]} data.items first element of the array is used.
 * @param {string} data.items.title news title
 * @param {string} data.items.lead news lead
 * @param {string} data.items.targetblank if equal to 'target="_blank"', click handler will open the data.items.mobile_link
 * @param {string} data.items.mobile_link mobile_link used together with data.items.targetblank to let mobile user open the page in a new tab. if data.items.targetblank is not set, but mobile_link is provided, a longformstory page is rendered.
 * @param {string} data.items.link link provide a link to give user an opportunity to open in new tab (or see the url on mouse over on desktop).
 *
 */
/* istanbul ignore next */
Twenty.Components.breakingnews = createReactClass({
    displayName: "breakingnews",


    myNameIs: "breakingnews",

    mixins: [Twenty.mixins.pureRender],

    handleClick: function handleClick() {
        this.props.handleClick(this.props.data.items[0]);
    },

    render: function render() {
        var element = this.props.data.items[0];
        return React.createElement(
            "a",
            { className: "breaking-news-link", key: this.props.data.id, onClick: this.handleClick },
            React.createElement(
                "div",
                { className: "breaking-news" },
                React.createElement(
                    "h3",
                    { className: "oberzeile" },
                    React.createElement(Twenty.i18n.str, { textref: "breakingnews.breaking" })
                ),
                React.createElement(
                    "h2",
                    null,
                    element.title
                ),
                React.createElement(
                    "p",
                    { className: "breaking-news-lead" },
                    element.lead
                )
            )
        );
    }
});

/**
* @method Twenty.Components.categorytitle
* @memberof Twenty.Components
* @description header section divider on main page.
* If the category name appears in the sitemap feed, it can be loaded by tapping on it.
* If it is a group of categories, it loads a list with sub categories. You can tap on one of them to load it.
* @param {Object} data - Data object
* @param {Object} data.items - Category title items.
* @param {number} data.items.id - Unique id for this category.
* @param {string} data.items.title - title for the category.
* @param {string} data.items.category - Name of the category. Must exist in sitemap feed.
* @param {function} handleClick - Click handler to open the category
* @param {function} loadSubsection - load a subsection of the category
*/
/* istanbul ignore next */
Twenty.Components.categorytitle = createReactClass({
    displayName: "categorytitle",


    myNameIs: "categorytitle",

    handleClick: function handleClick(section, className, index) {
        if (className.match(/clickable/g)) {
            this.props.handleClick(section);
        }
        if (className.match(/subsection/g)) {
            var activeSubsections = this.state.activeSubsections.indexOf(index) < 0 ? [index].concat(_toConsumableArray(this.state.activeSubsections)) : this.state.activeSubsections.filter(function (i) {
                return i !== index;
            });
            this.setState({ activeSubsections: activeSubsections });
        }
    },

    loadSubsection: function loadSubsection(section, subsection) {
        this.props.handleClick({
            category: subsection.title,
            type: section.type
        });
    },

    getInitialState: function getInitialState() {
        return {
            activeSubsections: []
        };
    },

    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        return nextState.activeSubsections.length !== this.state.activeSubsections.length;
    },

    render: function render() {
        var _this5 = this;

        if (this.props.data.items.length > 0) {
            return React.createElement(
                "div",
                null,
                this.props.data.items.map(function (element, index) {
                    // the if-request is a bit ugly, there are elements which don't have a show property at all (example: infinity)
                    if (!element.show || element.show.mobile === 1) {
                        var background = element.color,
                            color = element.color_text;

                        var className = "category-text " + element.title.replace(/\s+/g, "-").toLowerCase(),
                            arrow = "",
                            subsectionList = "";

                        if (Twenty.datamodel.isFullCategory(element)) {
                            className += " clickable";
                            arrow = React.createElement("span", { className: "icon icon-button-arrow" });
                        } else if (element.subsection) {
                            var isInactive = _this5.state.activeSubsections.indexOf(index) < 0,
                                arrowClassName = "icon icon-button-arrow " + (isInactive ? "arrow-down" : "arrow-up"),
                                listClassName = "subsection-list" + (isInactive ? "" : " visible"),
                                subsectionStyle = {
                                backgroundColor: element.sub_color || element.color,
                                color: element.sub_color_text || element.color_text
                            };

                            className += " subsection";
                            arrow = React.createElement("span", { className: arrowClassName });
                            subsectionList = React.createElement(
                                "div",
                                { className: listClassName },
                                React.createElement(
                                    "ul",
                                    null,
                                    element.subsection.map(function (subsection, subIndex) {
                                        return React.createElement(
                                            "li",
                                            { key: "subsection_" + subIndex, onClick: function onClick() {
                                                    return _this5.loadSubsection(element, subsection);
                                                }, style: { backgroundColor: subsectionStyle.backgroundColor, borderColor: subsectionStyle.color } },
                                            React.createElement(
                                                "a",
                                                { style: { color: subsectionStyle.color } },
                                                subsection.title
                                            )
                                        );
                                    })
                                )
                            );
                        }

                        return React.createElement(
                            "div",
                            { key: "categoryTitleItem_" + index },
                            React.createElement(
                                "header",
                                { style: { backgroundColor: background }, className: "categorytitle" },
                                React.createElement(
                                    "h1",
                                    { style: { color: color }, onClick: function onClick() {
                                            return _this5.handleClick(element, className, index);
                                        }, className: className },
                                    React.createElement(
                                        "span",
                                        null,
                                        element.title
                                    ),
                                    arrow
                                )
                            ),
                            subsectionList
                        );
                    }
                })
            );
        } else {
            return React.createElement(Twenty.components.emptycomponent, null);
        }
    }
});

/**
 * @method Twenty.Components.chart
 * @memberof Twenty.Components
 * @description display a banner ad at the top of the page.
 * @param {String} id unique id for the displayed chart, used to persist user votings
 * @param {String} header optional header text
 * @param {Array} data I'm too tired to type. See the example
 * @param {Funtion} handlePoll Poll handler callback
 *
 * @example
    Twenty.Components.chart({
        id: "59ada689ab5c376642000001",
        header : "Ist dieser Artikel lesenswert?",
        data: [{
            label: "ja",
            value: "100",
            action: "1"
        },{
            label: "nein",
            value: "100",
            action: "0"
        }],
        handlePoll: callback
    })
 */

/* istanbul ignore next */
Twenty.Components.chart = createReactClass({
    displayName: "chart",


    myNameIs: "chart",

    handleClick: function handleClick(element) {
        if (!this.state.userHasVoted) {
            Twenty.dom.dataStorage.add("voteSent", 1, this.props.id);

            // GTM tracking storyliked?
            Twenty.event.dispatch({
                type: "storyvoted",
                params: {
                    event: "rating_value",
                    question: this.props.header,
                    answer: element.label,
                    counts: element.value
                }
            });

            this.props.handlePoll(element);

            this.setState({
                userHasVoted: true
            });
        }
    },

    getInitialState: function getInitialState() {
        return {
            showResults: false,
            userHasVoted: false
        };
    },

    componentWillMount: function componentWillMount() {
        var hasVoted = Twenty.dom.dataStorage.getItem("voteSent", this.props.id);

        this.setState({
            userHasVoted: hasVoted
        });
    },

    render: function render() {
        var _this6 = this;

        var showResults = this.state.userHasVoted || this.state.showResults ? true : false,
            wrapperClasses = "chart-wrapper" + (showResults ? " has-voted" : ""),
            totalVotesTitle = Twenty.i18n.getString("chart.totalVotes");

        return React.createElement(
            "div",
            { className: "chart" },
            this.props.header && React.createElement(
                "h1",
                null,
                this.props.header
            ),
            this.props.data.map(function (el, i) {
                var width = (showResults && el.value.toString() || 100) + "%";
                return React.createElement(
                    "div",
                    { className: wrapperClasses, key: i, onClick: _this6.handleClick.bind(_this6, el, i) },
                    React.createElement("div", { className: "chart-bar", style: { width: width } }),
                    React.createElement(
                        "div",
                        { className: "chart-label" },
                        el.label
                    ),
                    showResults && React.createElement(
                        "div",
                        { className: "chart-result" },
                        el.value + "%"
                    )
                );
            }),
            showResults && this.props.allVotes && React.createElement(
                "div",
                { className: "total-votes" },
                this.props.allVotes,
                " ",
                totalVotesTitle
            )
        );
    }
});

Twenty.Components.chartRating = createReactClass({
    displayName: "chartRating",


    myNameIs: "chartRating",

    getRates: function getRates() {
        var _this7 = this;

        Twenty.datamodel.runAJAXRequest({
            url: Twenty.env.getServer("api") + "/articles/" + this.props.id + "/rates",
            type: "get",
            dataType: "json",
            success: function success(result) {
                _this7.setState({
                    header: result.element.question,
                    data: result.element.elements.map(function (element) {
                        return {
                            id: element.id,
                            label: element.description,
                            value: Math.round(100 * element.count / result.element.total_count)
                        };
                    })
                });
            }
        });
    },

    rateClick: function rateClick(el) {
        var _this8 = this;

        Twenty.datamodel.runAJAXRequest({
            url: Twenty.env.getServer("api") + "/elements/" + el.id + "/votes",
            type: "post",
            data: { vote: 1 },
            dataType: "json",
            success: function success(result) {
                if (result.status === "ok") {
                    _this8.getRates();
                }
            }
        });
    },

    getInitialState: function getInitialState() {
        return {
            header: "",
            data: []
        };
    },

    componentWillMount: function componentWillMount() {
        this.getRates();
    },

    render: function render() {
        return React.createElement(Twenty.Components.chart, { id: this.props.id, header: this.state.header, data: this.state.data, handlePoll: this.rateClick });
    }
});

Twenty.Components.chartPoll = createReactClass({
    displayName: "chartPoll",


    myNameIs: "chartPoll",

    getOptions: function getOptions() {
        var _this9 = this;

        Twenty.datamodel.runAJAXRequest({
            url: Twenty.env.getServer("api") + "/polls/" + this.props.data.poll_id,
            type: "get",
            dataType: "json",
            success: function success(result) {
                _this9.setState({
                    header: result.poll.question,
                    data: result.poll.votes.map(function (vote) {
                        return {
                            id: vote.id,
                            label: vote.description,
                            value: Math.round(100 * vote.count / result.poll.total_count)
                        };
                    }),
                    total_votes: result.poll.total_count
                });
            }
        });
    },

    pollClick: function pollClick(el) {
        var _this10 = this;

        Twenty.datamodel.runAJAXRequest({
            url: Twenty.env.getServer("api") + "/polls/" + this.props.data.poll_legacy_id + "/votes/" + el.id,
            type: "put",
            dataType: "json",
            success: function success(result) {
                var data = _this10.state.data.map(function (vote, index) {
                    var percent = result.answers[index].percents;
                    percent = percent || 0;
                    return {
                        id: vote.id,
                        label: vote.label,
                        value: Math.round(parseFloat(percent))
                    };
                });

                _this10.setState({
                    message: result.message,
                    data: data
                });
            }
        });
    },

    getInitialState: function getInitialState() {
        return {
            header: "",
            message: "",
            data: []
        };
    },

    componentWillMount: function componentWillMount() {
        this.getOptions();
    },

    render: function render() {
        return React.createElement(Twenty.Components.chart, { id: this.props.data.id, allVotes: this.state.total_votes, header: this.state.header, data: this.state.data, handlePoll: this.pollClick });
    }
});

/**
* @method Twenty.Components.commentlist
* @memberof Twenty.Components
* @description checks local storage for already voted comments and renders a list of comments.
* @param {object[]} data feed data
* @param {number} data.id unique id for the comment (ie. story_id + msg_id)
* @param {string} storyId story id
* @param {string} discussionId id to construct the url that contains discussions.
* @param {Object[]} orderList key-value map. order: comment_key. order is from 0 to n, 0 being the first comment appear on the comment list.
* @param {"active" | "inactive"} talkbackStatus is commenting enabled or disabled. this is the talkback_status from feed.
* @param {boolean} hideTitle when true, comments header (ie. "Kommentare" for german part) together with comment count will be displayed.
* @param {number} commentCount total number of comments on this story
*/
/* istanbul ignore next */
Twenty.Components.commentlist = createReactClass({
    displayName: "commentlist",


    myNameIs: "commentlist",

    handleHeaderClick: function handleHeaderClick() {
        var feedUrl = Twenty.env.getServer("commentFeed") + this.props.discussionId + "/order_newest";
        Twenty.app.controller.loadCommentPage(feedUrl);

        // for GTM
        Twenty.event.dispatch({
            type: "social",
            params: {
                event: "social",
                socialAction: "click",
                socialNetwork: "comments",
                socialTarget: feedUrl
            }
        });
    },

    getInitialState: function getInitialState() {
        return {
            mergedData: this.props.data
        };
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({ mergedData: nextProps.data });
    },

    render: function render() {
        var _this11 = this;

        var feedUrl, commentNodes;

        // if comments have an orderlist order them, if not render all comments directly
        if (this.props.orderList) {
            feedUrl = Twenty.env.getServer("commentFeed") + this.props.discussionId + "/order_newest";
            commentNodes = this.props.orderList.map(function (element, i) {
                // eslint-disable-next-line
                var commentNode = [];
                if (_this11.props.adPosition && _this11.props.adPosition === i) {
                    commentNode.push(React.createElement(Twenty.Components.ad, { adUnitName: "inside-full-comment", adserver_url: Twenty.app.getState("insideFullCommentUrl"), defaultLabel: true, key: _this11.props.adKey }));
                }
                commentNode.push(React.createElement(Twenty.Components.comment, { talkbackStatus: _this11.props.talkbackStatus, key: element, data: _this11.state.mergedData, msgIndex: element, msgId: _this11.state.mergedData[i] && _this11.state.mergedData[i].msgid ? _this11.state.mergedData[i].msgid : element, storyId: _this11.props.storyId }));
                return React.createElement(
                    "li",
                    null,
                    commentNode
                );
            });
        } else {
            feedUrl = Twenty.env.getServer("commentFeed") + this.props.discussionId + "/comments";
            commentNodes = this.props.data.map(function (element, i) {
                if (element.type === "comment") {
                    return React.createElement(
                        "li",
                        null,
                        React.createElement(Twenty.Components.comment, { talkbackStatus: _this11.props.talkbackStatus, key: i, data: _this11.state.mergedData, msgIndex: i, msgId: i, storyId: _this11.props.storyId })
                    );
                }
                if (element.type === "ad") {
                    if (element.adserverUrl) {
                        return React.createElement(
                            "li",
                            null,
                            React.createElement(Twenty.Components.ad, { adUnitName: element.adUnitName, adserver_url: element.adserverUrl, defaultLabel: true, key: element.adKey })
                        );
                    }
                }
            });
        }

        return React.createElement(
            "div",
            { className: "commentlist" },
            React.createElement(
                "section",
                { className: "comments" },
                !this.props.hideTitle ? React.createElement(
                    "h2",
                    { onClick: this.handleHeaderClick },
                    this.props.commentCount,
                    " ",
                    React.createElement(Twenty.i18n.str, { textref: "commentlist.header" })
                ) : "",
                React.createElement(
                    "ol",
                    null,
                    commentNodes
                )
            ),
            React.createElement(Twenty.Components.commentlink, { classNames: "comment-link", feedurl: feedUrl, data: { comments_number: this.props.commentCount }, textref: "commentlink.showComments" })
        );
    }
});

/**
* @method Twenty.Components.comment
* @memberof Twenty.Components
* @description outputs a comment or answer of a comment
* @param {Object[]} data all the comments
* @param {string} storyId story id
* @param {number} msgIndex index id for individual comment
* @param {number} msgId comment id unique to this story
*/
/* istanbul ignore next */
Twenty.Components.comment = createReactClass({
    displayName: "comment",


    myNameIs: "comment",

    replyNodesInfiniteLevel: function replyNodesInfiniteLevel(reply, i, showReplyButton) {
        var _this12 = this;

        var domElemId = Twenty.core.getUniqueKey("comment");
        return React.createElement(
            "li",
            { key: domElemId, id: domElemId, className: "comment-wrapper reply-wrapper" },
            React.createElement(Twenty.Components.commentlistitem, {
                talkbackStatus: this.props.talkbackStatus,
                id: domElemId,
                extendedclasses: "reply",
                storyId: this.props.storyId,
                data: (typeof reply === "undefined" ? "undefined" : _typeof(reply)) === "object" ? reply : this.props.data[reply],
                showReplyButton: showReplyButton }),
            reply.children && reply.children.length && React.createElement(
                "ol",
                { className: "comments-list replies-list 2" },
                reply.children.map(function (replyElement, iElement) {
                    return _this12.replyNodesInfiniteLevel(replyElement, iElement, false);
                })
            )
        );
    },

    replies: function replies() {
        var _this13 = this;

        var answersData;
        if (this.props.data[this.props.msgIndex]) {
            answersData = this.props.data[this.props.msgIndex].answers || this.props.data[this.props.msgIndex].children;
            if (answersData && answersData.length) {
                return React.createElement(
                    "ol",
                    { className: "comments-list replies-list 1" },
                    answersData.map(function (reply, i) {
                        return _this13.replyNodesInfiniteLevel(reply, i, true);
                    })
                );
            }
        } else {
            return false;
        }
    },

    render: function render() {
        var domElemId;

        if (!this.props.data[this.props.msgIndex]) {
            Twenty.tracking.errorlog({
                category: "component",
                action: "comment",
                label: "comment in feed list, but not in data"
            });
            return null;
        }

        return React.createElement(
            "div",
            { key: this.props.msgId, id: domElemId, className: !this.replies ? "comment-wrapper has-replies" : "comment-wrapper" },
            React.createElement(Twenty.Components.commentlistitem, {
                id: this.props.msgIndex,
                storyId: this.props.storyId,
                extendedclasses: "",
                data: this.props.data[this.props.msgIndex],
                talkbackStatus: this.props.talkbackStatus,
                showReplyButton: true }),
            this.replies()
        );
    }
});

/**
 * @method Twenty.Components.commentform
 * @memberof Twenty.Components
 * @description display comments form and handle form inputs
 * @param {string} owner name of the comment owner, who is being replied to.
 * @param {string} discussionId discussion id
 * @param {string} msgId message id
 * @param {Number} maxLength the maximum permissible length of the comment
 * @param {"newComment" | any} type is this comment a new comment? otherwise it is a reply to a comment.
 */
/* istanbul ignore next */

Twenty.Components.commentform = createReactClass({
    displayName: "commentform",


    myNameIs: "commentform",
    mixins: [Twenty.mixins.toast],
    submittable: false,
    expandable: true,

    setUserState: function setUserState() {
        if (Twenty.user.getUserInfo("username")) {
            this.setState({ username: Twenty.user.getUserInfo("username") });
        } else if (Twenty.user.getUserInfo("firstName")) {
            this.setState({ username: Twenty.user.getUserInfo("firstName") + " " + Twenty.user.getUserInfo("lastName") });
        }
    },

    handleValidation: function handleValidation(e) {
        e.preventDefault();
        this.setState({
            validating: true
        }, function () {
            var that = this,
                $formElements = $(this.form).find("input[data-valid], textarea[data-valid]");
            this.submittable = true;

            // loop all required inputs
            $formElements.each(function (i) {
                // set submittable to false if this input is not valid
                if ($(this).attr("data-valid") === "false" || $(this).attr("data-valid") === "true" && $(this).val().length <= 0) {
                    that.submittable = false;
                    that.showToastMessage("toastConfigErrorValidation");
                }

                // submit form if last input and submittable is still true
                if (i + 1 === $formElements.length && that.submittable === true) {
                    that.submit();
                }
            });
        });
    },

    submit: function submit() {
        var msgId = this.props.msgId || "0",
            data = {
            comment: this.inputMessage.domNode.value,
            username: /* Twenty.user.getLoggedInUser() ||*/this.inputUser.domNode.value,
            title: this.inputTitle.domNode.value,
            UID: "", // gigya uid
            cors: location.host,
            encoding: "utf8",
            l: Twenty.i18n.lang === "de" ? 0 : 1 // eslint-disable-line id-length
        };

        var dataParams = "";
        for (var key in data) {
            if (key) {
                if (dataParams !== "") {
                    dataParams += "&";
                }
                dataParams += key + "=" + encodeURIComponent(data[key]);
            }
        }
        Twenty.datamodel.runAJAXRequest({
            url: Twenty.env.getServer("api") + "/discussion/post/story/" + this.props.discussionId + "/message/" + msgId + "/?encoding=utf8&cors=" + location.host,
            data: data,
            type: "POST",
            dataType: "json",
            xhrFields: {
                withCredentials: true
            },
            success: function () {
                this.collapse();
                this.showToastMessage("toastConfigThanks");
                this.form.reset();
                this.setState({
                    validating: false
                });

                // for GTM
                Twenty.event.dispatch({
                    type: "storyCommentAdded",
                    params: {
                        event: "storyCommentAdded"
                    }
                });
            }.bind(this),
            error: function () {
                this.showToastMessage("toastConfigError", 6000);
                Twenty.tracking.errorlog({
                    category: "component",
                    action: "commentform",
                    label: "could not send comment"
                });
            }.bind(this)
        });
    },

    expand: function expand() {
        $(this.form).addClass("expanded").removeClass("collapsed");
    },

    collapse: function collapse() {
        $(this.form).addClass("collapsed").removeClass("expanded");
    },

    renderForm: function renderForm(type) {
        var _this14 = this;

        var formClasses = "commentform new-comment collapsed";
        var data = {
            title: {
                placeholder: Twenty.i18n.getString("commentform.title.placeholder"),
                required: true
            },
            name: {
                placeholder: Twenty.i18n.getString("commentform.name.placeholder"),
                defaultValue: this.state.username,
                required: true
            },
            text: {
                placeholder: Twenty.i18n.getString("commentform.text.placeholder"),
                required: true,
                maxLength: this.props.maxLength || 600
            },
            agb: {
                required: true
            }
        };

        if (type === "reply") {
            formClasses = "commentform collapsed";
            var opts = { owner: this.props.owner };
            data.text.placeholder = Twenty.i18n.getString("commentform.data.placeholder", opts);
        }

        return React.createElement(
            "div",
            { className: "commentform" },
            React.createElement(Twenty.Components.toast, this.state.toastConfigThanks),
            React.createElement(
                "form",
                { className: formClasses, ref: function ref(_ref8) {
                        _this14.form = _ref8;
                    } },
                React.createElement(Twenty.Components.form.textarea, { data: data.text, cssClass: "comment-input", ref: function ref(_ref3) {
                        _this14.inputMessage = _ref3;
                    }, validating: this.state.validating, handleFocus: this.expand }),
                React.createElement(
                    "div",
                    { className: "expander", ref: function ref(_ref7) {
                            _this14.expander = _ref7;
                        } },
                    React.createElement(Twenty.Components.form.textinput, { data: data.title, ref: function ref(_ref4) {
                            _this14.inputTitle = _ref4;
                        }, validating: this.state.validating }),
                    React.createElement(Twenty.Components.form.textinput, { data: data.name, ref: function ref(_ref5) {
                            _this14.inputUser = _ref5;
                        }, validating: this.state.validating }),
                    React.createElement(Twenty.Components.agb, { data: data.agb, ref: function ref(_ref6) {
                            _this14.agbCheckbox = _ref6;
                        }, validating: this.state.validating }),
                    React.createElement(Twenty.Components.toast, this.state.toastConfigErrorValidation),
                    React.createElement(Twenty.Components.toast, this.state.toastConfigError),
                    React.createElement(
                        "button",
                        { type: "submit", onClick: this.handleValidation, className: "btn" },
                        React.createElement(Twenty.i18n.str, { textref: "commentform.submit" })
                    ),
                    React.createElement(
                        "a",
                        { className: "collapse", onClick: this.collapse },
                        React.createElement("span", { className: "icon icon-cancel-2", ref: "cancel" })
                    )
                )
            )
        );
    },

    getInitialState: function getInitialState() {
        return {
            data: {},
            username: "",
            validating: false,
            toastConfigThanks: {
                type: "success",
                title: Twenty.i18n.getString("commentform.toast.title.thanks"),
                message: Twenty.i18n.getString("commentform.toast.thanks")
            },
            toastConfigError: {
                type: "error",
                title: Twenty.i18n.getString("commentform.toast.title.error"),
                message: Twenty.i18n.getString("commentform.toast.error")
            },
            toastConfigErrorValidation: {
                type: "error",
                title: Twenty.i18n.getString("commentform.toast.title.errorValidate"),
                message: Twenty.i18n.getString("commentform.toast.errorValidate")
            }
        };
    },

    componentWillMount: function componentWillMount() {
        var _this15 = this;

        this.expandable = this.props.expandable;
        if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") {
            if (window.gigya) {
                this.setUserState();
            } else {
                Twenty.event.subscribe({
                    type: "gigyaReady",
                    callback: function callback() {
                        _this15.setUserState();
                    }
                });
            }
        }
    },

    render: function render() {
        if (this.props.talkbackStatus === "active") {
            if (this.props.type === "newComment") {
                // new comment
                return this.renderForm();
            } else {
                // reply
                return this.renderForm("reply");
            }
        } else {
            return React.createElement(Twenty.Components.emptycomponent, null);
        }
    }
});

/**
* @method Twenty.Components.commentInteractionBox
* @memberof Twenty.Components
* @description box with upvote report and answer button
* @param {Object[]} data comment data
* @param {string} data.title title for the comment
* @param {string} data.thread If this is a reply to a comment, thread is the id to the comment being replied. ?? check if the top parent or the parent above.
* @param {string} data.discussionid unique id of the discussion. same as story id.
* @param {Object} data.created object
* @param {string} data.created.hr date time of comment created (ie. "11.03.2016, 14:51").
* @param {string} data.message comment itself.
* @param {boolean} data.my_vote if the site visitor voted or not (data from localstorage).
* @param {Object} data.user user object
* @param {Object} data.user.user_info user_info object
* @param {Object} data.user.user_info.profile_img_small image url
* @param {string} data.user.user_info.display_name display name of the commenter.
* @param {string} storyId story id
* @param {number} msgId comment id unique to this story
*/
/* istanbul ignore next */
Twenty.Components.commentInteractionBox = createReactClass({
    displayName: "commentInteractionBox",

    myNameIs: "commentInteractionBox",

    handleUpvote: function handleUpvote() {
        var storeId = this.props.data.article_id + this.props.data.id;

        if (this.state.enableVoting && Twenty.dom.dataStorage.getItem(storeId) !== "voted") {
            Twenty.dom.dataStorage.add(this.props.data.article_id + this.props.data.id, "voted");
            Twenty.datamodel.runAJAXRequest({
                url: Twenty.env.getServer("api") + "/articles/" + this.props.data.article_id + "/comments/" + this.props.data.id + "/rates",
                type: "POST",
                contentType: "application/json; charset=UTF-8",
                data: '{"rate":{"action":"up"}}',
                success: function () {
                    this.setState(function (prevState) {
                        return {
                            uprates: prevState.uprates + 1,
                            enableVoting: false
                        };
                    });
                }.bind(this)
            });
        }
    },

    handleReplay: function handleReplay() {
        this.setState({ enableReply: !this.state.enableReply });
    },

    handleHideForm: function handleHideForm() {
        this.setState({ enableReply: false });
    },

    getInitialState: function getInitialState() {
        return {
            enableVoting: true,
            uprates: this.props.data.uprates,
            enableReply: false,
            clickableReportButton: true
        };
    },

    componentWillMount: function componentWillMount() {
        var _this16 = this;

        this.formData = {
            data: [{
                form: {
                    attributes: {
                        action: Twenty.env.getServer("live") + Twenty.page.pages.commentspage.commentId + "/comments",
                        payloadParams: {
                            comment: {
                                article_id: "{article_id}",
                                city: "{city}",
                                created_at: "{created_at}",
                                email: "{email}",
                                first_name: "{first_name}",
                                last_name: "{last_name}",
                                message: "{message}",
                                parent_id: "{parent_id}",
                                zip_code: "{zip_code}"
                            }
                        }
                    }
                },
                id: Twenty.page.pages.commentspage.commentId,
                items: [{
                    attributes: {
                        maxlength: 800
                    },
                    name: "message",
                    placeholder: Twenty.i18n.getString("commentInteractionBox.replayPlaceholder"),
                    required: true,
                    rows: 3,
                    type: "area"
                }, {
                    attributes: {
                        maxlength: 100
                    },
                    col: 6,
                    name: "first_name",
                    placeholder: Twenty.i18n.getString("commentInteractionBox.formData.firstName"),
                    required: true,
                    type: "text"
                }, {
                    attributes: {
                        maxlength: 100
                    },
                    col: 6,
                    name: "last_name",
                    placeholder: Twenty.i18n.getString("commentInteractionBox.formData.lastName"),
                    required: true,
                    type: "text"
                }, {
                    attributes: {
                        maxlength: 5
                    },
                    col: 4,
                    name: "zip_code",
                    placeholder: Twenty.i18n.getString("commentInteractionBox.formData.zipCode"),
                    required: true,
                    type: "number",
                    validate: {
                        pattern: "^[0-9]{4,5}$"
                    }
                }, {
                    attributes: {
                        maxlength: 100
                    },
                    col: 8,
                    name: "city",
                    placeholder: Twenty.i18n.getString("commentInteractionBox.formData.city"),
                    required: true,
                    type: "text"
                }, {
                    attributes: {
                        maxlength: 100
                    },
                    name: "email",
                    placeholder: Twenty.i18n.getString("commentInteractionBox.formData.email"),
                    required: true,
                    type: "email",
                    validate: {
                        format: "name@domain.ch",
                        pattern: "^[a-zA-Z0-9_.-]{1,}@[a-zA-Z0-9]{1,}[a-zA-Z0-9.-]{1,}\.[a-zA-Z]{2,}"
                    }
                }, {
                    items: [{
                        label: React.createElement(
                            "div",
                            { className: "contract-label" },
                            React.createElement(Twenty.i18n.str, { textref: "commentInteractionBox.checkboxAgb.labelFirst" }),
                            " ",
                            React.createElement(
                                "a",
                                { href: Twenty.env.getServer("agb"), ref: function ref(_ref9) {
                                        _this16.AGBLink = _ref9;
                                    }, onClick: this.loadAGBPage },
                                React.createElement(Twenty.i18n.str, { textref: "commentInteractionBox.checkboxAgb.labelInLink" })
                            ),
                            " ",
                            React.createElement(Twenty.i18n.str, { textref: "commentInteractionBox.checkboxAgb.labelEnd" })
                        ),
                        value: "AGB"
                    }],
                    name: "agb",
                    required: true,
                    type: "checkbox"
                }],
                meta: {
                    openPlain: true,
                    openCollapsed: true,
                    remainVisibleAfterSubmit: true,
                    REQMSG: Twenty.i18n.getString("commentInteractionBox.meta.reqmsg"),
                    SUBMIT: Twenty.i18n.getString("commentInteractionBox.meta.submit"),
                    successtxt: Twenty.i18n.getString("commentInteractionBox.meta.successtxt"),
                    title: "",
                    type: 1
                }
            }]
        };

        var storeId = this.props.data.article_id + this.props.data.id;
        if (Twenty.dom.dataStorage.getItem(storeId) === "voted") {
            this.setState({ enableVoting: false });
        } else {
            this.setState({ enableVoting: true });
        }
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({ uprates: nextProps.data.uprates });
    },


    render: function render() {
        return React.createElement(
            "div",
            { className: "commentInteractionBox" },
            React.createElement(
                "div",
                { className: "commentInteractionButtonBox" },
                React.createElement(
                    "div",
                    { className: this.state.enableVoting ? "upvote-button" : "upvote-button voted", onClick: this.handleUpvote },
                    React.createElement("span", { className: "upIcon icon-upvote" }),
                    React.createElement(Twenty.i18n.str, { textref: "commentform.vote.recommend" }),
                    " (",
                    this.state.uprates,
                    ")"
                ),
                React.createElement(Twenty.Components.commentreportlink, { enableReportButton: this.props.enableReportButton, beginUppercase: "true", handleClick: this.props.toggleReportForm }),
                this.props.showReplyButton && React.createElement(
                    "div",
                    { className: "reply-button", onClick: this.handleReplay },
                    React.createElement(Twenty.i18n.str, { textref: "commentInteractionBox.reply" })
                )
            ),
            this.state.enableReply && React.createElement(Twenty.Components.form.formelement, { handleHideForm: this.handleHideForm, parentId: this.props.data.id, deactivateDecode: "true", key: Twenty.core.getUniqueKey("formelement"), data: this.formData, enctype: "application/json", cssClass: "form" })
        );
    }
});

/**
 * @method Twenty.Components.commentlink
 * @memberof Twenty.Components
 * @description link to commentspage
 * @param {Object} data
 * @param {number} data.comments_number total number of comments on this story.
 * @param {string} textref ref link text to comments page (i.e. "commentlink.showComments", which translates to "Alle Kommentare anzeigen").
 * @param {string} feedurl feed url to the story.
 * @param {string} classNames the css classes for the link.
 */
/* istanbul ignore next */

Twenty.Components.commentlink = createReactClass({
    displayName: "commentlink",


    myNameIs: "commentlink",

    handleClick: function handleClick() {
        Twenty.app.controller.loadCommentPage(this.props.feedurl);

        // for GTM
        Twenty.event.dispatch({
            type: "social",
            params: {
                event: "social",
                socialAction: "click",
                socialNetwork: "comments",
                socialTarget: this.props.feedurl
            }
        });
    },

    render: function render() {
        var classNames = this.props.classNames;
        if (this.props.data.comments_number > 0) {
            return React.createElement(
                "div",
                { className: "commentlink" },
                React.createElement(
                    "a",
                    { className: classNames, onClick: this.handleClick },
                    React.createElement(
                        "span",
                        { className: "link-text", "data-comments-count": this.props.data.comments_number },
                        React.createElement(Twenty.i18n.str, { textref: this.props.textref })
                    )
                )
            );
        } else {
            return React.createElement(Twenty.Components.emptycomponent, null);
        }
    }
});

/**
* @method Twenty.Components.commentlistitem
* @memberof Twenty.Components
* @description outputs a comment or answer of a comment
* @param {Object[]} data comment data
* @param {string} data.title title for the comment
* @param {string} data.thread If this is a reply to a comment, thread is the id to the comment being replied. ?? check if the top parent or the parent above.
* @param {string} data.discussionid unique id of the discussion. same as story id.
* @param {Object} data.created object
* @param {string} data.created.hr date time of comment created (ie. "11.03.2016, 14:51").
* @param {string} data.message comment itself.
* @param {boolean} data.my_vote if the site visitor voted or not (data from localstorage).
* @param {Object} data.user user object
* @param {Object} data.user.user_info user_info object
* @param {Object} data.user.user_info.profile_img_small image url
* @param {string} data.user.user_info.display_name display name of the commenter.
* @param {string} storyId story id
* @param {number} msgId comment id unique to this story
*/
/* istanbul ignore next */
Twenty.Components.commentlistitem = createReactClass({
    displayName: "commentlistitem",

    myNameIs: "commentlistitem",

    toggleReportForm: function toggleReportForm() {
        this.setState({
            showReport: !this.state.showReport
        });
    },

    handleHideReportForm: function handleHideReportForm() {
        this.setState({
            showReport: false
        });
    },

    handleSubmitting: function handleSubmitting() {
        this.setState({ enableReportButton: false });
    },

    getInitialState: function getInitialState() {
        return {
            showReport: false,
            enableReportButton: true
        };
    },

    render: function render() {
        var classes = "comment " + this.props.extendedclasses;
        var textClasses = "comment-text",
            titleClasses = "comment-title";
        if (Twenty.page.pages.commentspage.interactionBox) {
            textClasses = "comment-text";
            titleClasses = "comment-title";
        } else if (this.state.showReport) {
            textClasses = "comment-text comment-reporting";
            titleClasses = "comment-title comment-reporting";
        } else {
            textClasses = "comment-text";
            titleClasses = "comment-title ";
        }

        return React.createElement(
            "div",
            { className: classes },
            React.createElement(
                "header",
                { className: "comment-header" },
                React.createElement(
                    "div",
                    { className: "profile" },
                    React.createElement(
                        "a",
                        { rel: "author", className: "author" },
                        React.createElement("img", { className: "profile-pic", src: this.props.data.user.user_info.profile_img_small || "", alt: "" }),
                        React.createElement(
                            "span",
                            { className: "profile-name" },
                            this.props.data.user.user_info.display_name
                        )
                    ),
                    React.createElement(
                        "time",
                        { className: "comment-time" },
                        this.props.data.created.hr
                    ),
                    !Twenty.page.pages.commentspage.interactionBox && React.createElement(Twenty.Components.commentreportlink, { handleClick: this.toggleReportForm })
                )
            ),
            React.createElement(
                "h6",
                { className: titleClasses },
                this.props.data.title || ""
            ),
            React.createElement("p", { className: textClasses, dangerouslySetInnerHTML: { __html: this.props.data.message } }),
            Twenty.page.pages.commentspage.interactionBox && React.createElement(Twenty.Components.commentInteractionBox, { enableReportButton: this.state.enableReportButton, showReport: this.state.showReport, toggleReportForm: this.toggleReportForm, data: this.props.data, showReplyButton: this.props.showReplyButton || false }),
            !this.state.showReport && this.props.data.communityobject && React.createElement(Twenty.Components.voting, {
                voteType: "comment",
                voteId: this.props.data.id,
                storyId: this.props.storyId,
                msgId: this.props.data.msgid,
                threadId: this.props.data.thread,
                data: this.props.data.communityobject }),
            !this.state.showReport && this.props.talkbackStatus === "active" && React.createElement(Twenty.Components.commentform, {
                discussionId: this.props.data.discussionid,
                talkbackStatus: this.props.talkbackStatus,
                msgId: this.props.data.msgid,
                owner: this.props.data.user.user_info.display_name }),
            this.state.showReport && React.createElement(Twenty.Components.commentreportform, {
                handleHideReportForm: this.handleHideReportForm,
                data: this.props.data,
                discussionId: this.props.data.discussionid,
                msgId: this.props.data.msgid,
                handleCloseReportClick: this.toggleReportForm,
                handleSubmitting: this.handleSubmitting })
        );
    }
});

/**
 * @method Twenty.Components.commentreportform
 * @memberof Twenty.Components
 * @description display comments form and handle form inputs
 * @param {string} owner name of the comment owner, who is being replied to.
 * @param {string} discussionId
 * @param {string} msgId
 * @param {"newComment" | any} type is this comment a new comment? otherwise it is a reply to a comment.
 */
/* istanbul ignore next */

Twenty.Components.commentreportform = createReactClass({
    displayName: "commentreportform",


    myNameIs: "commentreportform",
    mixins: [Twenty.mixins.toast],
    submittable: false,
    expandable: true,

    handleValidation: function handleValidation(e) {
        e.preventDefault();
        this.setState({
            validating: true
        }, function () {
            var that = this;
            var $formElements = $(this.reportform).find("input[data-valid], textarea[data-valid]");
            this.submittable = true;

            // loop all required inputs
            $formElements.each(function (i) {
                // set submittable to false if this input is not valid
                if ($(this).attr("data-valid") === "false" || $(this).attr("data-valid") === "true" && $(this).val().length <= 0) {
                    that.submittable = false;
                    that.showToastMessage("toastConfigErrorValidation");
                }

                // submit form if last input and submittable is still true
                if (i + 1 === $formElements.length && that.submittable === true) {
                    that.submit();
                }
            });
        });
    },

    collapse: function collapse() {
        this.reportform.getElementsByClassName("collapse")[0].click();
    },

    toggleFormVisibility: function toggleFormVisibility() {
        this.setState({ showReportForm: false });
    },

    submit: function submit() {
        var msgId = this.props.msgId || "0",
            data = {};
        data.comment = this.inputMessage.domNode.value;
        data.username = this.inputUser.domNode.value;
        if (this.inputEmail) {
            data.email = this.inputEmail.domNode.value || "";
        }
        data.lang = Twenty.i18n.lang; // "de" | "ro"

        var blame = JSON.stringify({
            blame: {
                name: data.username,
                email: data.email,
                text: data.comment
            }
        });
        if (Twenty.page.pages.commentspage.interactionBox) {
            Twenty.datamodel.runAJAXRequest({
                url: Twenty.env.getServer("api") + "/articles/" + this.props.data.article_id + "/comments/" + this.props.data.id + "/blames",
                data: blame,
                type: "POST",
                contentType: "application/json; charset=UTF-8",
                success: function () {
                    this.showToastMessage("toastConfigThanks");
                    this.reportform.reset();

                    this.toggleFormVisibility();
                    this.props.handleSubmitting();
                    setTimeout(this.collapse, 3500);
                    this.setState({
                        validating: false
                    });

                    // this.collapse();
                }.bind(this),
                error: function () {
                    this.showToastMessage("toastConfigError", 6000);
                    Twenty.tracking.errorlog({
                        category: "component",
                        action: "commentreportsubmit",
                        label: "could not report"
                    });
                }.bind(this)
            });
        } else {
            Twenty.datamodel.runAJAXRequest({
                url: Twenty.env.getServer("api") + "/discussion/report/story/" + this.props.discussionId + "/message/" + msgId + "/?encoding=utf8&cors=" + location.host,
                data: data,
                type: "POST",
                dataType: "json",
                xhrFields: {
                    withCredentials: true
                },
                success: function () {
                    this.showToastMessage("toastConfigThanks");
                    this.reportform.reset();
                    this.setState({
                        validating: false
                    });
                    setTimeout(this.collapse, 3500);
                }.bind(this),
                error: function () {
                    this.showToastMessage("toastConfigError", 6000);
                    Twenty.tracking.errorlog({
                        category: "component",
                        action: "commentreportsubmit",
                        label: "could not report"
                    });
                }.bind(this)
            });
        }
    },

    getInitialState: function getInitialState() {
        return {
            username: "",
            email: "",
            validating: false,
            toastConfigThanks: {
                type: "success",
                title: Twenty.i18n.getString("commentform.toast.title.thanks"),
                message: Twenty.i18n.getString("commentform.toast.thanks")
            },
            toastConfigError: {
                type: "error",
                title: Twenty.i18n.getString("commentform.toast.title.error"),
                message: Twenty.i18n.getString("commentform.toast.error")
            },
            toastConfigErrorValidation: {
                type: "error",
                title: Twenty.i18n.getString("commentform.toast.title.errorValidate"),
                message: Twenty.i18n.getString("commentform.toast.errorValidateReport")
            },
            showReportForm: true
        };
    },

    componentWillMount: function componentWillMount() {
        var _this17 = this;

        this.expandable = this.props.expandable;
        Twenty.event.subscribe({
            type: "gigyaReady",
            callback: function callback() {
                if (Twenty.user.getUserInfo("username")) {
                    _this17.setState({ username: Twenty.user.getUserInfo("username") });
                } else if (Twenty.user.getUserInfo("firstName")) {
                    _this17.setState({ username: Twenty.user.getUserInfo("firstName") + " " + Twenty.user.getUserInfo("lastName") });
                }
            }
        });
    },

    render: function render() {
        var _this18 = this;

        var data = {
            name: {
                placeholder: Twenty.i18n.getString("commentform.report.name.placeholder"),
                defaultValue: this.state.username,
                required: true
            },
            email: {
                placeholder: Twenty.i18n.getString("commentform.report.email.placeholder"),
                defaultValue: this.state.email,
                required: true,
                attributes: {
                    maxlength: 100
                },
                type: "email",
                validate: {
                    format: "name@domain.ch",
                    pattern: "^[a-zA-Z0-9_.-]{1,}@[a-zA-Z0-9]{1,}[a-zA-Z0-9.-]{1,}\.[a-zA-Z]{2,}"
                }
            },
            text: {
                placeholder: Twenty.i18n.getString("commentform.report.text.placeholder"),
                required: true,
                maxLength: 600
            }
        };

        return React.createElement(
            "div",
            { className: "commentform commentreportform" },
            React.createElement(Twenty.Components.toast, this.state.toastConfigThanks),
            this.state.showReportForm === true && React.createElement(
                "form",
                { ref: function ref(_ref13) {
                        _this18.reportform = _ref13;
                    } },
                Twenty.page.pages.commentspage.interactionBox && React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "div",
                        { className: "nn-title-report" },
                        React.createElement(Twenty.i18n.str, { textref: "commentform.report.NNTitleReport" })
                    ),
                    React.createElement(
                        "div",
                        { className: "nn-order-report" },
                        React.createElement(Twenty.i18n.str, { textref: "commentform.report.NNOrderReport" })
                    )
                ),
                React.createElement(Twenty.Components.form.textarea, { rows: "4", data: data.text, cssClass: "report-input", ref: function ref(_ref10) {
                        _this18.inputMessage = _ref10;
                    }, validating: this.state.validating }),
                React.createElement(Twenty.Components.form.textinput, { data: data.name, ref: function ref(_ref11) {
                        _this18.inputUser = _ref11;
                    }, validating: this.state.validating }),
                Twenty.page.pages.commentspage.interactionBox && React.createElement(Twenty.Components.form.textinput, { data: data.email, ref: function ref(_ref12) {
                        _this18.inputEmail = _ref12;
                    }, validating: this.state.validating }),
                React.createElement(Twenty.Components.toast, this.state.toastConfigErrorValidation),
                React.createElement(Twenty.Components.toast, this.state.toastConfigError),
                React.createElement(
                    "button",
                    { type: "submit", onClick: this.handleValidation, className: "btn" },
                    React.createElement(Twenty.i18n.str, { textref: "commentform.report.submit" })
                ),
                !Twenty.page.pages.commentspage.interactionBox && React.createElement(
                    "a",
                    { className: "collapse", onClick: this.props.handleCloseReportClick },
                    React.createElement("span", { className: "icon icon-cancel-2", ref: "cancel" })
                )
            )
        );
    }
});

/**
 * @method Twenty.Components.commentreportlink
 * @memberof Twenty.Components
 * @description opens a form to reports comments
 */
/* istanbul ignore next */

Twenty.Components.commentreportlink = createReactClass({
    displayName: "commentreportlink",


    myNameIs: "commentreportlink",

    render: function render() {
        return React.createElement(
            "div",
            { className: "commentreportlinks" },
            this.props.enableReportButton === false ? React.createElement(
                "a",
                { className: "commentreportlink btn reported" },
                this.props.beginUppercase ? React.createElement(Twenty.i18n.str, { textref: "commentform.report.linkUppercase" }) : React.createElement(Twenty.i18n.str, { textref: "commentform.report.link" })
            ) : React.createElement(
                "a",
                { className: "commentreportlink btn", onClick: this.props.handleClick },
                this.props.beginUppercase ? React.createElement(Twenty.i18n.str, { textref: "commentform.report.linkUppercase" }) : React.createElement(Twenty.i18n.str, { textref: "commentform.report.link" })
            )
        );
    }
});

/**
 * @method Twenty.Components.commentsorting
 * @memberof Twenty.Components
 * @description outputs a segmented control (radio buttons) to change the sorting order of all the comments
 * @param {number} active comments will be sorted according to this number (ie. 0: new, 1: beliebt, 2. unbeliebt).
 * @param {function} handleSortingClick function that handles sorting of the comments.
 *
 */

/* istanbul ignore next */

Twenty.Components.commentsorting = createReactClass({
    displayName: "commentsorting",


    myNameIs: "commentsorting",

    handleClick: function handleClick(order, label, index) {
        Twenty.event.dispatch({
            type: "orderComments"
        });
        this.props.handleSortingClick(order, label, index);
    },

    render: function render() {
        var _this19 = this;

        var active, order, label, className;

        var sortingTypes = [{
            label: Twenty.i18n.getString("commentspage.sorting.new"),
            className: "order-newest",
            order: "order_newest",
            icon: "icon icon-clock-latest"
        }, {
            label: Twenty.i18n.getString("commentspage.sorting.topvoted"),
            className: "order-topvoted",
            order: "order_topvoted",
            icon: "icon icon-thumbs-up"
        }, {
            label: Twenty.i18n.getString("commentspage.sorting.worstvoted"),
            className: "order-worstvoted",
            order: "order_worstvoted",
            icon: "icon icon-thumbs-down"
        }];

        var sortingTabNodes = sortingTypes.map(function (obj, index) {
            active = index === _this19.props.active ? true : false;
            order = sortingTypes[index].order;
            label = sortingTypes[index].label;
            className = sortingTypes[index].className;
            if (active) {
                className += " active";
            }

            return React.createElement(
                "label",
                { key: index, className: className },
                React.createElement("i", { className: sortingTypes[index].icon }),
                React.createElement("input", { type: "radio", name: "segmented", "data-role": "none", onChange: _this19.handleClick.bind(_this19, order, label, index), "aria-checked": active, checked: active }),
                sortingTypes[index].label
            );
        });

        return React.createElement(
            "div",
            { className: "commentsorting segmented-control" },
            sortingTabNodes
        );
    }
});

/**
 * @method Twenty.Components.contextbox
 * @memberof Twenty.Components
 * @description contextbox this is the story. Rendered by {@link Twenty.Components.storypage}
 * @param {Object[]} data array of context elements.
 * @param {string} data.id story id
 * @param {string} data.oberzeile kicker text
 * @param {string} data.title title

 */
/* istanbul ignore next */
Twenty.Components.contextbox = createReactClass({
    displayName: "contextbox",

    myNameIs: "contextbox",

    handleClick: function handleClick(i) {
        // linkpulse tracking
        Twenty.event.dispatch({
            type: "userClick",
            params: {
                clickURL: "story/" + this.props.data[i].id,
                event: "userClick"
            }
        });
        Twenty.app.controller.loadDeepLinkStoryPage(this.props.data[i].id);
    },

    render: function render() {
        var classNames = "infobox contextbox";

        if (!this.props.data || this.props.data.length === 0) {
            return false;
        }

        return React.createElement(
            "div",
            { className: classNames },
            React.createElement(
                "h1",
                null,
                React.createElement(Twenty.i18n.str, { textref: "contentbox.headline" })
            ),
            this.props.data.map(function (context, i) {
                return React.createElement(
                    "article",
                    { onClick: this.handleClick.bind(this, i), key: i },
                    React.createElement(
                        "h6",
                        null,
                        context.oberzeile
                    ),
                    React.createElement(
                        "h5",
                        null,
                        context.title
                    )
                );
            }, this)
        );
    }
});

/**
* @name Twenty.Components.cookiemessage
* @memberof Twenty.Components
* @description shows a cookie message if the user is from EU and did not accept cookies yet
*/
Twenty.Components.cookiemessage = createReactClass({
    displayName: "cookiemessage",


    myNameIs: "cookiemessage",

    acceptCookies: function acceptCookies() {
        Twenty.dom.setCookie("cookiesAccepted", true, 365);
        this.setState({
            showCookieMessage: false
        });
    },

    loadPrivacyPolicyPage: function loadPrivacyPolicyPage(e) {
        var storyId = this.privacyPolicyLink.href.match(/\d{8}$/)[0];
        e.preventDefault();
        Twenty.app.controller.loadDeepLinkStoryPage(storyId);
    },

    getInitialState: function getInitialState() {
        return {
            showCookieMessage: false
        };
    },

    componentWillMount: function componentWillMount() {
        var _this20 = this;

        Twenty.event.subscribe({
            type: "sitemapLoaded",
            callback: function callback() {
                if (!Twenty.dom.userHasAcceptedCookies()) {
                    _this20.setState({
                        showCookieMessage: true
                    });
                }
            }
        });
    },

    render: function render() {
        var _this21 = this;

        // eslint-disable-next-line no-extra-parens
        if (this.state.showCookieMessage || this.props.data && this.props.data.showCookieMessage === true) {
            return React.createElement(
                "div",
                { className: "cookiemessage" },
                React.createElement(
                    "p",
                    null,
                    Twenty.i18n.getString("cookiemessage.message")
                ),
                React.createElement(
                    "a",
                    { className: "cookie-link", href: Twenty.env.getServer("privacyPolicyLink"), ref: function ref(_ref14) {
                            _this21.privacyPolicyLink = _ref14;
                        }, onClick: this.loadPrivacyPolicyPage },
                    Twenty.i18n.getString("cookiemessage.moreInfo")
                ),
                React.createElement(
                    "button",
                    { type: "submit", onClick: this.acceptCookies },
                    Twenty.i18n.getString("cookiemessage.buttontext")
                )
            );
        } else {
            return null;
        }
    }
});

/**
* @name Twenty.Components.counterstriker
* @memberof Twenty.Components
* @description creates and runs a counter which is configurable using attributes
* @param htmlcode
*/
Twenty.Components.counterstriker = createReactClass({
    displayName: "counterstriker",


    resetUserInput: function resetUserInput() {
        this.stop();
        this.incrementValue = this.getIncrementValue(this.props.mathOperator);
        this.startCounter();
    },

    getMode: function getMode(classList) {
        if (classList.includes("userinput")) {
            return "userInput";
        } else if (classList.includes("datetime")) {
            return "dateTime";
        } else {
            return "counting";
        }
    },

    parseDateTime: function parseDateTime() {
        var endDateTime = this.props.endDate.split("::"),
            date = endDateTime[0],
            time = endDateTime[1],
            endDateParts = date.split(":"),
            endTimeParts = time.split(":"),
            endDay = endDateParts[0],
            endMonth = endDateParts[1] - 1,
            endYear = endDateParts[2],
            endHour = endTimeParts[0],
            endMin = endTimeParts[1];

        return new Date(endYear, endMonth, endDay, endHour, endMin);
    },

    getIncrementValue: function getIncrementValue(mathOperator) {
        switch (mathOperator) {
            case "add":
                return +this.textInput.value + this.props.workValue;
            case "subtract":
                return +this.textInput.value - this.props.workValue;
            case "multiply":
                return +this.textInput.value * this.props.workValue;
            case "divide":
            default:
                return +this.textInput.value / this.props.workValue;
        }
    },

    incrementCounter: function incrementCounter(increment) {
        this.setState({
            counter: this.state.counter + increment
        });
    },

    stop: function stop() {
        clearInterval(this.intervalId);
    },

    countFunction: function countFunction() {
        if (this.state.mode === "userInput") {
            if (this.textInput.value === "") {
                this.stop();
                return;
            }
            this.incrementCounter(this.incrementValue);
        } else if (this.state.mode === "dateTime") {
            this.setState({
                timeDiff: this.endTime - Date.now()
            });
        } else {
            this.incrementCounter(this.incrementValue);
        }
        if (this.props.stopType && this.props.stopType === "value" && this.state.counter >= this.props.stopValue) {
            this.stop();
            return;
        }
    },

    startCounter: function startCounter() {
        this.setState({
            counter: this.props.startNumber
        }, function () {
            this.intervalId = setInterval(this.countFunction, this.props.interval);
            if (this.props.stopType === "time") {
                setTimeout(this.stop, this.props.stopValue + this.props.interval / 2);
            }
        });
    },

    renderFormatted: function renderFormatted(output) {
        return React.createElement(
            "div",
            { className: this.props.classes },
            output
        );
    },

    renderCounter: function renderCounter(counter) {
        return this.renderFormatted(this.props.prefix + counter.toFixed(this.props.decimal) + this.props.suffix);
    },

    renderUserInput: function renderUserInput(counter) {
        var _this22 = this;

        return React.createElement(
            "div",
            null,
            React.createElement("input", { type: "number", placeholder: this.props.text, ref: function ref(input) {
                    _this22.textInput = input;
                } }),
            React.createElement("button", { onClick: this.resetUserInput, className: "icon icon-arrows-ccw" }),
            this.renderCounter(counter)
        );
    },

    renderDateTime: function renderDateTime(timeDiff) {
        var daysleft = Math.floor(timeDiff / (1000 * 60 * 60 * 24)),
            hoursleft = Math.floor(timeDiff / (1000 * 60 * 60) % 24),
            minsleft = Math.floor(timeDiff / 1000 / 60 % 60),
            secsleft = Math.floor(timeDiff / 1000 % 60),
            formats = this.props.format.split(":"),
            outputparts = [];

        if (Date.now() >= this.endTime) {
            this.stop();
            return this.renderFormatted("0 : 0 : 0");
        }
        for (var i = 0; i < formats.length; i++) {
            switch (formats[i]) {
                case "T":
                    outputparts.push(daysleft + " " + this.daysMsg);
                    break;
                case "S":
                    outputparts.push(hoursleft + " " + this.hoursMsg);
                    break;
                case "M":
                    outputparts.push(minsleft + " " + this.minutesMsg);
                    break;
                case "K":
                    outputparts.push(secsleft + " " + this.secondsMsg);
                    break;
                default:
                    outputparts.push(" ");
                    break;
            }
        }
        return this.renderFormatted(outputparts.join(" : "));
    },

    getInitialState: function getInitialState() {
        return {
            counter: 0,
            timeDiff: 0,
            mode: this.getMode(this.props.classes.split(" "))
        };
    },

    componentDidMount: function componentDidMount() {
        this.daysMsg = Twenty.i18n.getString("counterstriker.days");
        this.hoursMsg = Twenty.i18n.getString("counterstriker.hours");
        this.minutesMsg = Twenty.i18n.getString("counterstriker.minutes");
        this.secondsMsg = Twenty.i18n.getString("counterstriker.seconds");

        if (this.props.endDate) {
            this.endTime = this.parseDateTime(this.endDate);
        }

        if (this.state.mode !== "userInput") {
            this.incrementValue = +this.props.workValue;
            if (this.props.autostart) {
                this.startCounter();
            }
        }
    },

    componentWillUnmount: function componentWillUnmount() {
        this.stop();
    },

    render: function render() {
        switch (this.state.mode) {
            case "userInput":
                return this.renderUserInput(this.state.counter);
            case "dateTime":
                return this.renderDateTime(this.state.timeDiff);
            default:
                return this.renderCounter(this.state.counter);
        }
    }
});

/* global PlayBuzz */
/**
 * @method Twenty.Components.customcode
 * @memberof Twenty.Components
 * @description Rendered when the type of top element is CustomHTML.
 * @param {Object} data
 * @param {string} data.value custom element code.
 */

/* istanbul ignore next */
Twenty.Components.customcode = createReactClass({
    displayName: "customcode",


    myNameIs: "customcode",

    postProcess: function postProcess() {
        var str = this.props.data.value;

        str = str.replace(/"\/JS\/swfobject.js/g, "http://www.20min.ch/JS/swfobject.js");

        return {
            str: str
        };
    },

    getInitialState: function getInitialState() {
        return this.postProcess();
    },

    componentDidMount: function componentDidMount() {
        var _this23 = this;

        // dangerouslySetInnerHTML doesn't work, so we do it like this
        setTimeout(function () {
            $(_this23.domNode).html(_this23.state.str);
        }, 20);

        // yes, this is nasty, but we have no other way of knowing if this is a playbuzz
        // top element or when the js has loaded.
        if (this.state.str.indexOf('class="pb_feed"') > 0 && this.state.str.indexOf("playbuzz.com") > 0) {
            this.interval = setInterval(function () {
                if (!!window.PlayBuzz && PlayBuzz.core) {
                    clearInterval(_this23.interval);
                    PlayBuzz.core.render();
                }
            }, 100);

            Twenty.dom.addScript({
                scriptName: Twenty.env.getServer("playbuzz")
            });
        }
    },

    render: function render() {
        var _this24 = this;

        return React.createElement("div", { className: "customcode", ref: function ref(_ref15) {
                _this24.domNode = _ref15;
            } });
    }

});

/* eslint-disable */
Twenty.Components.duellOverlay = createReactClass({
    displayName: "duellOverlay",


    myNameIs: "duellOverlay",

    render: function render() {
        return React.createElement(
            "div",
            { className: "overlay" },
            React.createElement(
                "div",
                { className: "iconContainer" },
                React.createElement(
                    "div",
                    { className: "phone" },
                    React.createElement("span", { className: "flash", dangerouslySetInnerHTML: { __html: "&#x21bb;" } })
                ),
                React.createElement(
                    "p",
                    { className: "hint" },
                    "Bitte Mobiltelefon um 90 Grad drehen"
                )
            )
        );
    }
});

Twenty.Components.duellHead = createReactClass({
    displayName: "duellHead",


    myNameIs: "duellHead",

    switchMode: function switchMode(e) {
        this.props.mode.requestChange(e);
        this.props.refresh();
    },

    render: function render() {
        var btn2show;
        if (this.props.mode.value === "ranking") {
            btn2show = React.createElement(
                "span",
                { className: "dBtn dark btnDuell-top", onClick: this.switchMode.bind(this, "duell") },
                this.props.data.translations.play
            );
        }
        if (this.props.mode.value === "duell") {
            btn2show = React.createElement(
                "span",
                { className: "dBtn dark btnRanking-top", onClick: this.switchMode.bind(this, "ranking") },
                this.props.data.translations.ranking
            );
        }

        return React.createElement(
            "div",
            { className: "head" },
            React.createElement(
                "div",
                { className: "content" },
                React.createElement("img", { className: "logo", src: "../img/" + this.props.config.lang + "/logo.png" }),
                React.createElement(
                    "div",
                    { className: "title" },
                    this.props.data.title
                ),
                btn2show
            )
        );
    }
});

Twenty.Components.duellPictures = createReactClass({
    displayName: "duellPictures",


    myNameIs: "duellPictures",

    switchMode: function switchMode(e) {
        this.props.mode.requestChange(e);
    },

    sendVote: function sendVote(cid) {
        var url = this.props.config.duell_standart_url + "&cid1=" + this.props.data.candidate1.id + "&cid2=" + this.props.data.candidate2.id + "&vote=" + cid;

        Twenty.datamodel.runAJAXRequest({
            url: url,
            success: function (data) {
                this.setState({ duellResults: data });
                this.props.refresh();
            }.bind(this)
        });

        /* Google Tag Manager */
        if (window.dataLayer) {
            window.dataLayer.push({
                event: "duell.vote",
                uid: Twenty.user.getUserId()
            });
        } else {
            console.warn("dataLayer is not defined! It is defined on the desktop-version though. Please fix this some day...");
        }
    },

    showPic: function showPic(item) {
        this.props.config.lightbox.find(".pic img").attr("src", this.props.config.domain + item.img_big_url);
        this.props.config.lightbox.show();
    },

    getInitialState: function getInitialState() {
        return {
            showWinner: this.props.config.showWinner,
            duellResults: []
        };
    },

    render: function render() {
        var btnSkip = "",
            renderOptionalFields = function renderOptionalFields(item) {
            return Object.keys(item).map(function (key) {
                return React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "b",
                        null,
                        key
                    ),
                    " ",
                    item[key]
                );
            });
        };

        // render a skip button if this duell is skipable (onClick calls getCandidates() of parent)
        if (this.props.data.isskip) {
            btnSkip = React.createElement(
                "div",
                { onClick: this.props.refresh },
                React.createElement(
                    "span",
                    { className: "dBtn dark btnSkip" },
                    this.props.data.translations.skip
                )
            );
        }

        return React.createElement(
            "div",
            { className: "duellmode" },
            React.createElement(
                "div",
                { className: this.state.showWinner === true ? "pictures showWinner" : "pictures" },
                React.createElement(
                    "div",
                    { className: "content" },
                    React.createElement(
                        "div",
                        { className: "left" },
                        React.createElement(
                            "div",
                            { className: "img" },
                            React.createElement("div", { "data-icon": "d", className: "icon zoom", onClick: this.showPic.bind(this, this.props.data.candidate1) }),
                            React.createElement(
                                "div",
                                { className: "dBtn noShadow", onClick: this.sendVote.bind(this, this.props.data.candidate1.id) },
                                this.props.data.translations.vote
                            ),
                            React.createElement("img", { src: this.props.config.domain + this.props.data.candidate1.img_challenge_url, onClick: this.sendVote.bind(this, this.props.data.candidate1.id) })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "right" },
                        React.createElement(
                            "div",
                            { className: "img" },
                            React.createElement("div", { "data-icon": "d", className: "icon zoom", onClick: this.showPic.bind(this, this.props.data.candidate2) }),
                            React.createElement(
                                "div",
                                { className: "dBtn noShadow", onClick: this.sendVote.bind(this, this.props.data.candidate2.id) },
                                this.props.data.translations.vote
                            ),
                            React.createElement("img", { src: this.props.config.domain + this.props.data.candidate2.img_challenge_url, onClick: this.sendVote.bind(this, this.props.data.candidate2.id) })
                        )
                    ),
                    React.createElement(Twenty.Components.duellResultDisplay, { data: this.state.duellResults, config: this.props.config }),
                    React.createElement(
                        "div",
                        { className: "vs" },
                        "vs"
                    )
                ),
                React.createElement(
                    "div",
                    { className: "itemDescriptions" },
                    React.createElement(
                        "div",
                        { className: "left" },
                        React.createElement(
                            "div",
                            { className: "name" },
                            this.props.data.candidate1.firstname
                        ),
                        React.createElement(
                            "div",
                            { className: "optional" },
                            this.props.data.candidate1.optional_fields.map(renderOptionalFields)
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "right" },
                        React.createElement(
                            "div",
                            { className: "name" },
                            this.props.data.candidate2.firstname
                        ),
                        React.createElement(
                            "div",
                            { className: "optional" },
                            this.props.data.candidate2.optional_fields.map(renderOptionalFields)
                        )
                    )
                ),
                React.createElement("div", { style: { clear: "both" } }),
                React.createElement(
                    "div",
                    { className: "btnContainer" },
                    btnSkip
                )
            )
        );
    }
});

Twenty.Components.duellRankingList = createReactClass({
    displayName: "duellRankingList",


    myNameIs: "duellRankingList",

    showPic: function showPic(item) {
        this.props.config.lightbox.find(".pic img").attr("src", this.props.config.domain + item.img_big_url);
        this.props.config.lightbox.show();
    },

    componentDidUpdate: function componentDidUpdate() {
        this.props.config.lazyLoader.initLazyLoader(300, "replace", "data-lazyloadcontent");
    },

    render: function render() {

        var addText = function addText(item) {
            return Object.keys(item).map(function (key) {
                return React.createElement(
                    "p",
                    null,
                    React.createElement(
                        "span",
                        { className: "title" },
                        key
                    ),
                    " ",
                    item[key]
                );
            });
        };

        var addItem = function (item) {
            return React.createElement(
                "div",
                { className: "item-container" },
                React.createElement(
                    "div",
                    { className: "item" },
                    React.createElement(
                        "div",
                        { className: "rank" },
                        item.rank
                    ),
                    React.createElement(
                        "div",
                        { className: "img" },
                        React.createElement("div", { "data-icon": "d", className: "icon zoom", onClick: this.showPic.bind(this, item) }),
                        React.createElement("img", { src: this.props.config.domain + item.img_challenge_url, onClick: this.showPic.bind(this, item) })
                    ),
                    React.createElement(
                        "div",
                        { className: "desc" },
                        React.createElement(
                            "h3",
                            null,
                            item.firstname
                        ),
                        React.createElement(
                            "div",
                            { className: "info" },
                            item.optional_fields.map(addText)
                        )
                    )
                )
            );
        }.bind(this);

        return React.createElement(
            "div",
            { className: "list" },
            this.props.items.map(addItem),
            React.createElement("div", { "data-lazyloadcontent": "<script>{Twenty.app.duell.loadMore()}</script>" })
        );
    }
});

Twenty.Components.duellRanking = createReactClass({
    displayName: "duellRanking",


    myNameIs: "duellRanking",

    getRanking: function getRanking() {
        Twenty.datamodel.runAJAXRequest({
            url: this.props.config.duell_ranking_url,
            dataType: "json",
            success: function (data) {
                this.setState({ items: data });
            }.bind(this)
        });
    },

    getMore: function getMore() {
        Twenty.datamodel.runAJAXRequest({
            url: this.props.config.duell_rankingMore_url + Twenty.app.duell.rankingIndex,
            dataType: "json",
            success: function (data) {
                var itemsNow = this.state.items;
                var mergedArray = $.merge(itemsNow, data);
                if (data.length === 0) {
                    $(window).unbind();
                }
                Twenty.app.duell.rankingIndex += 24;
                this.setState({
                    items: mergedArray
                });
            }.bind(this)
        });
    },

    switchMode: function switchMode(e) {
        this.props.mode.requestChange(e);
        this.props.refresh();
        $(window).scrollTop(0);
    },

    getInitialState: function getInitialState() {
        return {
            items: []
        };
    },

    componentWillMount: function componentWillMount() {
        Twenty.app.duell.loadMore = this.getMore;
        Twenty.app.duell.rankingIndex = 24;
    },

    componentDidMount: function componentDidMount() {
        this.getRanking();
    },

    render: function render() {
        $(".btnSkip").hide();

        return React.createElement(
            "div",
            { className: "ranking" },
            React.createElement(
                "div",
                { className: "btnContainer" },
                React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "span",
                        { className: "dBtn dark btnDuell-bottom", onClick: this.switchMode.bind(this, "duell") },
                        this.props.data.translations.play
                    )
                )
            ),
            React.createElement(
                "div",
                { className: "content" },
                React.createElement(Twenty.Components.duellRankingList, { items: this.state.items, config: this.props.config })
            ),
            React.createElement(
                "div",
                { className: "btnContainer" },
                React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "span",
                        { className: "dBtn dark btnDuell-bottom", onClick: this.switchMode.bind(this, "duell") },
                        this.props.data.translations.play
                    )
                )
            )
        );
    }
});

Twenty.Components.duellResultDisplay = createReactClass({
    displayName: "duellResultDisplay",


    myNameIs: "duellResultDisplay",

    render: function render() {
        var instructions = "<b>Duell</b><br/><br/>" + this.props.config.specialTranslations[this.props.config.lang].instructions;

        if (this.props.data.challenge && this.props.data.challenge !== "") {
            return React.createElement(
                "div",
                { className: "winner" },
                React.createElement(
                    "div",
                    { className: "candidate1" },
                    React.createElement("img", { src: this.props.config.domain + this.props.data.challenge.candidate1.img_thumb_url }),
                    React.createElement(
                        "div",
                        { className: "title" },
                        this.props.data.challenge.candidate1.title
                    ),
                    React.createElement(
                        "div",
                        { className: "rank" },
                        this.props.data.translations.rank,
                        ": ",
                        this.props.data.challenge.candidate1.rank
                    ),
                    React.createElement(
                        "div",
                        { className: "percentBar" },
                        React.createElement(
                            "div",
                            { className: "bar", style: { width: 183 / 100 * this.props.data.challenge.direct_win1 } },
                            React.createElement(
                                "div",
                                { className: "indicator1" },
                                React.createElement(
                                    "div",
                                    { className: "value1" },
                                    this.props.data.challenge.direct_win1 + "%"
                                )
                            ),
                            React.createElement(
                                "div",
                                { className: "indicator2" },
                                React.createElement(
                                    "div",
                                    { className: "value2" },
                                    this.props.data.challenge.direct_win2 + "%"
                                )
                            )
                        )
                    )
                ),
                React.createElement(
                    "div",
                    { className: "candidate2" },
                    React.createElement("img", { src: this.props.config.domain + this.props.data.challenge.candidate2.img_thumb_url }),
                    React.createElement(
                        "div",
                        { className: "title" },
                        this.props.data.challenge.candidate2.title
                    ),
                    React.createElement(
                        "div",
                        { className: "rank" },
                        this.props.data.translations.rank,
                        ": ",
                        this.props.data.challenge.candidate2.rank
                    )
                )
            );
        } else {
            return React.createElement(
                "div",
                { className: "winner" },
                React.createElement("div", { className: "info", dangerouslySetInnerHTML: { __html: instructions } })
            );
        }
    }
});

Twenty.Components.duellFooter = createReactClass({
    displayName: "duellFooter",


    myNameIs: "duellFooter",

    render: function render() {
        return React.createElement(
            "div",
            { className: "footer" },
            React.createElement(
                "div",
                { className: "content" },
                React.createElement(
                    "div",
                    { className: "description" },
                    this.props.lead
                )
            )
        );
    }
});

Twenty.Components.duell = createReactClass({
    displayName: "duell",


    myNameIs: "duell",
    mixins: [React.addons.LinkedStateMixin],

    setup: function setup() {
        var _this25 = this;

        var newConfig = $.extend({}, this.state.config);
        if ($("#preview").length === 0) {
            setTimeout(function () {
                _this25.setup();
            }, 100);
            return;
        }
        newConfig.lightbox = $("#preview");
        newConfig.lightbox.hide();
        newConfig.lightbox.on("click", function () {
            $(this).hide();
        });

        this.setState({
            config: newConfig
        });

        Twenty.app.duell = {};
    },

    getCandidates: function getCandidates() {
        Twenty.datamodel.runAJAXRequest({
            url: this.state.config.duell_standart_url,
            dataType: "json",
            success: function (data) {
                this.setState({ data: data });

                // set meta-tags for social media
                $('meta[property="og:title"]').attr("content", data.title);
                $('meta[property="og:description"]').attr("content", "20Minuten Duell " + data.lead);
                $('meta[property="og:type"]').attr("content", "article");
                $('meta[property="og:url"]').attr("content", location.href);
                $('meta[property="og:image"]').attr("content", this.state.config.domain + data.candidate1.img_challenge_url);
                $('meta[property="og:site_name"]').attr("content", "20 Minuten");
                $('meta[name="twitter:card"]').attr("content", "summary_large_image");
                $('meta[name="twitter:site"]').attr("content", "@20min");
                $('meta[name="twitter:title"]').attr("content", data.title);
                $('meta[name="twitter:description"]').attr("content", data.lead);
                $('meta[name="twitter:image:src"]').attr("content", this.state.config.domain + data.candidate1.img_challenge_url);
            }.bind(this)
        });
    },

    getInitialState: function getInitialState() {
        return {
            data: {},
            mode: "duell",
            metaInitialized: false,
            config: {
                domain: Twenty.env.getServer("live"),
                lang: Twenty.dom.getValueFromUrlParam("lang") || window.duellLanguage || "de",
                preview: Twenty.dom.getValueFromUrlParam("preview") || false,
                duellID: Twenty.dom.getValueFromUrlParam("id"),
                showWinner: Twenty.dom.getValueFromUrlParam("showWinner") || true,
                lazyLoader: Twenty.dom.initializeLazyLoader(),
                duell_standart_url: Twenty.env.getServer("duell") + "default_json.tmpl?id=" + Twenty.dom.getValueFromUrlParam("id"),
                duell_ranking_url: Twenty.env.getServer("duell") + "ranking_json.tmpl?id=" + Twenty.dom.getValueFromUrlParam("id"),
                duell_rankingMore_url: Twenty.env.getServer("duell") + "items_json.tmpl?id=" + Twenty.dom.getValueFromUrlParam("id") + "&idx=",
                loadMore: null,
                lightbox: null,
                specialTranslations: {
                    de: {
                        instructions: "Bitte geben Sie Ihre erste Stimme ab.<br><br>Danach sehen Sie hier, ob Sie mit den anderen Lesern &uuml;berein-stimmen."
                    },
                    fr: {
                        instructions: "Veuillez voter une premiÃ¨re fois ici.<br><br>Vous verrez ensuite ici si vous correspondez aux autres lecteurs."
                    },
                    ro: {
                        instructions: "Veuillez voter une premiÃ¨re fois ici.<br><br>Vous verrez ensuite ici si vous correspondez aux autres lecteurs."
                    }
                }
            }
        };
    },

    componentDidMount: function componentDidMount() {
        this.getCandidates();
        this.setup();
    },

    render: function render() {

        var content2show = void 0;

        if (this.state.config.duellID === 0) {
            return React.createElement(
                "div",
                { className: "info" },
                "Missing Duell-ID..."
            );
        }

        if ($.isEmptyObject(this.state.data)) {
            return React.createElement(
                "div",
                { className: "info" },
                "Loading Data..."
            );
        }

        if (this.state.mode === "duell") {
            content2show = React.createElement(Twenty.Components.duellPictures, { refresh: this.getCandidates, data: this.state.data, mode: this.linkState("mode"), config: this.state.config });
            $(window).unbind(); // unbind lazyloader
        }
        if (this.state.mode === "ranking") {
            content2show = React.createElement(Twenty.Components.duellRanking, { refresh: this.getCandidates, data: this.state.data, mode: this.linkState("mode"), config: this.state.config });
        }

        return React.createElement(
            "div",
            { className: "duell" },
            React.createElement(
                "div",
                { id: "preview" },
                React.createElement(
                    "div",
                    { className: "pic" },
                    React.createElement("img", { src: "" })
                )
            ),
            React.createElement(Twenty.Components.duellOverlay, null),
            React.createElement(
                "div",
                { className: "wrapper" },
                React.createElement(Twenty.Components.duellHead, { refresh: this.getCandidates, mode: this.linkState("mode"), data: this.state.data, config: this.state.config }),
                content2show,
                React.createElement(Twenty.Components.duellFooter, { mode: this.linkState("mode"), lead: this.state.data.lead })
            )
        );
    }
});

/**
 * @method Twenty.Components.emptycomponent
 * @memberof Twenty.Components
 * @description sometimes it's handy to have a naked div.
 * @param {string} empty_id will be set to div elements id.
 */

Twenty.Components.emptycomponent = createReactClass({
    displayName: "emptycomponent",

    myNameIs: "emptycomponent",
    render: function render() {
        return React.createElement("div", { id: this.props.empty_id, className: "empty-component" });
    }
});

/* global FB */
/**
 * @method Twenty.Components.facebooklike
 * @description like us on Facebook.
 * @memberof Twenty.Components
 * @param {Object} data
 * @param {Object[]} data.items
 * @param {string[]} data.items.background_images set of background image urls. this component picks one of them randomly.
 * @param {"facebooklikebox"} type
 */

/* istanbul ignore next */
Twenty.Components.facebooklike = createReactClass({
    displayName: "facebooklike",


    myNameIs: "facebooklike",

    mixins: [Twenty.mixins.pureRender],

    componentDidUpdate: function componentDidUpdate() {
        setTimeout(FB.XFBML.parse, 2000);
    },

    render: function render() {
        var element = this.props.data.items[0],
            rn = Math.floor(Math.random() * element.background_images.length),
            bgimagernd = element.background_images[rn],
            img = new Image();

        img.src = bgimagernd;
        img.onload = function () {
            FB.XFBML.parse();
        };

        return React.createElement(
            "article",
            { className: "facebooklike" },
            React.createElement("img", { src: bgimagernd, alt: "" }),
            React.createElement("div", { className: "fb-like", "data-href": window.location.href, "data-width": "100", "data-layout": "button_count", "data-action": "like", "data-show-faces": "false", "data-share": "false" })
        );
    }
});

/*
 * @method Twenty.Components.infinity
 * @memberof Twenty.Components
 * @description ?? couldn't find where it is used.
 * @param {string} display css style
 * @param {function} click click handler function
 */

Twenty.Components.floatingbutton = createReactClass({
    displayName: "floatingbutton",


    myNameIs: "floatingbutton",

    render: function render() {
        return React.createElement(
            "div",
            { className: "floating-button", style: { display: this.props.display }, onClick: this.props.click },
            React.createElement("div", { className: "icon icon-pencil" })
        );
    }

});

/**
* @method Twenty.Components.form.formelement
* @memberof Twenty.Components
* @description container for forms, rendering the form fields
*/
/* istanbul ignore next */
Twenty.Components.form = Twenty.Components.form || {};

Twenty.Components.form.formelement = createReactClass({
    displayName: "formelement",


    myNameIs: "form",
    mixins: [Twenty.mixins.toast, Twenty.mixins.pureRender],
    submittable: false,
    fileinputs: [],

    authorizeUser: function authorizeUser() {
        if (this.state.data.form.meta.restricted && !Twenty.user.getLoginState()) {
            this.setState({
                authorized: false
            });
        } else {
            this.setState({
                authorized: true
            });
        }
    },

    setupForm: function setupForm(formData) {
        var mappedData = {},
            data = formData.data[0],
            cors = this.props.enctype === "application/json" ? "" : "?cors=" + location.host;

        mappedData = {
            form: {
                id: data.id,
                payloadParams: data.form.attributes.payloadParams,
                items: data.items,
                meta: {
                    sendUrl: this.props.data.getFormUrl ? Twenty.env.getServer("live") + data.form.attributes.action + cors : data.form.attributes.action,
                    title: data.meta.title,
                    type: data.meta.type,
                    openPlain: data.meta.openPlain,
                    openCollapsed: data.meta.openCollapsed,
                    remainVisibleAfterSubmit: data.meta.remainVisibleAfterSubmit,
                    restricted: data.meta.isgigyaonly,
                    labels: {
                        submit: data.meta.SUBMIT,
                        openForm: data.meta.JOIN || ""
                    },
                    messages: {
                        success: data.meta.successtxt,
                        error: data.meta.REQMSG
                    },
                    headers: data.form.headers || {}
                }
            }
        };

        // push index of each fileinput to prepare for file upload
        for (var i = 0, elems = mappedData.form.items; i < elems.length; i++) {
            if (elems[i].type === "file") {
                this.fileinputs.push(elems[i].name);
            }
        }
        this.setState({
            data: mappedData,
            toastConfigThanks: {
                type: "success",
                title: "",
                message: mappedData.form.meta.messages.success
            },
            toastConfigError: {
                type: "error",
                title: "",
                message: "Das Formular konnte nicht abgeschickt werden. Bitte versuchen Sie es erneut."
            },
            toastConfigErrorValidation: {
                type: "error",
                title: "",
                message: mappedData.form.meta.messages.error
            }
        }, function () {
            var _this26 = this;

            this.authorizeUser();
            Twenty.event.subscribe({
                type: "gigyaReady",
                callback: function callback() {
                    _this26.authorizeUser();
                }
            });
        });
    },

    gigyaToFormMapping: function gigyaToFormMapping() {
        var gigyaObject = {},
            firstName = Twenty.user.getUserInfo("firstName") || "",
            lastName = Twenty.user.getUserInfo("lastName") || "",
            gender = "",
            email = Twenty.user.getUserInfo("email") || "",
            zip = Twenty.user.getUserInfo("zip") || "",
            city = "",
            address = Twenty.user.getUserInfo("address") || "",
            phone = Twenty.user.getUserInfo("phones") && Twenty.user.getUserInfo("phones").number || "";

        if (Twenty.user.getUserInfo("gender")) {
            if (Twenty.user.getUserInfo("gender") === "m") {
                gender = Twenty.i18n.getString("form.gigyaFields.genderM", null);
            } else {
                gender = Twenty.i18n.getString("form.gigyaFields.genderF", null);
            }
        }
        if (Twenty.user.getUserInfo("city")) {
            city = Twenty.user.getUserInfo("city").split(",")[0];
        }
        gigyaObject[Twenty.i18n.getString("form.gigyaFields.firstName", null)] = firstName;
        gigyaObject[Twenty.i18n.getString("form.gigyaFields.lastName", null)] = lastName;
        gigyaObject[Twenty.i18n.getString("form.gigyaFields.gender", null)] = gender;
        gigyaObject[Twenty.i18n.getString("form.gigyaFields.email", null)] = email;
        gigyaObject[Twenty.i18n.getString("form.gigyaFields.zip", null)] = zip;
        gigyaObject[Twenty.i18n.getString("form.gigyaFields.city", null)] = city;
        gigyaObject[Twenty.i18n.getString("form.gigyaFields.address", null)] = address;
        gigyaObject[Twenty.i18n.getString("form.gigyaFields.phone", null)] = phone;

        return gigyaObject;
    },

    toggleFormVisibility: function toggleFormVisibility() {
        $(this.domNode).toggleClass("hidden");
    },

    expand: function expand() {
        $(this.domNode).addClass("expanded").removeClass("collapsed");
    },

    collapse: function collapse() {
        $(this.domNode).addClass("collapsed").removeClass("expanded");
    },

    handleValidation: function handleValidation(e) {
        e.preventDefault();

        this.setState({
            validating: true
        }, function () {
            var that = this,
                $formElements = $("input[data-valid], textarea[data-valid]", this.domNode);
            this.submittable = true;
            if ($formElements.length) {
                $formElements.each(function (i) {
                    // check text inputs
                    if ($(this).attr("type") === "text" || $(this).attr("type") === "textarea" || $(this).attr("type") === "email") {
                        // set submittable to false if this input is not valid
                        if ($(this).attr("data-valid") === "false" || $(this).prop("required") && this.value.length <= 0) {
                            that.submittable = false;
                            that.showToastMessage("toastConfigErrorValidation");
                        }
                    } else if ($(this).attr("type") === "file") {
                        // check file inputs
                        if ($(this).attr("data-valid") === "false" || $(this).prop("required") && this.files.length <= 0) {
                            that.submittable = false;
                            that.showToastMessage("toastConfigErrorValidation");
                        }
                    } else if ($(this)[0].nodeName === "TEXTAREA") {
                        // check textareas
                        if ($(this).attr("data-valid") === "false" || $(this).prop("required") && this.value.length <= 0) {
                            that.submittable = false;
                            that.showToastMessage("toastConfigErrorValidation");
                        }
                    } else if ($(this).attr("type") === "checkbox") {
                        // check checkboxes
                        if ($(this).attr("data-valid") === "false" || $(this).prop("required") && !this.checked) {
                            that.submittable = false;
                            that.showToastMessage("toastConfigErrorValidation");
                        }
                    } else if ($(this).prop("tagName") === "SELECT") {
                        // check selects / dropdowns
                        if ($(this).attr("data-valid") === "false" || $(this).prop("required") && this.value === "") {
                            that.submittable = false;
                            that.showToastMessage("toastConfigErrorValidation");
                        }
                    }

                    // submit form if last input and submittable is still true
                    if (i + 1 === $formElements.length && that.submittable === true) {
                        that.submit();
                    }
                });
            } else {
                that.submit();
            }
        });
    },

    /**
    * @name submit
    * @method
    * @memberof Twenty.Components.form.formelement
    * @description The back-end has separation between file upload and form submission.
    * This submit method examined the form for file upload elements (which have been saved
    * at render time into this.fileinputs. It loops through them, uploading them as it goes.
    * These file inputs are rendered not with a name Attribute as other form elements, but with
    * a data-name attribute.
    * For each input element with a file associated with it, this data-name is read out and
    * coped as a "name" with a value of the filename to a new hidden form element to be submitted
    * along with the main form. Which is then submitted with a pretty standard jQuery send.
    **/
    submit: function submit() {
        var formEnctype = this.props.enctype || "application/x-www-form-urlencoded",
            ajaxRequestData = {},
            sendCredentials = true,
            inp;

        if (this.fileinputs.length) {
            var fileinput = this.fileinputs.pop(),
                currentInput = this.domNode.querySelectorAll("input[data-name=" + fileinput + "]")[0],
                currentFile = this.domNode.querySelectorAll("input[data-name=" + fileinput + "]")[0].files[0];
            if (currentFile) {
                var fileUploadUrl = Twenty.env.getServer("formUpload") + "?cors=" + location.host,
                    formData = new FormData();
                var fileName = void 0,
                    fileNameEndPos = void 0,
                    ext = void 0,
                    random = void 0;

                fileName = currentInput.value;
                if (fileName.indexOf("\\") > -1) {
                    var fileNameArr = fileName.split("\\");
                    fileName = fileNameArr.pop();
                    fileNameEndPos = fileName.lastIndexOf(".");
                    ext = fileName.substr(fileNameEndPos);
                    fileName = fileName.substr(0, fileNameEndPos);
                    random = new Date().getTime().toString().substr(7);
                    fileName = fileName + "_" + random + ext; // since iOS direct photo uploads are always named "image.jpg" we have to add a random string to the filename
                }
                formData.append("formid", this.state.data.form.id);
                formData.append("owner", currentInput.dataset.name);
                formData.append("file", currentFile);
                formData.append("name", fileName);
                formData.append("size", currentFile.size);
                formData.append("cors", location.host);

                inp = document.createElement("input");
                inp.type = "hidden";
                inp.name = currentInput.dataset.name;
                inp.value = fileName;
                this.domNode.appendChild(inp);

                var request = new XMLHttpRequest();
                request.open("POST", fileUploadUrl);
                request.send(formData);
                this.submitBtn.disabled = true;
                this.showToastMessage("toastProgress", 2000);
                request.onreadystatechange = function () {
                    if (request.readyState === 4 && request.status === 200) {
                        var response = JSON.parse(request.responseText);
                        this.domNode.elements[currentInput.dataset.name].value = response.reference;
                        this.submit();
                    }
                }.bind(this);
            } else {
                this.submit();
            }
        } else {
            var kruxSource = "",
                // prefix (e.g. "20min" (logged in) or "wettbewerbe")
            kruxHash = ""; // kruxHash (i.e. hashed kruxString without source) (e.g. "13E37LEET")

            if (this.state.data.form.meta.type === 2) {
                // do krux stuff only with forms of type competition => 2
                var kruxFieldValues = [];
                var kruxFields = void 0,
                    kruxString = void 0,
                    // value to hash (e.g. email address)
                kruxHashFull = window.tamediaBID || ""; // kruxSource + kruxHash (e.g. "wettbewerbe/13E37LEET")

                if (window.tamediaBID && window.tamediaBID.length) {
                    // logged in
                    // we need to split tamediaBID (kruxHashFull) because backend needs kruxSource and kruxHash separately
                    var split = window.tamediaBID.split("/");
                    kruxSource = split[0];
                    kruxHash = split[1];
                } else {
                    // logged out
                    kruxFields = this.domNode.querySelectorAll("input[data-krux-id]");
                    if (kruxFields) {
                        for (var i = 0; i < kruxFields.length; i++) {
                            kruxFieldValues.push(kruxFields[i].value);
                        }
                    }
                    kruxString = kruxFieldValues.join("");
                    if (kruxString && XXH) {
                        kruxSource = "wettbewerbe";
                        kruxHash = XXH.h64(kruxString, 0).toString(16);
                        kruxHashFull = kruxSource + "/" + kruxHash;
                        window.tamediaBID = kruxHashFull;
                    }
                }
            }

            switch (formEnctype) {
                case "application/json":
                    var serializedData = void 0;
                    if (this.props.deactivateDecode === "true") {
                        serializedData = $(this.domNode).serialize().split("&");
                    } else {
                        serializedData = decodeURIComponent($(this.domNode).serialize()).split("&");
                    }

                    for (var _i = 0; _i < serializedData.length; _i++) {
                        var currData = serializedData[_i].split("=");
                        if (currData[1]) {
                            if (this.props.deactivateDecode === "true") {
                                if (currData[0] === "message" || currData[0] === "first_name" || currData[0] === "last_name") {
                                    ajaxRequestData[currData[0]] = decodeURIComponent(currData[1].split("+").join(" "));
                                } else {
                                    ajaxRequestData[currData[0]] = decodeURIComponent(currData[1]);
                                }
                            } else {
                                ajaxRequestData[currData[0]] = currData[1];
                            }
                        }
                    }
                    if (this.props.postParams) {
                        var postParams = this.props.postParams;
                        Object.keys(postParams).forEach(function (key) {
                            ajaxRequestData[key] = postParams[key];
                        });
                    }
                    if (this.state.data.form.payloadParams) {
                        var regex = /\{(\w+)\}/g,
                            params = Twenty.core.copyObject(this.state.data.form.payloadParams),
                            replaceValues = function replaceValues(obj) {
                            // eslint-disable-next-line
                            for (var key in obj) {
                                if (_typeof(obj[key]) === "object") {
                                    obj[key] = replaceValues(obj[key]);
                                } else {
                                    var matches = obj[key].match(regex);
                                    if (matches) {
                                        for (var _i2 = 0; _i2 < matches.length; _i2++) {
                                            obj[key] = obj[key].replace(matches[_i2], ajaxRequestData[matches[_i2].slice(1, -1)]);
                                        }
                                    }
                                }
                            }
                            return obj;
                        };
                        ajaxRequestData = replaceValues(params);
                    }

                    ajaxRequestData = JSON.stringify(ajaxRequestData);
                    sendCredentials = false;
                    break;
                default:
                    ajaxRequestData = $(this.domNode).serialize() + (kruxSource && "&kruxsource=" + kruxSource + "&kruxhash=" + kruxHash || "");
                    break;
            }
            Twenty.datamodel.runAJAXRequest({
                url: this.state.data.form.meta.sendUrl,
                data: ajaxRequestData,
                type: this.props.method || "POST",
                dataType: "json",
                contentType: formEnctype,
                xhrFields: {
                    withCredentials: sendCredentials
                },
                headers: this.state.data.form.meta.headers,
                success: function () {
                    var _this27 = this;

                    this.showToastMessage("toastConfigThanks", 20000);
                    this.reset();
                    this.collapse();
                    if (this.props.handleHideForm) {
                        this.toggleFormVisibility();
                        setTimeout(function () {
                            _this27.props.handleHideForm();
                        }, 20000);
                    }
                }.bind(this),
                error: function () {
                    this.showToastMessage("toastConfigError", 6000);
                    Twenty.tracking.errorlog({
                        category: "component",
                        action: "commentform",
                        label: "could not send form"
                    });
                }.bind(this)
            });
        }
    },

    reset: function reset() {
        if (!this.state.data.form.meta.remainVisibleAfterSubmit) {
            this.domNode.classList.add("hidden");
        }
        this.domNode.reset();
        this.submittable = false;
    },

    renderList: function renderList(element, i, renderCollapsed, renderFirstElemOnly) {
        var handleFocus = void 0;
        if (renderCollapsed) {
            if (renderFirstElemOnly) {
                if (i > 0) {
                    return null;
                } else {
                    handleFocus = this.expand;
                }
            } else if (i === 0) {
                return null;
            }
        }
        var gigyaMappedData = this.gigyaToFormMapping();
        var placeholder = "",
            inputData = {};
        if (element.placeholder) {
            placeholder = element.placeholder;
        } else if (element.useLabelAsPlaceholder) {
            placeholder = element.label;
        } else if (element.validate && element.validate.format) {
            placeholder = element.validate.format;
        }
        inputData = {
            placeholder: placeholder,
            label: element.label,
            useLabelAsPlaceholder: element.useLabelAsPlaceholder,
            name: element.name,
            type: element.type,
            items: element.items || {},
            rows: element.rows || "",
            cssClass: element.cssClass || "",
            maxLength: element.attributes && element.attributes.maxlength || "524288",
            required: element.required || false,
            validate: {
                pattern: element.validate && element.validate.pattern || "",
                format: element.validate && element.validate.format || ""
            },
            defaultValue: gigyaMappedData[element.label]
        };
        switch (element.type) {
            case "area":
                return React.createElement(Twenty.Components.form.textarea, { data: inputData, key: i, validating: this.state.validating, handleFocus: handleFocus });
            case "email":
            case "number":
            case "text":
                return React.createElement(Twenty.Components.form.textinput, { data: inputData, key: i, validating: this.state.validating, handleFocus: handleFocus });
            case "hidden":
                return React.createElement(Twenty.Components.form.textinput, { data: inputData, key: i });
            case "file":
                return React.createElement(Twenty.Components.form.fileinput, { data: element, key: i, validating: this.state.validating });
            case "checkbox":
                return React.createElement(Twenty.Components.form.checkboxlist, { data: element, key: i, validating: this.state.validating });
            case "radio":
                var isAgb = element.name.includes(Twenty.datamodel.agbIdentifierFromFieldName);
                if (isAgb) {
                    return React.createElement(Twenty.Components.form.agb, { data: element, key: i });
                } else {
                    return React.createElement(Twenty.Components.form.radiobuttonlist, { data: element, defaultValue: inputData.defaultValue, key: i });
                }
            case "checkboxlist":
                return React.createElement(Twenty.Components.form.checkboxlist, { data: element, key: i, validating: this.state.validating });
            case "select":
                return React.createElement(Twenty.Components.form.dropdownlist, { data: element, key: i, validating: this.state.validating });
            case "label":
                return React.createElement(
                    "label",
                    null,
                    element.value
                );
            default:
                Twenty.tracking.errorlog({
                    category: "component",
                    action: "form",
                    label: "unsupported form element: {" + element.type + "}"
                });
                break;
        }
    },

    getInitialState: function getInitialState() {
        return {
            data: {
                form: {}
            },
            authorized: false,
            validating: false,
            toastConfigThanks: {
                type: "success",
                title: Twenty.i18n.getString("form.toast.success.title"),
                message: Twenty.i18n.getString("form.toast.success.message")
            },
            toastConfigError: {
                type: "error",
                title: Twenty.i18n.getString("form.toast.error.title"),
                message: Twenty.i18n.getString("form.toast.error.message")
            },
            toastProgress: {
                type: "info",
                title: Twenty.i18n.getString("form.toast.sending.title"),
                message: Twenty.i18n.getString("form.toast.sending.message")
            },
            toastConfigErrorValidation: {
                type: "error",
                title: Twenty.i18n.getString("form.toast.invalid.title"),
                message: Twenty.i18n.getString("form.toast.invalid.message")
            }
        };
    },

    componentDidMount: function componentDidMount() {
        if (this.props.data.getFormUrl) {
            Twenty.datamodel.runAJAXRequest({
                url: this.props.data.getFormUrl,
                dataType: "json",
                success: function (formData) {
                    this.setupForm(formData);
                }.bind(this)
            });
        } else {
            this.setupForm(this.props.data);
        }
    },

    render: function render() {
        var _this28 = this;

        var data = this.state.data.form,
            btnToggleForm,
            formTitle,
            cssClass = "",
            renderList = this.renderList;

        if ($.isEmptyObject(data) || !data.id || typeof this.state.authorized === "undefined") {
            return React.createElement(
                "div",
                { className: "info" },
                "Loading Form..."
            );
        }
        if (data.meta.openPlain) {
            // openPlain: true --> form is visible by default
            if (data.meta.title && data.meta.title.length) {
                formTitle = React.createElement(
                    "h3",
                    null,
                    data.meta.title
                );
            }
        } else {
            // openPlain: false --> form is hidden by default
            cssClass = "hidden";
            btnToggleForm = React.createElement(
                "button",
                { className: "ghost btn-toggle-form", onClick: this.toggleFormVisibility },
                data.meta.labels.openForm
            );
            if (data.meta.title && data.meta.title.length > 0) {
                formTitle = React.createElement(
                    "h3",
                    null,
                    data.meta.title,
                    React.createElement("span", { className: "icon icon-cancel-2 btn-close-form", onClick: this.toggleFormVisibility })
                );
            }
        }
        if (data.meta.openCollapsed) {
            cssClass = "collapsed";
        }
        if (this.state.authorized) {
            return React.createElement(
                "div",
                { className: this.props.cssClass },
                btnToggleForm,
                React.createElement(
                    "form",
                    { key: data.id, className: cssClass, ref: function ref(_ref18) {
                            _this28.domNode = _ref18;
                        } },
                    formTitle,
                    data.meta.openCollapsed ? React.createElement(
                        "div",
                        null,
                        data.items.map(function (item, i) {
                            return renderList(item, i, true, true);
                        }),
                        React.createElement(
                            "div",
                            { className: "expander" },
                            data.items.map(function (item, i) {
                                return renderList(item, i, true, false);
                            }),
                            React.createElement("input", { type: "hidden", name: "lang", value: "de" }),
                            React.createElement("input", { type: "hidden", name: "formid", value: data.id }),
                            React.createElement("input", { type: "hidden", name: "article_id", value: data.id }),
                            React.createElement("input", { type: "hidden", name: "created_at", value: new Date().toISOString() }),
                            this.props.parentId && React.createElement("input", { type: "hidden", name: "parent_id", value: this.props.parentId }),
                            React.createElement("input", { type: "text", name: "captcha", value: "", style: { display: "none" } }),
                            React.createElement(Twenty.Components.toast, this.state.toastProgress),
                            React.createElement(Twenty.Components.toast, this.state.toastConfigErrorValidation),
                            React.createElement(Twenty.Components.toast, this.state.toastConfigError),
                            React.createElement(
                                "button",
                                { onClick: this.handleValidation, type: "submit", ref: function ref(_ref16) {
                                        _this28.submitBtn = _ref16;
                                    } },
                                data.meta.labels.submit
                            )
                        )
                    ) : React.createElement(
                        "div",
                        null,
                        data.items.map(function (item, i) {
                            return renderList(item, i, false);
                        }),
                        React.createElement("input", { type: "hidden", name: "lang", value: "de" }),
                        React.createElement("input", { type: "hidden", name: "formid", value: data.id }),
                        React.createElement("input", { type: "hidden", name: "article_id", value: data.id }),
                        React.createElement("input", { type: "hidden", name: "created_at", value: new Date().toISOString() }),
                        this.props.parentId && React.createElement("input", { type: "hidden", name: "parent_id", value: this.props.parentId }),
                        React.createElement("input", { type: "text", name: "captcha", value: "", style: { display: "none" } }),
                        React.createElement(Twenty.Components.toast, this.state.toastProgress),
                        React.createElement(Twenty.Components.toast, this.state.toastConfigErrorValidation),
                        React.createElement(Twenty.Components.toast, this.state.toastConfigError),
                        React.createElement(
                            "button",
                            { onClick: this.handleValidation, type: "submit", ref: function ref(_ref17) {
                                    _this28.submitBtn = _ref17;
                                } },
                            data.meta.labels.submit
                        )
                    )
                ),
                React.createElement(Twenty.Components.toast, this.state.toastConfigThanks)
            );
        } else {
            return React.createElement(
                "div",
                null,
                React.createElement(
                    "button",
                    { className: "btn ghost", onClick: Twenty.user.showLogin },
                    data.meta.labels.submit
                )
            );
        }
    }
});

/**
 * text input
 * @memberof Twenty.Components.agb
 * @description This component outputs a text (e.g. indicates that user accepts agb by clicking the send button) with a hidden already checked input checkbox.

this.props.data = {
    label: "string",
    name: "component name",
    type: "radio",
    items: [{
        value: "no"
    }];
}

*/

Twenty.Components.form.agb = createReactClass({
    displayName: "agb",


    myNameIs: "form.agb",

    getDefaultProps: function getDefaultProps() {
        return { data: {} };
    },

    render: function render() {
        var _this29 = this;

        var divClassName = "agb-input",
            fieldLbl = this.props.data.label || "";
        var agbFields = void 0,
            id = void 0;

        if (this.props.data && this.props.data.items) {

            agbFields = this.props.data.items.map(function (elem) {
                id = Twenty.core.getUniqueKey("cblistitem");
                return React.createElement(
                    "div",
                    null,
                    React.createElement("p", { className: "field-label", dangerouslySetInnerHTML: { __html: fieldLbl } }),
                    React.createElement("input", { type: this.props.data.type, id: id, name: this.props.data.name, value: elem.value, checked: "checked", style: { visibility: "hidden" } })
                );
            }, this);
        }

        return React.createElement(
            "div",
            { className: divClassName, ref: function ref(_ref19) {
                    _this29.domNode = _ref19;
                } },
            agbFields
        );
    }
});

/**
 * text input
 * @memberof Twenty.Components.form
 */

Twenty.Components.form.checkboxlist = createReactClass({
    displayName: "checkboxlist",


    myNameIs: "form.checkboxlist",
    currentlyValidating: false,

    requiredCheck: function requiredCheck() {
        if (this.props.data.required) {
            if ($(this.domNode).find("input:checked").length === 0) {
                this.setState({
                    isValid: false
                });
            } else {
                this.setState({
                    isValid: true
                });
            }
        }
    },

    getDefaultProps: function getDefaultProps() {
        return { data: {} };
    },

    getInitialState: function getInitialState() {
        return {
            isValid: true
        };
    },

    componentDidUpdate: function componentDidUpdate() {
        if (this.props.data.required && this.props.validating && !this.currentlyValidating) {
            this.requiredCheck();
            this.currentlyValidating = true;
        } else {
            this.currentlyValidating = false;
        }
    },

    render: function render() {
        var _this30 = this;

        var lblClassName = !this.state.isValid ? "has-error" : "",
            divClassName = this.props.data.items.length === 1 ? "checkbox-switch label-left" : "",
            // display single checkbox as on/off switch
        required = this.props.data.required ? "required" : "",
            fieldLbl = this.props.data.label || "";
        var checkboxes = void 0,
            id = void 0;

        if (this.props.data && this.props.data.items) {
            if (this.props.data.items.length === 1) {
                id = Twenty.core.getUniqueKey("cblistitem");
                checkboxes = this.props.data.items.map(function (elem, i) {
                    return React.createElement(
                        "div",
                        { key: "checkboxes_" + i },
                        React.createElement("p", { className: "field-label", dangerouslySetInnerHTML: { __html: fieldLbl } }),
                        React.createElement("input", { type: this.props.data.type, id: id, name: this.props.data.name, value: elem.value, "data-valid": this.state.isValid, required: required, onChange: this.requiredCheck }),
                        React.createElement(
                            "label",
                            { key: i, className: lblClassName, htmlFor: id },
                            typeof elem.label === "string" ? React.createElement("span", { dangerouslySetInnerHTML: { __html: elem.label } }) : elem.label,
                            React.createElement("span", { className: "toggle" })
                        )
                    );
                }, this);
            } else {
                checkboxes = this.props.data.items.map(function (elem, i) {
                    id = Twenty.core.getUniqueKey("cblistitem");
                    return React.createElement(
                        "div",
                        { key: "checkboxes_" + i },
                        React.createElement(
                            "p",
                            { className: "field-label" },
                            fieldLbl
                        ),
                        React.createElement(
                            "label",
                            { key: i, className: lblClassName, htmlFor: id },
                            elem.label
                        ),
                        React.createElement("input", { type: this.props.data.type, id: id, name: this.props.data.name, value: elem.value, "data-valid": this.state.isValid, required: required, onChange: this.requiredCheck })
                    );
                }, this);
            }
        }

        return React.createElement(
            "div",
            { className: divClassName, ref: function ref(_ref20) {
                    _this30.domNode = _ref20;
                } },
            checkboxes
        );
    }
});

/**
 * text input
 * @memberof Twenty.Components.form
 */

Twenty.Components.form.dropdownlist = createReactClass({
    displayName: "dropdownlist",


    myNameIs: "dropdownlist",
    currentlyValidating: false,

    requiredCheck: function requiredCheck() {
        if (this.props.data.required) {
            if ($(this.domNode).val() === "") {
                this.setState({
                    isValid: false
                });
            } else {
                this.setState({
                    isValid: true
                });
            }
        }
    },

    getDefaultProps: function getDefaultProps() {
        return {
            data: {}
        };
    },

    getInitialState: function getInitialState() {
        return {
            isValid: true
        };
    },

    componentDidUpdate: function componentDidUpdate() {
        if (this.props.data.required && this.props.validating && !this.currentlyValidating) {
            this.requiredCheck();
            this.currentlyValidating = true;
        } else {
            this.currentlyValidating = false;
        }
    },

    render: function render() {
        var _this31 = this;

        var cssClass = !this.state.isValid ? "has-error" : "",
            required = this.props.data.required ? "required" : "";
        var label = void 0;

        var options = this.props.data.items.map(function (elem, i) {
            return React.createElement(
                "option",
                { key: i, value: elem.value },
                elem.label
            );
        }, this);

        if (this.props.data.label) {
            label = React.createElement(
                "label",
                null,
                this.props.data.label
            );
        }

        return React.createElement(
            "div",
            null,
            label,
            React.createElement(
                "select",
                { className: cssClass, name: this.props.data.name, ref: function ref(_ref21) {
                        _this31.domNode = _ref21;
                    }, "data-valid": this.state.isValid, required: required, onChange: this.requiredCheck },
                options
            )
        );
    }
});

/**
 * text input
 * @memberof Twenty.Components.form
 */

Twenty.Components.form.fileinput = createReactClass({
    displayName: "fileinput",


    myNameIs: "form.fileinput",
    mixins: [Twenty.mixins.validation],
    currentlyValidating: false,

    handleChange: function handleChange() {
        if (this.props.data.required) {
            // required
            this.setState({
                isValid: this.domNode.files.length > 0 ? true : false
            });
        }
    },

    getDefaultProps: function getDefaultProps() {
        return {
            data: {},
            validating: false
        };
    },

    getInitialState: function getInitialState() {
        return {
            isValid: true
        };
    },

    componentDidUpdate: function componentDidUpdate() {
        if (this.props.validating && !this.currentlyValidating) {
            this.handleChange();
            this.currentlyValidating = true;
        } else {
            this.currentlyValidating = false;
        }
    },

    render: function render() {
        var _this32 = this;

        // eslint-disable-next-line no-unused-vars
        var placeholder,
            label,
            allowedFileTypes,
            required = this.props.data.required ? "required" : "",
            cssClass = [this.props.cssClass, !this.state.isValid ? "has-error" : null].join(" ");

        allowedFileTypes = this.props.data.validate.format.split(";");
        allowedFileTypes = allowedFileTypes.map(function (filetype) {
            return "." + filetype;
        });
        allowedFileTypes = allowedFileTypes.toString();

        // define placeholder
        if (this.props.data.useLabelAsPlaceholder) {
            placeholder = this.props.data.label;
        } else {
            placeholder = this.props.data.placeholder;
        }
        if (this.props.data.format) {
            placeholder = this.props.data.format;
        }

        if (this.props.data.label && !this.props.data.useLabelAsPlaceholder) {
            label = React.createElement(
                "label",
                { htmlFor: this.props.data.name, className: cssClass },
                this.props.data.label
            );
        }
        return React.createElement(
            "div",
            null,
            label,
            React.createElement("input", { className: cssClass, type: this.props.data.type, "data-name": this.props.data.name, ref: function ref(_ref22) {
                    _this32.domNode = _ref22;
                }, onChange: this.handleChange, accept: allowedFileTypes, "data-valid": this.state.isValid, required: required })
        );
    }
});

/**
 * text input
 * @memberof Twenty.Components.form
 */

Twenty.Components.form.radiobuttonlist = createReactClass({
    displayName: "radiobuttonlist",


    myNameIs: "form.radiobuttonlist",

    getDefaultProps: function getDefaultProps() {
        return {
            data: {}
        };
    },

    render: function render() {
        var isRequired = this.props.data.required ? "required" : "";

        var radioButtons = this.props.data.items.map(function (elem, i) {
            var checked = false;

            if (this.props.defaultValue) {
                if (this.props.defaultValue === elem.value) {
                    checked = true;
                }
            } else if (i === 0) {
                checked = true;
            }

            return React.createElement(
                "label",
                { key: i, htmlFor: elem.label },
                elem.label,
                React.createElement("input", { type: this.props.data.type, name: this.props.data.name, defaultValue: elem.value, required: isRequired, defaultChecked: checked })
            );
        }, this);

        return React.createElement(
            "div",
            null,
            radioButtons
        );
    }
});

/**
 * textarea
 * @memberof Twenty.Components.form
 */

Twenty.Components.form.textarea = createReactClass({
    displayName: "textarea",


    myNameIs: "form.textarea",
    mixins: [Twenty.mixins.validation],
    currentlyValidating: false,

    handleChange: function handleChange() {
        // update charsCount
        if (this.props.data.maxLength) {
            this.setState({
                charsCount: this.domNode.value.length
            });
        }

        // validate & show error
        if (this.props.data.maxLength && this.state.charsCount > this.props.data.maxLength) {
            // max length
            this.setState({
                isValid: false
            });
        } else if (this.props.data.validate && this.props.data.validate.pattern !== "") {
            // regex
            this.setState({
                isValid: Twenty.mixins.validation.regex(this.domNode.value, this.props.data.validate.pattern)
            });
        } else if (this.props.data.required) {
            // required
            this.setState({
                isValid: Twenty.mixins.validation.required(this.domNode.value)
            });
        }
    },

    getDefaultProps: function getDefaultProps() {
        return {
            data: {},
            validating: false
        };
    },

    getInitialState: function getInitialState() {
        return {
            isValid: true,
            charsCount: 0
        };
    },

    componentDidUpdate: function componentDidUpdate() {
        if (this.props.validating && !this.currentlyValidating) {
            this.handleChange();
            this.currentlyValidating = true;
        } else {
            this.currentlyValidating = false;
        }
    },

    render: function render() {
        var _this33 = this;

        var defaultValue = "",
            placeholder = "",
            required = this.props.data.required ? "required" : "",
            cssClass = [this.props.cssClass, !this.state.isValid ? "has-error" : null].join(" "),
            cssClassCharsLeft = ["chars-counter", !this.state.isValid && this.state.charsCount > 0 ? "has-error" : null].join(" "),
            rows = this.props.data.rows || 3,
            label;

        // define default value
        defaultValue = this.props.data.format || "";

        // define placeholder
        if (this.props.data.useLabelAsPlaceholder) {
            placeholder = this.props.data.label;
        } else {
            placeholder = this.props.data.placeholder;
        }
        if (this.props.data.format) {
            placeholder = this.props.data.format;
        }

        // define label
        if (this.props.data.label && !this.props.data.useLabelAsPlaceholder) {
            label = React.createElement(
                "label",
                { htmlFor: this.props.data.name, className: cssClass },
                this.props.data.label
            );
        }

        if (this.charsLeft && this.charsLeft.classList.contains("has-error") && this.state.isValid) {
            this.charsLeft.classList.remove("has-error");
        }

        return React.createElement(
            "div",
            { className: "textarea" },
            label,
            React.createElement("textarea", { className: cssClass, name: this.props.data.name, ref: function ref(_ref23) {
                    _this33.domNode = _ref23;
                }, placeholder: placeholder, defaultValue: defaultValue, maxLength: this.props.data.maxLength, rows: rows, "data-valid": this.state.isValid, required: required, onKeyUp: this.handleChange, onChange: this.handleChange, onFocus: this.props.handleFocus }),
            React.createElement(
                "div",
                { className: cssClassCharsLeft },
                React.createElement(Twenty.i18n.str, { className: "chars-left-label", textref: "form.textarea.labelCharsCount" }),
                React.createElement(
                    "span",
                    { className: "chars-left-number", ref: function ref(_ref24) {
                            _this33.charsLeft = _ref24;
                        } },
                    parseInt(this.props.data.maxLength - this.state.charsCount)
                )
            )
        );
    }
});

/**
 * text input
 * @memberof Twenty.Components.form
 */

Twenty.Components.form.textinput = createReactClass({
    displayName: "textinput",


    myNameIs: "form.textinput",
    mixins: [Twenty.mixins.validation],
    currentlyValidating: false,

    handleChange: function handleChange() {
        if (this.props.data.validate && this.props.data.validate.pattern !== "" && this.domNode.value !== "") {
            // regex check
            this.setState({
                isValid: Twenty.mixins.validation.regex(this.domNode.value, this.props.data.validate.pattern)
            });
        } else if (this.props.data.required) {
            // required check
            this.setState({
                isValid: Twenty.mixins.validation.required(this.domNode.value)
            });
        } else {
            this.setState({
                isValid: true
            });
        }
        if (this.props.data.emailCheck) {
            this.setState({
                isValid: Twenty.mixins.validation.regex(this.domNode.value, this.props.data.emailCheck.pattern)
            });
        }
    },

    updateField: function updateField(e) {
        this.setState({ defaultValue: e.target.value });
    },

    getDefaultProps: function getDefaultProps() {
        return {
            data: {},
            validating: false
        };
    },

    getInitialState: function getInitialState() {
        return {
            defaultValue: "",
            isValid: true
        };
    },

    componentWillUpdate: function componentWillUpdate() {
        // define default value
        if (this.props.data.defaultValue && !this.state.defaultValue) {
            var propsDefaultValue = this.props.data.defaultValue;
            this.props.data.defaultValue = false;
            this.setState({ defaultValue: propsDefaultValue });
        } else if (this.props.data.format && !this.state.defaultValue) {
            var defaultValue = this.props.data.format;
            this.props.data.format = false;
            this.setState({ defaultValue: defaultValue });
        }
    },

    componentDidUpdate: function componentDidUpdate() {
        if (this.props.validating && !this.currentlyValidating) {
            this.handleChange();
            this.currentlyValidating = true;
        } else {
            this.currentlyValidating = false;
        }
    },

    render: function render() {
        var _this34 = this;

        var placeholder = "",
            required = this.props.data.required ? "required" : null,
            cssClass = [this.props.cssClass ? this.props.cssClass : null, !this.state.isValid ? "has-error" : null].join(" "),
            kruxFields = ["E-Mail"],
            kruxId,
            label;

        // define placeholder
        if (this.props.data.useLabelAsPlaceholder) {
            placeholder = this.props.data.label;
        } else {
            placeholder = this.props.data.placeholder;
        }
        if (this.props.data.format) {
            placeholder = this.props.data.format;
        }

        if (this.props.data.label && !this.props.data.useLabelAsPlaceholder && this.props.data.type !== "hidden") {
            label = React.createElement(
                "label",
                { htmlFor: this.props.data.name, className: cssClass },
                this.props.data.label
            );
        }

        // krux
        if (this.props.data.label) {
            for (var i = 0; i < kruxFields.length; i++) {
                if (kruxFields[i] === this.props.data.label) {
                    kruxId = this.props.data.label;
                }
            }
        }

        return React.createElement(
            "div",
            { className: "text-input" },
            label,
            React.createElement("input", { className: cssClass, type: this.props.data.type || "text", name: this.props.data.name, ref: function ref(_ref25) {
                    _this34.domNode = _ref25;
                }, "data-krux-id": kruxId, "data-valid": this.state.isValid, placeholder: placeholder, value: this.state.defaultValue, maxLength: this.props.data.maxLength, required: required, onKeyUp: this.handleChange, onChange: this.updateField })
        );
    }
});

/**
* @method Twenty.Components.header
* @memberof Twenty.Components
* @description work in progress
* @param {Object[]} data array of context elements.
* @param {boolean} showHeader
* @param {string} displayTitle
* @param {string} headerColor change the color of the header background
* @param {string} textColor change the color of the text in the header
* @param {string} headerClass
* @example
    {
        showHeader: false,
        displayTitle: "My Pretty App",
        headerColor: "#e30613",
        textColor: "#fff",
        headerClass: "solid",
        headerElements: [
            {
                type: "icon",
                name: "left-open",
                action: function() {
                    Twenty.history.goBack();
                }
            },{
                type: "image",
                src: "/webapp/img/de/logo.png",
                name: "back-button",
                action: function() {
                    Twenty.history.goBack();
                }
            },{
                type: "icon",
                name: "search",
                action: function() {
                    Twenty.page.load(Twenty.page.pages.searchpage);
                }
            },{
                type: "icon",
                name: "cog",
                action: function() {
                    Twenty.app.controller.loadSettingsPage();
                }
            },{
                type: "icon",
                name: "leser-reporter",
                action: function() {
                    Twenty.app.controller.loadLeserReporterPage();
                }
            },{
                type: "btn",
                name: "login",
                action: function() {
                    Twenty.app.user.login();
                }
            },{
                type: "icon",
                name: "close",
                action: function() {
                    Twenty.page.closeModal();
                }
            },{
                type: "icon",
                name: "menu",
                action: function() {
                    Twenty.app.controller.loadMenuModal();
                }
            },{
                type: "component",
                name: "weather",
                props: {props}
            }
        ]
    }
*/
/* istanbul ignore next */
Twenty.Components.header = createReactClass({
    displayName: "header",


    myNameIs: "header",

    handleClick: function handleClick(e) {
        e.preventDefault();
        var itemName = e.currentTarget.dataset.name,
            configObjectArray = this.props.headerElements.filter(function (obj) {
            return obj.name === itemName ? obj : false;
        });
        if (configObjectArray.length === 1 && configObjectArray[0].hasOwnProperty("action")) {
            Twenty.page.closeModal();
            configObjectArray[0].action.call();
        }
    },

    getDefaultProps: function getDefaultProps() {
        return {
            scrollTolerance: 30
        };
    },

    componentWillMount: function componentWillMount() {
        this.scrollData = {
            scrollTolerance: this.props.scrollTolerance,
            scrollDirection: "up",
            additionalScrollElements: [],
            hideShowElements: []
        };
        Twenty.event.subscribe({
            type: "pageLoaded",
            callback: function callback(params) {
                Twenty.app.setHeader({ header: params.headerConfig });
            }
        });
        Twenty.event.subscribe({
            type: "modalClosed",
            callback: function callback(params) {
                Twenty.app.setHeader({ header: params.headerConfig });
            }
        });
    },

    render: function render() {
        var _this35 = this;

        var mapFunction = function mapFunction(headerItem, i) {
            var element,
                buttonClass,
                key = "headerElement_" + i;
            if (headerItem.type === "icon") {
                buttonClass = ["btn", "btn" + "-" + headerItem.name, headerItem.type, headerItem.type + "-" + headerItem.name].join(" ");
                element = React.createElement(
                    "li",
                    { key: key },
                    React.createElement("button", { className: buttonClass, "data-name": headerItem.name, onClick: this.handleClick })
                );
            }
            if (headerItem.type === "image") {
                element = React.createElement(
                    "li",
                    { key: key },
                    React.createElement("img", { src: headerItem.src, className: "logo", "data-name": headerItem.name, onClick: this.handleClick })
                );
            }
            if (headerItem.type === "component") {
                element = React.createElement("li", { key: key }, React.createElement(Twenty.Components[headerItem.name], { data: headerItem.data }));
            }
            return element;
        },
            headerStyle = {
            backgroundColor: this.props.headerColor,
            color: this.props.textColor
        },
            cssClasses = "header " + this.props.headerClass + (this.props.visible ? "" : " hidden");

        return React.createElement(
            "header",
            { style: headerStyle, className: cssClasses, ref: function ref(_ref26) {
                    _this35.domNode = _ref26;
                } },
            React.createElement(
                "nav",
                null,
                React.createElement(
                    "h1",
                    { className: "truncate" },
                    this.props.displayTitle
                ),
                React.createElement(
                    "ul",
                    null,
                    this.props.headerElements.map(mapFunction, this)
                )
            ),
            React.createElement(Twenty.Components.retreat, { data: this.scrollData, domNode: this.domNode })
        );
    }
});

/**
 * @method Twenty.Components.heroimage
 * @memberof Twenty.Components
 * @description Story hero image, with caption and credit. Appears when top element is of category "image".
 * @param {Object} data
 * @param {Object} data.credits credit of the photographer.
 * @param {string} data.description text that appears below the image.
 * @param {string} data.value image url.
 */
/* istanbul ignore next */
Twenty.Components.heroimage = createReactClass({
    displayName: "heroimage",


    myNameIs: "heroimage",

    render: function render() {
        var descriptionClasses = "hero-image-desc",
            credits = this.props.data.credits || "",
            description = this.props.data.description || "";

        // description can be empty but credits may still exist. so show it.
        if (credits) {
            description += "<p class='credit'>" + credits + "</p>";
        }

        return React.createElement(
            "div",
            { className: "hero-image" },
            React.createElement("div", { className: "hero-image-img", style: { backgroundImage: "url(" + this.props.data.value + ")" } }),
            description && React.createElement("p", { className: descriptionClasses, dangerouslySetInnerHTML: { __html: description } })
        );
    }
});

/**
 * @name Twenty.i18n.str
 * @memberof Twenty.i18n
 * @description outputs a display string for a given language
 * @example

        <Twenty.i18n.str textref="mycomponent.notes" />
        outputs an inline-block span containing the language appropriate string in this
        component's "notes" field.

        <Twenty.i18n.str textref="mycomponent.headline" element="h1" attributes={onClick: handler} />
        creates an H1 element with an innerHTML text of whatever is found in the
        strings.json file for this component which corresponds to the de.headline or
        fr.headline string

 */

/* istanbul ignore next */
Twenty.i18n.str = createReactClass({
    displayName: "str",


    render: function render() {

        var element = this.props.element || "span",
            className = "i18nmessage " + (this.props.className || ""),
            attributes = this.props.attributes || {},
            string;

        attributes.className = className;

        string = Twenty.i18n.getString(this.props.textref, this.props.replaces);

        return React.createElement(element, attributes, string);
    }
});

/**
* @method Twenty.Components.infinity
* @memberof Twenty.Components
* @description place this component at the end of any div and it will fire an callback
* when the user scrolls to within this.props.threshold vertical pixels. If you don't set
* the threshold, it defaults to 650 pixels. This seems to work as a pretty good intuitive
* value - it fires fast enough so that there is a chance to load before the user gets to
* the bottom, but slow enough so that it's not confusing to the user.
* The host page must have a locally scoped loadFunction which handles fetching data and
* rendering it. See {@link Twenty.Components.storylist} for an example.
* For vertical scrolling, use send a "type="vertical" as props.
* See {@link Twenty.Components.searchpage} for an example
* @param {"vertical" | "horizontal"} type horizontal scrolling or vertical, or to detect 50% scroll 'scrollpercentage'.
* @param {number} threshold=650 distance in pixels between the this component to the scrolled position on the page. Irrelevant when type=scrollpercentage
* @param {function} loadFunction function to call when scroll value reaches threshold.
* @param {function} percentage used why
* @example
* <Twenty.Components.infinity loadFunction={this.infiniteScroll} />
*/

/* istanbul ignore next */
Twenty.Components.infinity = createReactClass({
    displayName: "infinity",


    myNameIs: "infinity",
    hasEvents: false,
    startTime: 0,
    timeSpent: 0,

    scrollListener: function scrollListener() {
        var calculatedValue;
        if (!this.isLoading) {
            if (this.props.type === "vertical") {
                calculatedValue = Twenty.dom.topPosition(this.infinityDomNode) + this.infinityDomNode.offsetHeight - Twenty.dom.getScrollTop(this.props.scrollNode) - window.innerHeight;
            } else {
                calculatedValue = this.infinityDomNode.previousSibling.offsetWidth + this.infinityDomNode.offsetWidth - this.infinityDomNode.parentNode.scrollLeft - window.innerWidth;
            }
            if (calculatedValue < this.props.threshold) {
                this.removeEvents();
                this.hasEvents = false;
                this.timeSpent = +new Date() - this.startTime;
                this.props.loadFunction();
            }
        }
    },

    scrollListenerPercent: function scrollListenerPercent() {
        if (!this.isLoading) {
            var pageHeight = Twenty.dom.topPosition(this.infinityDomNode);
            var scrollPosition = Twenty.dom.getScrollTop(this.props.scrollNode);
            if (scrollPosition > pageHeight * this.props.percentage / 100) {
                this.removeEvents();
                this.hasEvents = false;
                this.timeSpent = +new Date() - this.startTime;
                this.props.loadFunction(this.timeSpent);
            }
        }
    },

    addEvents: function addEvents() {
        switch (this.props.type) {
            case "vertical":
                this.props.scrollNode.addEventListener("scroll", this.scrollListener);
                this.props.scrollNode.addEventListener("resize", this.scrollListener);
                break;
            case "scrollpercentage":
                this.props.scrollNode.addEventListener("scroll", this.scrollListenerPercent);
                break;
            default:
                this.infinityDomNode.parentNode.addEventListener("scroll", this.scrollListener);
                break;
        }
    },

    removeEvents: function removeEvents() {
        switch (this.props.type) {
            case "vertical":
                this.props.scrollNode.removeEventListener("scroll", this.scrollListener);
                this.props.scrollNode.removeEventListener("resize", this.scrollListener);
                break;
            case "scrollpercentage":
                this.props.scrollNode.removeEventListener("scroll", this.scrollListenerPercent);
                break;
            default:
                this.infinityDomNode.parentNode.removeEventListener("scroll", this.scrollListener);
                break;
        }
    },

    getDefaultProps: function getDefaultProps() {
        if ((typeof window === "undefined" ? "undefined" : _typeof(window)) !== "object") {
            return {
                type: "vertical",
                scrollNode: global,
                loadFunction: function loadFunction() {},
                threshold: 650
            };
        }
        return {
            type: "vertical",
            scrollNode: window,
            loadFunction: function loadFunction() {},
            threshold: 650
        };
    },

    componentDidMount: function componentDidMount() {
        if (!this.hasEvents) {
            this.addEvents();
            this.hasEvents = true;
        }
        this.startTime = +new Date();
    },

    componentDidUpdate: function componentDidUpdate() {
        if (!this.hasEvents) {
            this.addEvents();
            this.hasEvents = true;
        }
    },

    componentWillUnmount: function componentWillUnmount() {
        this.removeEvents();
    },

    render: function render() {
        var _this36 = this;

        var infinity = "infinity";
        if (this.props.type === "horizontal") {
            infinity += " horizontal";
        }
        return React.createElement("div", { className: infinity, ref: function ref(_ref27) {
                _this36.infinityDomNode = _ref27;
            } });
    }
});

/**
 * @method Twenty.Components.infobox
 * @memberof Twenty.Components
 * @description Shows an infobox in story page, parameters passed by {@link Twenty.Components.articleElement}. Can be used as a comment-engagement-, diashow- and video-teaser
 * @param {Object} data - The props for this component
 * @param {"info_box" | "gallery" | "video"} data.boxtype - When infobox, content is data.text.
 * @param {string} data.text - When data.boxtype = "info_box", this is the content.
 * @param {string} data.id - When data.communityobject is given, data.id = storyID
 * @param {Object} data.communityobject - Optional. When given, infobox contains social box ?? maybe not used anymore?
 * @param {number} data.communityobject.thumbs_up - Number of likes
 * @param {number} data.communityobject.thumbs_down - Number of dislikes
 * @param {number} data.communityobject.shares_total - Number of shares
 * @param {number} data.communityobject.comments_number - Number of comments
 * @param {boolean} data.communityobject.comments_active - If commenting is allowed.
 * @example
 * // standard infobox (box with text)
 * var props = {
 *      boxtype: 'info_box',
 *      text: 'Hello World!'
 * };
 *
 * // diashow- / video-teaser (picture, icon and text)
 * var props = {
 *      boxtype: 'gallery',
 *      gallerydata: galleryDataObj
 * };
 *
 * // comment-bubble (icon with num comments, promo-text)
 * var props = {
 *      boxtype: 'comment_bubble',
 *      comments_number: 23
 * };
 */
/* istanbul ignore next */
Twenty.Components.infobox = createReactClass({
    displayName: "infobox",


    myNameIs: "infobox",

    handleClickSportResult: function handleClickSportResult(url) {
        Twenty.app.controller.loadOptaWidgetPage(Twenty.dom.getURLParamsFromString(url));
    },

    render: function render() {
        var _this37 = this;

        // infobox
        if (this.props.data.boxtype === "info_box") {

            // if the infobox is for OPTA sports result, we customize the render button
            if (this.props.data.text.indexOf("btn-sport-results") !== -1) {
                var _props$data$text$matc = this.props.data.text.match(/<a .*?href="(.*)".*?>(.*?)<\/a>/),
                    _props$data$text$matc2 = _slicedToArray(_props$data$text$matc, 3),
                    link = _props$data$text$matc2[0],
                    url = _props$data$text$matc2[1],
                    label = _props$data$text$matc2[2]; // eslint-disable-line no-unused-vars

                return React.createElement(
                    "div",
                    { className: "btn-sport-results" },
                    React.createElement(
                        "button",
                        { className: "ghost", onClick: function onClick() {
                                return _this37.handleClickSportResult(url);
                            } },
                        label
                    )
                );
            }

            // default render for infobox
            return React.createElement(
                "div",
                { className: "infobox" },
                React.createElement("div", { className: "content", dangerouslySetInnerHTML: { __html: this.props.data.text } })
            );
        }

        return React.createElement("div", null);
    }
});

/**
 * @name liveticker
 * @memberof Twenty.Components
 * @description use the ticker from the "popup" ticker in an iframe
 */

/* istanbul ignore next */
Twenty.Components.liveticker = createReactClass({
    displayName: "liveticker",


    myNameIs: "liveticker",

    render: function render() {

        var src = Twenty.dom.getForcedWWW(window.location.origin);

        src += "/adapticker/index.tmpl?&livetickerid=" + this.props.tickerid + "&lang=" + Twenty.i18n.lang + "&redirect=true";
        return React.createElement(
            "div",
            { className: "liveticker" },
            React.createElement("iframe", { ref: "iframe", className: "autofit", src: src, scrolling: "no" })
        );
    }
});

/**
 * @method Twenty.Components.longformstorylist
 * @memberof Twenty.Components
 * @description list of longform story elements with an external link
 * @param {Object} data gets data from {@link Twenty.Components.storylist}.
 * @param {Object[]} data.items longform story elements.
 * @param {boolean} data.items.layout_type_external_url the external url to the longform
 * @param {Object[]} data.items.images all the images
 * @param {String} data.items.keyword
 * @param {String} data.items.extra_data.pubDate
 * @param {String} data.items.title
 * @param {String} data.items.lead
 * @param {String} data.items.fontColor
 * @param {String} data.items.backgroundColor
 */
/* istanbul ignore next */

Twenty.Components.longformstorylist = createReactClass({
    displayName: "longformstorylist",


    myNameIs: "longformstorylist",
    mixins: [Twenty.mixins.pureRender],

    render: function render() {
        return this.props.data.items.length > 0 && React.createElement(
            "div",
            { className: "longformstorylist" },
            this.props.data.items.map(function (element) {
                var key = Twenty.core.getUniqueKey("longformstory"),
                    textContainerStyle = {
                    color: element.fontColor,
                    backgroundColor: element.backgroundColor
                };
                return React.createElement(
                    "a",
                    { href: element.layout_type_external_url, target: "_blank", className: "longformstory", key: key },
                    React.createElement("img", { src: element.images[0].src_big }),
                    React.createElement(
                        "div",
                        { className: "text-container", style: textContainerStyle },
                        React.createElement(
                            "span",
                            { className: "keyword" },
                            element.keyword
                        ),
                        React.createElement(
                            "span",
                            { className: "date" },
                            element.extra_data.pubDate
                        ),
                        React.createElement(
                            "h5",
                            null,
                            element.title
                        ),
                        React.createElement("p", { dangerouslySetInnerHTML: { __html: element.lead } })
                    )
                );
            }, this)
        );
    }
});

/**
 * @method Twenty.Components.medialistItems
 * @memberof Twenty.Components
 * @description each dia or video item in the {@link Twenty.Components.medialist}.
 * @param {Object[]} data data object passed by {@link Twenty.Components.medialist} component.
 * @param {string} data.id media id
 * @param {string} data.title title appears below the media thumbnail
 * @param {string} data.thumbnail_mob_quad thumbnail url
 * @param {Object} data.communityobject community object
 * @param {number} data.communityobject.thumbs_up
 * @param {number} data.communityobject.thumbs_down
 * @param {string} data.type type of the media ('diashow', 'video',...)
 */
Twenty.Components.medialistItems = createReactClass({
    displayName: "medialistItems",


    myNameIs: "medialistItems",
    mixins: [Twenty.mixins.pureRender],

    render: function render() {
        var createList = function (element, i) {
            var icon = "icon-camera",
                showMedia = void 0,
                likes = "",
                dislikes = "";
            var el = element;

            // extended-slideshows don't loop, but show a link to the next slideshow instead at the end.
            // you can also vote inside such a slideshow (last slide)
            showMedia = function showMedia() {
                var mediaProps = {
                    mediatype: "slideshow",
                    feedUrl: element.url,
                    mode: "fullscreen",
                    enableVoting: true
                };

                // for Netmetrix
                Twenty.event.dispatch({
                    type: "slidefullscreen"
                });
                Twenty.app.controller.openMedia("slideshow", mediaProps);
            };
            if (el.type === "video") {
                if (this.props.type === "video") {
                    icon = "btn btn-play icon icon-play";
                } else {
                    icon = "icon icon-video";
                }

                showMedia = function showMedia() {
                    var mediaProps = {
                        mediatype: "video",
                        videoID: element.id,
                        videoTitle: element.title,
                        closeFunc: function closeFunc() {
                            Twenty.dom.allowWindowScroll();
                            Twenty.app.controller.unloadFullscreenMedia();
                        }
                    };
                    Twenty.app.controller.openMedia("video", mediaProps);
                };
            }
            if (el.communityobject) {
                if (this.props.data[i].type !== "video") {
                    likes = React.createElement(
                        "span",
                        { className: "icon icon-medialist icon-thumbs-up" },
                        el.communityobject.thumbs_up
                    );
                    dislikes = React.createElement(
                        "span",
                        { className: "icon icon-medialist icon-thumbs-down" },
                        el.communityobject.thumbs_down
                    );
                }
            }
            return React.createElement(
                "div",
                { className: "medialist-item", onClick: showMedia, key: i },
                React.createElement(
                    "div",
                    { className: "img-wrapper", style: { backgroundImage: "url(" + el.thumbnail_mob_quad + ")" } },
                    React.createElement("span", { className: "icon " + icon })
                ),
                React.createElement(
                    "div",
                    { className: "txt-wrapper" },
                    React.createElement(
                        "p",
                        { className: "truncate-multiline" },
                        el.title
                    ),
                    likes,
                    dislikes
                )
            );
        }.bind(this);

        return React.createElement(
            "div",
            { className: "medialist-items" },
            this.props.data.map(createList)
        );
    }
});

/**
 * @method Twenty.Components.medialist
 * @memberof Twenty.Components
 * @description the element which shows all the videos and slideshows, in an infinity horizontal scroll, on the front page. rendered in the story list when story type is "media".
 * @param {Object} data data object
 * @param {Object} data.items items object
 * @param {Object[]} data.items.elements array of objects
 * @param {string} data.items.nextpage feed url to the next page. can be next page of an infinity scroll.
 */

/* istanbul ignore next */
Twenty.Components.medialist = createReactClass({
    displayName: "medialist",


    myNameIs: "medialist",

    getInfiniteScroll: function getInfiniteScroll() {
        var _this38 = this;

        Twenty.datamodel.runAJAXRequest({
            url: this.state.nextpage,
            dataType: "json",
            success: function success(result) {
                if (!result) {
                    _this38.setState({
                        items: { items: [] },
                        nextpage: ""
                    });
                } else {
                    var oldResultsList = _this38.state.items,
                        newResultsList = oldResultsList.concat(result.content.items.item);

                    _this38.setState({
                        items: newResultsList,
                        nextpage: result.content.nextpage
                    });

                    $("img").unveil(100);
                }
            }
        });
    },

    getDefaultProps: function getDefaultProps() {
        return {
            type: "default"
        };
    },

    getInitialState: function getInitialState() {
        return {
            items: this.props.type === "video" ? this.props.data.items[0].elements.slice(1) : this.props.data.items[0].elements,
            nextpage: this.props.data.items[0].nextpage
        };
    },

    render: function render() {
        var header = React.createElement(
            "header",
            null,
            React.createElement(
                "h2",
                { className: "title" },
                React.createElement(Twenty.i18n.str, { textref: "medialist.title" })
            )
        ),
            mediaListClasses = "media-list";

        if (this.props.type === "video") {
            mediaListClasses = "media-list video-list";
        }

        return React.createElement(
            "section",
            { className: mediaListClasses },
            this.props.showHeader && header,
            React.createElement(
                "article",
                { className: "horizontal-scrolling" },
                React.createElement(Twenty.Components.medialistItems, { type: this.props.type, data: this.state.items }),
                React.createElement(Twenty.Components.infinity, { loadFunction: this.getInfiniteScroll, type: "horizontal" })
            )
        );
    }
});

/**
 * @method Twenty.Components.meteonews
 * @memberof Twenty.Components
 */
/* istanbul ignore next */

Twenty.Components.meteonews = createReactClass({
    displayName: "meteonews",


    myNameIs: "meteonews",

    handleClick: function handleClick() {
        Twenty.app.controller.loadWeatherPage();
    },

    render: function render() {
        return React.createElement(
            "div",
            { className: "meteonews" },
            React.createElement(
                "header",
                { className: "categorytitle" },
                React.createElement(
                    "h1",
                    { className: "category-text clickable", onClick: this.handleClick },
                    React.createElement(
                        "span",
                        null,
                        this.props.data.items[0].title
                    ),
                    React.createElement("span", { className: "icon icon-button-arrow" })
                )
            ),
            this.props.data.items[0].meteonews.forecasts.map(function (element, i) {
                var imgsrc, shortdateLocale;
                imgsrc = "//www.tagesanzeiger.ch/route/mobileapp/ressources/icons/weather/k_" + Twenty.core.zeroFill(element.symbol_code) + ".png";
                shortdateLocale = element.end_timestamp && new Date(new Date(element.end_timestamp).valueOf() - 1000 * 60 * 60 * 24).toLocaleDateString("de-CH", { weekday: "short" });

                return React.createElement(
                    "article",
                    { key: i },
                    element.symbol_code && React.createElement("img", { src: imgsrc }),
                    shortdateLocale && React.createElement(
                        "div",
                        { className: "temperature" },
                        React.createElement(
                            "span",
                            null,
                            shortdateLocale
                        ),
                        React.createElement(
                            "span",
                            { className: "temp_value" },
                            element.temperature_avg,
                            element.temperature_avg_unit
                        )
                    )
                );
            }, this)
        );
    }
});

/**
 * @name livetickermobile2form
 * @memberof Twenty.Components
 * @description Show a form component for live chat feature
 */
Twenty.Components.livetickermobile2form = createReactClass({
    displayName: "livetickermobile2form",


    myNameIs: "livetickermobile2form",

    shouldComponentUpdate: function shouldComponentUpdate() {
        return false;
    },

    render: function render() {
        return React.createElement(Twenty.Components.form.formelement, { deactivateDecode: "true", key: Twenty.core.getUniqueKey("formelement"), data: this.props.data, enctype: "application/json", method: "PUT", cssClass: "form" });
    }
});

/**
 * @name livetickermobile2message
 * @memberof Twenty.Components
 * @description Show a live message
 */
Twenty.Components.livetickermobile2message = createReactClass({
    displayName: "livetickermobile2message",


    myNameIs: "livetickermobile2message",

    renderInlineElements: function renderInlineElements(message) {
        var textParts = message.text_parts.map(function (textPart, index) {
            if (typeof textPart === "string") {
                return React.createElement("div", { key: index, dangerouslySetInnerHTML: { __html: textPart } });
            }
            var inlineElements = message.inline_elements.filter(function (element) {
                return element.id === textPart.id;
            });

            if (inlineElements && inlineElements.length > 0) {
                var inlineElement = inlineElements[0];
                inlineElement = Twenty.datamodel.mapInlineElements(inlineElement);
                return React.createElement(Twenty.Components.articleElement, { key: index, nextElement: inlineElement });
            }

            return React.createElement(Twenty.Components.emptycomponent, { key: Twenty.core.getUniqueKey("emptycomponent") });
        });
        this.setState({ textParts: textParts });
    },

    handlePictureClick: function handlePictureClick() {
        this.setState({ zoompicture: !this.state.zoompicture });
    },

    getInitialState: function getInitialState() {
        return {
            markedAsChangedTimeout: null,
            renderInlineElementsCallbacks: [],
            ignoreChangedsInProperties: ["sort", "updated_at", "received_at", "inline_elements", "text_parts", "refresh", "cache"],
            markedAsChanged: false,
            zoompicture: false,
            textParts: []
        };
    },

    componentWillMount: function componentWillMount() {
        this.renderInlineElements(this.props.message);
    },

    componentDidMount: function componentDidMount() {
        window.twttr && window.twttr.widgets.load(document.getElementById("message_" + this.props.message.id));
        window.instgrm && window.instgrm.Embeds.process();
    },

    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        if (nextState.markedAsChanged !== this.state.markedAsChanged || nextState.zoompicture !== this.state.zoompicture) {
            return true;
        }
        return !(Twenty.core.shallowCompare(this.props, nextProps) && Twenty.core.shallowCompare(this.state, nextState));
    },

    componentWillUpdate: function componentWillUpdate(nextProps) {
        if (this.props.message.text !== nextProps.message.text) {
            return this.renderInlineElements(nextProps.message);
        }
    },

    componentDidUpdate: function componentDidUpdate() {
        window.twttr && window.twttr.widgets.load(document.getElementById("message_" + this.props.message.id));
        window.instgrm && window.instgrm.Embeds.process();
    },

    render: function render() {
        var classMessage = ["livetickermobile2message"],
            classPicture = ["picture"],
            message = this.props.message;

        if (this.state.markedAsChanged) {
            classMessage.push("changed");
        }
        if (this.state.zoompicture) {
            classPicture.push("zoom");
        }

        return React.createElement(
            "li",
            { className: classMessage.join(" "), id: "message_" + message.id, key: "message_" + message.id },
            React.createElement(
                "div",
                { className: "message-header" },
                message.title && !message.icon_class_name && React.createElement(
                    "span",
                    { className: "title" },
                    message.title
                ),
                message.hasMinuteOfPlay && React.createElement(
                    "span",
                    { className: "time" },
                    message.minute_of_play,
                    "'"
                ),
                message.icon_class_name && React.createElement("span", { className: "spriteIcon " + message.icon_class_name }),
                message.icon_class_name && React.createElement(
                    "span",
                    { className: "title" },
                    message.title
                ),
                message.hasScore === 0 && React.createElement(
                    "span",
                    { className: "score" },
                    message.score_home,
                    ":",
                    message.score_visitor
                )
            ),
            React.createElement(
                "div",
                { className: "text" },
                message.picture_small_url && React.createElement("img", { src: message.picture_small_url, className: classPicture.join(" "), onClick: this.handlePictureClick }),
                this.state.textParts
            ),
            React.createElement("div", { className: "clear" })
        );
    }
});

/**
 * @name mobile2liveticker
 * @memberof Twenty.Components
 * @description Show live message from a mobile2 (NN) feed
 */
Twenty.Components.mobile2liveticker = createReactClass({
    displayName: "mobile2liveticker",


    myNameIs: "mobile2liveticker",

    config: {
        iconClasspenalty: "sprite-liveticker-penalty",
        iconClassyellow_card: "sprite-liveticker-yellowCard",
        iconClassred_card: "sprite-liveticker-redCard",
        iconClass_yellow_red_card: "sprite-liveticker-yellowRedCard",
        iconClassgoal: "sprite-liveticker-goal",
        iconClassstart: "sprite-liveticker-startEnd",
        iconClassend: "sprite-liveticker-startEnd",
        iconClasshockey_end: "sprite-liveticker-hockeyEnd",
        iconClasshockey_goal: "sprite-liveticker-hockeyGoal",
        iconClasshockey_third_end: "sprite-liveticker-hockeyThirdEnd",
        iconClassmatchpoint: "sprite-liveticker-matchpoint",
        iconClasssetpoint: "sprite-liveticker-setpoint",
        iconClassbreakpoint: "sprite-liveticker-breakpoint",
        iconClasssubstitution: "sprite-liveticker-substitution"
    },

    fetchWholeFeed: function fetchWholeFeed() {
        var _this39 = this;

        var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        Twenty.datamodel.runAJAXRequest({
            url: Twenty.env.getServer("api") + "/livetickers/" + this.props.tickerid + "?type=preview",
            dataType: "json",
            success: function success(data) {
                _this39.setState({
                    isActive: data.liveticker.active,
                    orderBy: data.liveticker.order_by,
                    hasQuestionForm: data.liveticker.question_list && data.liveticker.question_list.active ? true : false,
                    questionListId: data.liveticker.question_list ? data.liveticker.question_list.id : null
                });
                _this39.formData = {
                    data: [{
                        form: {
                            attributes: {
                                action: Twenty.env.getServer("api") + "/questions/" + _this39.state.questionListId,
                                payloadParams: {
                                    question: {
                                        city: "{city}",
                                        firstname: "{firstname}",
                                        lastname: "{lastname}",
                                        question: "{question}"
                                    }
                                }
                            }
                        },
                        id: _this39.state.questionListId,
                        items: [{
                            attributes: {
                                maxlength: 800
                            },
                            name: "question",
                            placeholder: Twenty.i18n.getString("mobile2liveticker.formData.question"),
                            required: true,
                            rows: 3,
                            type: "area"
                        }, {
                            attributes: {
                                maxlength: 100
                            },
                            col: 6,
                            name: "firstname",
                            placeholder: Twenty.i18n.getString("mobile2liveticker.formData.firstName"),
                            required: true,
                            type: "text"
                        }, {
                            attributes: {
                                maxlength: 100
                            },
                            col: 6,
                            name: "lastname",
                            placeholder: Twenty.i18n.getString("mobile2liveticker.formData.lastName"),
                            required: true,
                            type: "text"
                        }, {
                            attributes: {
                                maxlength: 100
                            },
                            col: 8,
                            name: "city",
                            placeholder: Twenty.i18n.getString("mobile2liveticker.formData.city"),
                            required: true,
                            type: "text"
                        }, {
                            value: Twenty.i18n.getString("mobile2liveticker.formData.infoText"),
                            type: "label"
                        }],
                        meta: {
                            openPlain: true,
                            openCollapsed: false,
                            remainVisibleAfterSubmit: true,
                            REQMSG: Twenty.i18n.getString("mobile2liveticker.meta.reqmsg"),
                            SUBMIT: Twenty.i18n.getString("mobile2liveticker.meta.submit"),
                            successtxt: Twenty.i18n.getString("mobile2liveticker.meta.successtxt"),
                            title: "Live-Chat",
                            type: 1
                        }
                    }]
                };

                // do update every 3 sec max if not defined in the feed a higher value
                _this39.refetchIntervalInMs = Math.max(3000, data.liveticker.interval_ms);
                _this39.livetickerId = data.liveticker.interval_ms;

                if (callback) {
                    callback();
                }
            },
            error: function error() {
                console.log("error");
            }
        });
    },

    fetchMessageUpdates: function fetchMessageUpdates() {
        var _this40 = this;

        var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        if (this.isFetchingMessageUpdates) {
            return true;
        }
        this.isFetchingMessageUpdates = true;

        var fetchUpdatesSince = this.lastRequestedAt || 0;

        Twenty.datamodel.runAJAXRequest({
            url: Twenty.env.getServer("api") + "/livetickers/" + this.props.tickerid + "/liveticker_message_updates/" + fetchUpdatesSince,
            dataType: "json",
            success: function success(data) {
                _this40.timeNow = Date.now();
                _this40.lastRequestedAt = data.liveticker_message_updates.request_time;

                var timeDiffClientServer = _this40.timeNow - _this40.lastRequestedAt;

                data.liveticker_message_updates.liveticker_messages.map(function (message) {
                    message.updated_at = message.updated_at + timeDiffClientServer;
                    message.received_at = _this40.timeNow;
                });

                if (data.liveticker_message_updates.liveticker_messages.length) {
                    _this40.setState({
                        messages: _this40.handleMessages(data.liveticker_message_updates.liveticker_messages),
                        isLoading: false
                    });
                } else {
                    _this40.setState({ isLoading: false });
                }

                if (callback) {
                    callback();
                }
            }
        }).complete(function () {
            _this40.isFetchingMessageUpdates = false;
        });
    },

    handleMessages: function handleMessages(messages) {
        var _this41 = this;

        var updatedMessages = [].concat(_toConsumableArray(this.state.messages));

        messages.forEach(function (message) {
            return _this41.handleMessage(message, updatedMessages);
        });

        this.sortMessageArray(updatedMessages);

        return updatedMessages;
    },

    handleMessage: function handleMessage(message, messages) {
        if (message.released) {
            if (message.updated_at > this.lastUpdatedAt) {
                this.lastUpdatedAt = message.updated_at;
            }
            message.icon_class_name = this.config["iconClass" + (message.icon_name ? message.icon_name : "")];
            message.hasScore = message.score_home && message.score_visitor;
            message.hasMinuteOfPlay = message.minute_of_play ? true : false;
        }

        if (message.id in this.messagesIndex) {
            if (!message.released) {
                this.deleteMessage(message, messages);
            }

            this.updateMessage(message, messages);
        } else if (message.released) {
            this.createMessage(message, messages);
        }
    },

    createMessage: function createMessage(message, messages) {
        messages.push(message);

        this.messagesIndex[message.id] = message;
        this.handleInlineElements(message);
    },

    updateMessage: function updateMessage(message, messages) {
        // TODO: Message not updated here
        var index = this.getMessageIndexById(message.id, messages),
            prevMessage = this.messagesIndex[message.id];

        messages[index] = message;

        // If we update the message text, the inlineElements of the old-/prevMessage have to be deleted
        // before rendering the inlineElements of the new message
        if (prevMessage.text !== message.text) {
            this.deleteInlineElementsIndex(prevMessage);
        }
        this.messagesIndex[message.id] = message;
        this.handleInlineElements(message);
    },

    deleteMessage: function deleteMessage(message, messages) {
        var index = this.getMessageIndexById(message.id, messages);

        messages.splice(index, 1);
        delete this.messagesIndex[message.id];
        this.deleteInlineElementsIndex(message);
    },

    handleInlineElements: function handleInlineElements(message) {
        var _this42 = this;

        if (message.inline_elements.length) {
            message.inline_elements.forEach(function (inlineElement) {
                _this42.inlineElementsIndex[inlineElement.id] = inlineElement;
            });
        }

        message.text_parts = this.extractInlineElements(message.text, message.inline_elements);
    },

    deleteInlineElementsIndex: function deleteInlineElementsIndex(message) {
        var _this43 = this;

        if (message.inline_elements.length) {
            message.inline_elements.foreach(function (inlineElement) {
                delete _this43.inlineElementsIndex[inlineElement.id];
            });
        }
    },

    extractInlineElements: function extractInlineElements(text) {
        var parts = [],
            regexp = /<!--{{inline_element\(['"]?([a-fA-F0-9]+)['"]?\)}}-->/g;

        if (typeof text === "string") {
            var match = regexp.exec(text);
            var index = 0;

            while (match) {
                if (match.index > index) {
                    parts.push(match.input.substring(index, match.index));
                }
                if (match[1] in this.inlineElementsIndex) {
                    parts.push(this.inlineElementsIndex[match[1]]);
                }
                index = match.index + match[0].length;
                match = regexp.exec(text);
            }

            if (index < text.length) {
                parts.push(text.substring(index, text.length));
            }
        }
        return parts;
    },

    sortMessageArray: function sortMessageArray(messages) {
        var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.orderBy;

        var numDirection = direction === "desc" ? -1 : 1;
        return messages.sort(function (elementA, elementB) {
            return (elementA.sort - elementB.sort) * numDirection;
        });
    },

    getMessageIndexById: function getMessageIndexById(messageId, messages) {
        return messages.findIndex(function (message) {
            return message.id === messageId;
        });
    },

    listenForMessageUpdates: function listenForMessageUpdates() {
        var _this44 = this;

        if (this.state.isActive) {
            this.listenForMessageUpdatesTimeout = setTimeout(function () {
                _this44.fetchMessageUpdates(function () {
                    _this44.fetchWholeFeed();
                    _this44.listenForMessageUpdates();
                });
            }, this.refetchIntervalInMs);
        }
    },

    /**
     * get a string with the age of the ticker
     * @param  {string} {number}    date string or timestamp
     * @return {string}             String with the age of ticker
     */
    getTickerTextAge: function getTickerTextAge(date) {
        return Twenty.i18n.getString("mobile2liveticker.lastUpdatedAtText") + " " + Twenty.core.getAge(date);
    },

    useButton: function useButton() {
        return this.limitStyle === "button";
    },

    useLoader: function useLoader() {
        return this.limitStyle === "scroller";
    },

    isLimitReached: function isLimitReached() {
        return this.state.limit >= this.state.messages.length;
    },

    increaseLimit: function increaseLimit() {
        return this.setState({
            limit: Math.min(this.state.limit + this.limitIncreaseValue, this.state.messages.length)
        });
    },

    getInitialState: function getInitialState() {
        return {
            isActive: false,
            isLoading: true,
            messages: [],
            limit: 4,
            orderBy: "desc",
            lastUpdatedAtText: "",
            hasQuestionForm: false,
            questionListId: null
        };
    },

    componentWillMount: function componentWillMount() {
        this.messagesIndex = {};
        this.visibleMessages = [];
        this.updateTimestampInterval = null;
        this.livetickerId = false;
        this.lastRequestedAt = null;
        this.lastUpdatedAt = false;
        this.lastUpdatedAtText = "";
        this.isFetchingMessageUpdates = false;
        this.refetchIntervalInMs = null;
        this.inlineElementsIndex = {};
        this.limitIncreaseValue = 5;
        this.initialLimit = 5;
        this.limitStyle = "scroller";
        this.timeNow = Date.now();
    },

    componentDidMount: function componentDidMount() {
        var _this45 = this;

        this.fetchWholeFeed(function () {
            _this45.fetchMessageUpdates(function () {
                _this45.listenForMessageUpdates();
            });
        });
    },

    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        var _this46 = this;

        return nextState.messages.length > 0 && Object.keys(nextState).reduce(function (should, key) {
            return should || nextState[key] !== _this46.state[key];
        }, false);
    },

    componentWillUpdate: function componentWillUpdate(nextProps, nextState) {
        var _this47 = this;

        if (this.state.orderBy !== nextState.orderBy) {
            this.sortMessageArray(nextState.messages, nextState.orderBy);
        }

        this.visibleMessages = nextState.messages.slice(0, nextState.limit);

        if (nextState.isActive) {
            if (this.lastUpdatedAtText !== null && this.updateTimestampInterval === null) {
                nextState.lastUpdatedAtText = this.getTickerTextAge(this.lastUpdatedAt);

                this.updateTimestampInterval = setInterval(function () {
                    return _this47.setState({
                        lastUpdatedAtText: _this47.getTickerTextAge(_this47.lastUpdatedAt)
                    });
                }, 1000);

                return this.updateTimestampInterval;
            }
        } else if (this.updateTimestampInterval != null) {
            clearInterval(this.updateTimestampInterval);
            this.updateTimestampInterval = null;
        }
    },

    componentWillUnmount: function componentWillUnmount() {
        clearTimeout(this.listenForMessageUpdatesTimeout);
        clearInterval(this.updateTimestampInterval);
    },

    render: function render() {
        var _this48 = this;

        var classes = "mobile2liveticker";
        var config = {},
            messages = [];

        this.visibleMessages.forEach(function (message) {
            messages.push(React.createElement(Twenty.Components.livetickermobile2message, { key: message.id, message: message, config: config, parentState: _this48.state }));
        });

        classes = this.state.isLoading ? "loading" : "";
        classes = this.state.isActive ? "active" : "";
        return React.createElement(
            "div",
            { id: "mobile2liveticker", className: classes },
            this.state.hasQuestionForm && this.formData && React.createElement(Twenty.Components.livetickermobile2form, { data: this.formData }),
            React.createElement(
                "div",
                { className: "liveticker-header" },
                this.props.scoreboardId && React.createElement(Twenty.Components.mobile2scoreboard, { scoreboardId: this.props.scoreboardId }),
                this.state.isLoading && React.createElement(
                    "h2",
                    { className: "loading-caption" },
                    React.createElement(Twenty.i18n.str, { textref: "mobile2liveticker.loading" })
                ),
                !this.state.isLoading && this.state.isActive && React.createElement(
                    "h2",
                    { className: "active-caption" },
                    React.createElement(
                        "div",
                        { className: "waiter" },
                        React.createElement(
                            "div",
                            { className: "snake-loader" },
                            React.createElement("i", null),
                            React.createElement("i", null),
                            React.createElement("i", null),
                            React.createElement("i", null),
                            React.createElement("i", null)
                        )
                    ),
                    React.createElement(Twenty.i18n.str, { textref: "mobile2liveticker.auto_refresh" }),
                    React.createElement(
                        "span",
                        { className: "last-updated-at" },
                        this.state.lastUpdatedAtText
                    )
                )
            ),
            React.createElement(
                "ul",
                { className: "messages" },
                messages
            ),
            React.createElement(
                "div",
                { className: "liveticker-footer" },
                !this.isLimitReached() && this.useLoader() && !this.state.isLoading && React.createElement(
                    "div",
                    { className: "waiter center" },
                    React.createElement(
                        "div",
                        { className: "snake-loader" },
                        React.createElement("i", null),
                        React.createElement("i", null),
                        React.createElement("i", null),
                        React.createElement("i", null),
                        React.createElement("i", null)
                    ),
                    React.createElement(Twenty.Components.infinity, { loadFunction: this.increaseLimit })
                ),
                !this.isLimitReached() && this.useButton() && React.createElement(
                    "button",
                    { onClick: this.increaseLimit },
                    React.createElement(Twenty.i18n.str, { textref: "mobile2liveticker.moreRead" })
                )
            )
        );
    }
});

/**
 * @name mobile2scoreboard
 * @memberof Twenty.Components
 * @description Show live message from a mobile2 (NN) feed
 */
Twenty.Components.mobile2scoreboard = createReactClass({
    displayName: "mobile2scoreboard",

    myNameIs: "mobile2scoreboard",
    updateTimestampInterval: null,

    fetchWholeFeed: function fetchWholeFeed() {
        var _this49 = this;

        var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        Twenty.datamodel.runAJAXRequest({
            url: Twenty.env.getServer("api") + "/scoreboards/" + this.props.scoreboardId,
            dataType: "json"
        }).complete(function () {
            _this49.isFetchingWholeFeed = false;
        }).success(function (data) {
            if (data.scoreboard.type === "soccer") {
                _this49.setState({
                    typeScoreboard: data.scoreboard.type,
                    nameHome: data.scoreboard.teamsport_result.name_home.toUpperCase(),
                    iconHome: data.scoreboard.teamsport_result.icon_home,
                    scoreHome: data.scoreboard.teamsport_result.score_home,
                    eventHome: data.scoreboard.teamsport_result.events_home,
                    nameVisitor: data.scoreboard.teamsport_result.name_visitor.toUpperCase(),
                    iconVisitor: data.scoreboard.teamsport_result.icon_visitor,
                    scoreVisitor: data.scoreboard.teamsport_result.score_visitor,
                    eventVisitor: data.scoreboard.teamsport_result.events_visitor,
                    eventScoreboardPrepared: _this49.eventPreparer(data.scoreboard.teamsport_result.events_home, data.scoreboard.teamsport_result.events_visitor, true),
                    additionalResults: _this49.additionalResults(data.scoreboard.additional_results) || []
                });
            }
            if (data.scoreboard.type === "hockey") {
                _this49.setState({
                    typeScoreboard: data.scoreboard.type,
                    nameHome: data.scoreboard.teamsport_result.name_home.toUpperCase(),
                    iconHome: data.scoreboard.teamsport_result.icon_home,
                    scoreHome: data.scoreboard.teamsport_result.score_home,
                    eventHome: data.scoreboard.teamsport_result.events_home,
                    nameVisitor: data.scoreboard.teamsport_result.name_visitor.toUpperCase(),
                    iconVisitor: data.scoreboard.teamsport_result.icon_visitor,
                    scoreVisitor: data.scoreboard.teamsport_result.score_visitor,
                    eventVisitor: data.scoreboard.teamsport_result.events_visitor,
                    eventScoreboardPrepared: _this49.eventPreparer(data.scoreboard.teamsport_result.events_home, data.scoreboard.teamsport_result.events_visitor, false),
                    additionalResults: _this49.additionalResults(data.scoreboard.additional_results) || []
                });
            }
            if (data.scoreboard.type === "tennis") {
                _this49.setState({
                    typeScoreboard: data.scoreboard.type,
                    playerLeft: data.scoreboard.tennis_result.player_left,
                    playerRight: data.scoreboard.tennis_result.player_right,
                    numberOfSets: data.scoreboard.tennis_result.number_of_sets,
                    initialServer: data.scoreboard.tennis_result.initial_server,
                    iconHome: data.scoreboard.tennis_result.icon_home,
                    scoreHome: data.scoreboard.tennis_result.score_home,
                    winner: data.scoreboard.tennis_result.winner,
                    sets: data.scoreboard.tennis_result.sets,
                    setsLeft: _this49.tennisPlayerScorePreparer(data.scoreboard.tennis_result.sets, "left"),
                    setsRight: _this49.tennisPlayerScorePreparer(data.scoreboard.tennis_result.sets, "right"),
                    setsHeader: _this49.tennisDescriptionPreparer(data.scoreboard.tennis_result.sets)
                });
            }

            if (callback) {
                callback();
            }
        }).error(function () {
            console.log("error");
        });
    },

    additionalResults: function additionalResults(additionalResultsData) {
        var resultHTMLStructure = "";
        if (additionalResultsData && additionalResultsData.length) {
            resultHTMLStructure += "<div class='additional-results'>";
            for (var i = 0; i < additionalResultsData.length; i++) {
                resultHTMLStructure += "<div class='other-result'><span class='players'>" + additionalResultsData[i].name_home + " - " + additionalResultsData[i].name_visitor + "</span><span class='scores'>" + additionalResultsData[i].score_home + " : " + additionalResultsData[i].score_visitor + "</span></div>";
            }
            resultHTMLStructure += "</div>";
        }
        return resultHTMLStructure;
    },

    eventPreparer: function eventPreparer(eventDataHome, eventDataVisitor, addIcon) {
        var returnEventHTMLStructure = "";
        returnEventHTMLStructure += "<div class='home-event'>";
        for (var i = 0; i < eventDataHome.length; i++) {
            if (addIcon) {
                returnEventHTMLStructure += "<div><span class='goal-symbol'></span><span>" + eventDataHome[i].minute + ".</span><span>" + eventDataHome[i].event + "</span></div>";
            } else {
                returnEventHTMLStructure += "<div><span>" + eventDataHome[i].minute + ".</span><span>" + eventDataHome[i].event + "</span></div>";
            }
        }
        returnEventHTMLStructure += "</div>";
        returnEventHTMLStructure += "<div class='visitor-event'>";
        for (var _i3 = 0; _i3 < eventDataVisitor.length; _i3++) {
            if (addIcon) {
                returnEventHTMLStructure += "<div><span class='goal-symbol'></span><span>" + eventDataVisitor[_i3].minute + ".</span><span>" + eventDataVisitor[_i3].event + "</span></div>";
            } else {
                returnEventHTMLStructure += "<div><span>" + eventDataVisitor[_i3].minute + ".</span><span>" + eventDataVisitor[_i3].event + "</span></div>";
            }
        }
        returnEventHTMLStructure += "</div>";
        return returnEventHTMLStructure;
    },

    tennisPlayerScorePreparer: function tennisPlayerScorePreparer(setScoreArray, playerSide) {
        var returnSetScoreHTMLStructure = "";
        for (var i = 0; i < setScoreArray.length; i++) {
            if (setScoreArray[i].winner === "player_left" && playerSide === "left") {
                returnSetScoreHTMLStructure += "<div class='set winner'>";
            } else if (setScoreArray[i].winner === "player_right" && playerSide === "right") {
                returnSetScoreHTMLStructure += "<div class='set winner'>";
            } else {
                returnSetScoreHTMLStructure += "<div class='set'>";
            }
            if (playerSide === "left") {
                returnSetScoreHTMLStructure += "  " + setScoreArray[i].score_left;
            } else {
                returnSetScoreHTMLStructure += "  " + setScoreArray[i].score_right;
            }
            returnSetScoreHTMLStructure += "</div>";
        }
        return returnSetScoreHTMLStructure;
    },

    tennisDescriptionPreparer: function tennisDescriptionPreparer(setScoreArray) {
        var descriptionHTMLStructure = "";

        for (var i = 1; i < setScoreArray.length + 1; i++) {
            descriptionHTMLStructure += "<div class='set-title'>";
            descriptionHTMLStructure += i + ".S";
            descriptionHTMLStructure += "</div>";
        }
        return descriptionHTMLStructure;
    },

    getInitialState: function getInitialState() {
        return {};
    },

    componentWillMount: function componentWillMount() {
        var _this50 = this;

        // add the logic here to stop/pause the score boards
        if (this.updateTimestampInterval === null) {
            this.updateTimestampInterval = setInterval(function () {
                _this50.fetchWholeFeed();
            }, 3000);
        }
    },

    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        var key = void 0;
        for (key in nextState) {
            if (nextState[key] !== this.state[key]) {
                return true;
            }
        }
        return false;
    },

    render: function render() {
        return React.createElement(
            "div",
            { id: "mobile2scoreboard" },
            (this.state.typeScoreboard === "soccer" || this.state.typeScoreboard === "hockey") && React.createElement(
                "div",
                { className: "teamsport" },
                React.createElement(
                    "div",
                    { className: "main-scoreboard" },
                    React.createElement(
                        "div",
                        { className: "home" },
                        React.createElement("img", { className: "home-icon", src: this.state.iconHome }),
                        React.createElement(
                            "div",
                            { className: "home-name" },
                            this.state.nameHome
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "score" },
                        this.state.scoreHome,
                        " : ",
                        this.state.scoreVisitor
                    ),
                    React.createElement(
                        "div",
                        { className: "visitor" },
                        React.createElement("img", { className: "visitor-icon", src: this.state.iconVisitor }),
                        React.createElement(
                            "div",
                            { className: "visitor-name" },
                            this.state.nameVisitor
                        )
                    )
                ),
                React.createElement("div", { className: "event-scoreboard", dangerouslySetInnerHTML: { __html: this.state.eventScoreboardPrepared } }),
                this.state.additionalResults && this.state.additionalResults.length !== 0 && this.state.additionalResults !== "" && React.createElement(
                    "div",
                    { className: "additional-results-board" },
                    React.createElement(
                        "div",
                        { className: "additional-results-title" },
                        React.createElement(Twenty.i18n.str, { textref: "mobile2scoreboard.additionalResultsTitle" })
                    ),
                    React.createElement("div", { className: "additional-results", dangerouslySetInnerHTML: { __html: this.state.additionalResults } })
                )
            ),
            this.state.typeScoreboard === "tennis" && React.createElement(
                "div",
                { className: "tennis" },
                React.createElement(
                    "div",
                    { className: "main-scoreboard" },
                    React.createElement("div", { className: "description-row", dangerouslySetInnerHTML: { __html: this.state.setsHeader } }),
                    React.createElement(
                        "div",
                        { className: "player-left-row" },
                        React.createElement(
                            "div",
                            { className: "player-left" },
                            this.state.playerLeft
                        ),
                        React.createElement("div", { className: "score-left", dangerouslySetInnerHTML: { __html: this.state.setsLeft } })
                    ),
                    React.createElement(
                        "div",
                        { className: "player-right-row" },
                        React.createElement(
                            "div",
                            { className: "player-right" },
                            this.state.playerRight
                        ),
                        React.createElement("div", { className: "score-right", dangerouslySetInnerHTML: { __html: this.state.setsRight } })
                    )
                )
            )
        );
    }
});

/**
 * @method Twenty.Components.newsletter
 * @memberof Twenty.Components
 * @description displays an articleElement of the type newsletter and provides a form to register
 * @param {Object} data - Data for the newsletter element passed by {@link Twenty.Components.articleElement}
**/
Twenty.Components.newsletter = createReactClass({
    displayName: "newsletter",


    myNameIs: "newsletter",

    componentWillMount: function componentWillMount() {
        this.postParams = {
            opt_ins: [{
                optin_id: this.props.data.optin_id,
                service_id: this.props.data.service_id,
                valid_from: new Date().getTime()
            }],
            origin: "mobile",
            source: this.props.data.optin_id
        };

        this.formData = {
            data: [{
                form: {
                    attributes: {
                        action: Twenty.env.getServer("newsletter")
                    },
                    headers: {
                        "X-Requested-With": "XMLHttpRequest"
                    }
                },
                id: "1",
                items: [{
                    attributes: {
                        maxlength: 100
                    },
                    name: "email",
                    placeholder: Twenty.i18n.getString("newsletter.emailPlaceholder"),
                    required: true,
                    type: "email",
                    validate: {
                        format: "name@domain.ch",
                        pattern: "^[a-zA-Z0-9_.-]{1,}@[a-zA-Z0-9]{1,}[a-zA-Z0-9.-]{1,}\.[a-zA-Z]{2,}"
                    }
                }],
                meta: {
                    openPlain: true,
                    openCollapsed: false,
                    remainVisibleAfterSubmit: false,
                    REQMSG: Twenty.i18n.getString("newsletter.emailError"),
                    SUBMIT: Twenty.i18n.getString("newsletter.sendButtonText"),
                    successtxt: Twenty.i18n.getString("newsletter.thankYouMessage"),
                    title: "",
                    type: 1
                }
            }]
        };
    },

    render: function render() {
        return React.createElement(
            "div",
            { className: "newsletter" },
            React.createElement(
                "h2",
                null,
                this.props.data.title
            ),
            React.createElement(
                "p",
                { className: "lead" },
                this.props.data.lead
            ),
            React.createElement(Twenty.Components.form.formelement, { key: Twenty.core.getUniqueKey("formelement"), data: this.formData, postParams: this.postParams, enctype: "application/json", cssClass: "form" }),
            React.createElement("p", { className: "disclaimer", dangerouslySetInnerHTML: { __html: this.props.data.disclaimer } })
        );
    }
});

/**
 * @method Twenty.Components.nextstoryfooter
 * @memberof Twenty.Components
 * @description If you have access to a story id, you can use component to link to the
 * "next" story.
 * The "next" story is the next one in the last-saved category-like feed. So, a category,
 * or the front.
 * @param {string} data id of the current story.
 */

/* istanbul ignore next */
Twenty.Components.nextstoryfooter = createReactClass({
    displayName: "nextstoryfooter",


    myNameIs: "nextstoryfooter",
    mixins: [Twenty.mixins.pureRender],

    handleClick: function handleClick() {
        var nextStory = Twenty.datamodel.getNextStory(this.props.data, Twenty.app.controller.loadStoryPage);
        if (nextStory) {
            Twenty.event.dispatch({
                type: "storynavigation",
                params: {
                    element: "nextstoryfooter",
                    index: 0
                }
            });

            // linkpulse tracking
            Twenty.event.dispatch({
                type: "userClick",
                params: {
                    clickURL: "story/" + nextStory.id,
                    event: "userClick"
                }
            });
            Twenty.app.controller.loadStoryPage(nextStory);
        }
    },

    render: function render() {
        var downopenbig = "icon icon-down-open-big";

        return React.createElement(
            "footer",
            { className: "nextstoryfooter" },
            React.createElement(
                "h1",
                { className: "next-story-text", onClick: this.handleClick },
                React.createElement(Twenty.i18n.str, { textref: "nextstoryfooter.next" }),
                React.createElement("span", { className: downopenbig })
            )
        );
    }
});

/**
 * @name nxpliveticker
 * @memberof Twenty.Components
 * @description take an nxp liveticker id and magic it into a 20min liveticker by magic.
 */

/* istanbul ignore next */
Twenty.Components.nxpliveticker = createReactClass({
    displayName: "nxpliveticker",


    myNameIs: "nxpliveticker",

    render: function render() {

        var ticker = this.props.tickerid,
            scoreboard = this.props.scoreboard || 0;
        var src = window.location.origin + "/webapp/staticpages/nxplivetickeriframe.html?ticker=" + ticker + (scoreboard ? "&scoreboard=" + scoreboard : "");

        return React.createElement(
            "div",
            { className: "nxpliveticker" },
            React.createElement("iframe", { src: src, className: "autofit", height: "450" })
        );
    }
});

/**
 * The element rendered when we have a story article_elements = inline_poll
 * @memberof Twenty.Components
 */

Twenty.Components.poll = createReactClass({
    displayName: "poll",


    myNameIs: "poll",

    render: function render() {

        var src = this.props.data.url;

        // there is, however, no damn way we are doing this live
        // update: it looks like we are doing this live [bg]
        return React.createElement(
            "div",
            { className: "poll" },
            React.createElement("iframe", { className: "autofit", src: src })
        );
    }
});

/* eslint-disable */
Twenty.Components.ratingHead = createReactClass({
    displayName: "ratingHead",


    myNameIs: "ratingHead",

    switchMode: function switchMode(e) {
        this.props.mode.requestChange(e);
        this.props.refresh();
    },

    render: function render() {

        // Hide description-div if there is no content for it
        var descriptionStyle = this.props.data.subtitle === "" ? { display: "none" } : { display: "block" };

        return React.createElement(
            "div",
            { className: "head" },
            React.createElement(
                "div",
                { className: "content" },
                React.createElement(
                    "div",
                    { className: "title" },
                    React.createElement("img", { className: "logo", src: "./webapp/img/" + this.props.config.lang + "/logo.png" }),
                    React.createElement("div", { className: "text", dangerouslySetInnerHTML: { __html: [this.props.data.title] } }),
                    React.createElement("div", { className: "description", dangerouslySetInnerHTML: { __html: this.props.data.subtitle }, style: descriptionStyle })
                )
            )
        );
    }
});

Twenty.Components.ratingOverview = createReactClass({
    displayName: "ratingOverview",


    myNameIs: "ratingOverview",

    itemClick: function itemClick(item) {
        window.location.href = window.location.href + "?ratingid=" + item.id;
    },

    getInitialState: function getInitialState() {
        return {
            data: []
        };
    },

    componentDidMount: function componentDidMount() {
        Twenty.datamodel.runAJAXRequest({
            url: this.props.config.rating_standart_url + "?cmd=overview",
            dataType: "json",
            success: function (data) {
                this.setState({ data: data });
            }.bind(this)
        });

        this.props.config.$window.scrollTop(0);
    },

    render: function render() {
        var _this51 = this;

        // show loading while we don't have any items in array
        if (this.state.data.length === 0) {
            return React.createElement(
                "div",
                null,
                "Loading..."
            );
        }

        return React.createElement(
            "div",
            { className: "vote" },
            React.createElement(
                "div",
                { className: "itemContainer" },
                this.state.data.items.map(function (item) {
                    return React.createElement(
                        "div",
                        { className: "itemWrapper", key: _this51.props.config._increment++ },
                        React.createElement(
                            "div",
                            { className: "item", onClick: _this51.itemClick.bind(_this51, item) },
                            React.createElement(
                                "div",
                                { className: "img" },
                                React.createElement("img", { src: _this51.props.config.domain + item.teaser })
                            ),
                            React.createElement(
                                "div",
                                { className: "text" },
                                React.createElement("div", { className: item.status === "visible" ? "circle active" : "circle" }),
                                React.createElement(
                                    "div",
                                    { className: "title" },
                                    React.createElement(
                                        "b",
                                        null,
                                        item.title
                                    )
                                )
                            )
                        )
                    );
                })
            ),
            React.createElement(
                "button",
                { className: "btnVote", style: { display: "none" } },
                React.createElement(Twenty.i18n.str, { textref: "rating.vote" })
            )
        );
    }
});

Twenty.Components.ratingStar = createReactClass({
    displayName: "ratingStar",


    myNameIs: "ratingStar",
    render: function render() {
        return React.createElement("div", { className: "star", dangerouslySetInnerHTML: { __html: [this.props.data.startype] },
            onClick: this.props.data.handleStarClick.bind(null, this.props.data.voteId, this.props.data.value) });
    }
});

Twenty.Components.ratingStars = createReactClass({
    displayName: "ratingStars",


    myNameIs: "ratingStars",

    handleStarClick: function handleStarClick(id, value) {
        var $stars = $(".stars[data-id=" + id + "]");
        $stars.data({ id: id, votevalue: value });
        this.setState({ votevalue: value });
        this.props.config.$btnVote.show();
    },

    getInitialState: function getInitialState() {
        return {
            votevalue: 0
        };
    },

    render: function render() {

        var star1 = "&#9733;";
        var star2 = "&#9734;";
        var i, data;

        var genStars = function () {

            var starItems = [];

            for (i = 1; i <= this.props.config.numRatingStars; i++) {
                data = {
                    startype: this.state.votevalue >= i ? star1 : star2,
                    handleStarClick: this.handleStarClick,
                    voteId: this.props.id,
                    value: i
                };
                starItems.push(React.createElement(Twenty.Components.ratingStar, { data: data, key: this.props.config._increment++, config: this.props.config }));
            }

            return starItems;
        }.bind(this);

        return React.createElement(
            "div",
            { className: "stars", "data-id": this.props.id, "data-votevalue": "0" },
            genStars()
        );
    }
});

Twenty.Components.ratingVote = createReactClass({
    displayName: "ratingVote",


    myNameIs: "ratingVote",

    showPic: function showPic(item) {
        this.props.config.lightbox.find(".pic img").attr("src", this.props.config.domain + item.images.big);
        this.props.config.lightbox.show();
    },

    sendVote: function sendVote() {

        var $allSelections,
            ids = [],
            values = [],
            url,
            votevalue;

        // Singlechoice
        if (this.props.data.options.mode === "singleChoice") {
            votevalue = $(".activeItem").attr("data-votevalue");
            url = this.props.config.rating_standart_url + "?cmd=saveVote&ratingid=" + this.props.config.ratingID + "&elementid=" + votevalue;
        }

        // MultipleChoice
        if (this.props.data.options.mode === "multiChoice") {
            $allSelections = $(".activeItem");
            $.each($allSelections, function (index, item) {
                ids.push($(item).attr("data-votevalue"));
            });
            url = this.props.config.rating_standart_url + "?cmd=saveVote&ratingid=" + this.props.config.ratingID + "&type=1&chosenElements=" + ids.toString() + "&elementsToChoose=" + this.props.data.options.maxSelections;
        }

        // Star-Rating
        if (this.props.data.options.mode === "starsRating") {
            $allSelections = $(".stars");
            $.each($allSelections, function (index, item) {
                ids.push($(item).data().id);
                values.push($(item).data().votevalue);
            });
            url = this.props.config.rating_standart_url + "?cmd=saveVote&ratingid=" + this.props.config.ratingID + "&type=2&elements=" + ids.toString() + "&ratings=" + values.toString();
        }

        // Send the data
        Twenty.datamodel.runAJAXRequest({
            url: url,
            success: function () {
                this.showResults();
            }.bind(this),
            error: function error() {
                Twenty.tracking.errorlog({
                    category: "component",
                    action: "rating",
                    label: "React-Rating-SendVote Function failed"
                });
            }
        });
    },

    itemClick: function itemClick(item, e) {
        var $clickedItem = $(e.currentTarget);

        // Singlechoice
        if (this.props.data.options.mode === "singleChoice") {
            // hide all overlays (checkmarks)
            $(".activeItem").removeClass("activeItem").find(".overlay").hide();

            // show overlay for this item
            $clickedItem.addClass("activeItem").find(".overlay").show();
        }

        // MultipleChoice
        if (this.props.data.options.mode === "multiChoice") {
            if (!$clickedItem.hasClass("activeItem")) {
                // don't make clicked item active, if maxSelections is already maxed out
                if ($(".activeItem").length === parseInt(this.props.data.options.maxSelections)) {
                    return;
                }
                $clickedItem.addClass("activeItem").find(".overlay").show();
            } else {
                $clickedItem.removeClass("activeItem").find(".overlay").hide();
            }
        }

        // Show or hide the send button when selection(s) was(where) made
        $(".activeItem").length ? this.props.config.$btnVote.show() : this.props.config.$btnVote.hide();
    },

    showResults: function showResults() {
        var _this52 = this;

        var $info;

        // set cookie
        Twenty.dom.setCookie(this.props.config.cookieName, this.props.config.cookieValue, this.props.config.cookieExpires);

        // scroll to top
        this.props.config.$window.scrollTop(0);

        // show new Info Message
        $info = $(".info");
        $info.hide().html("Danke!").slideDown();

        // show ranking view with a delay
        setTimeout(function () {
            _this52.props.showRanking();
        }, 1500);
    },

    getInitialState: function getInitialState() {
        return {
            activeItems: []
        };
    },

    componentDidMount: function componentDidMount() {
        var _this53 = this;

        this.props.config.$btnVote = $(".btnVote");
        this.props.config.$btnVote.click(function () {
            _this53.props.config.$btnVote.slideUp();
            _this53.sendVote();
        });
    },

    componentDidUpdate: function componentDidUpdate() {
        // console.log( this.state.activeItems );
        // $(lazyloader.init(300, 'replace', 'data-lazyloadcontent'));
    },

    render: function render() {
        var _this54 = this;

        var shuffle, jElement, xElement, i, infoText, infoExtra;

        // shuffle items if randomized option is set
        shuffle = function shuffle(oElement) {
            for (jElement, xElement, i = oElement.length; i; jElement = Math.floor(Math.random() * i), xElement = oElement[--i], oElement[i] = oElement[jElement], oElement[jElement] = xElement) {}
            return oElement;
        };

        if (this.props.data.randomized) {
            shuffle(this.props.data.items);
        }

        // Show different Infotext depending on mode
        infoText = "rating." + this.props.data.options.mode;
        infoExtra = "";

        /* "maxium" not handled
        if(this.props.data.options.mode === 'multiChoice') {
            infoExtra = <Twenty.i18n.str textref="rating.maximum" maxSelections=parseInt(this.props.data.options.maxSelections) />;
        }
        */

        return React.createElement(
            "div",
            { className: "vote" },
            React.createElement(
                "div",
                { className: "info" },
                React.createElement(Twenty.i18n.str, { textref: infoText }),
                " ",
                infoExtra
            ),
            React.createElement(
                "div",
                { className: "itemContainer" },
                this.props.data.items.map(function (item) {
                    if (_this54.props.data.options.mode === "starsRating") {
                        return React.createElement(
                            "div",
                            { className: "itemWrapper", key: _this54.props.config._increment++ },
                            React.createElement(
                                "div",
                                { className: "item" },
                                React.createElement(
                                    "div",
                                    { className: "img" },
                                    React.createElement("img", { src: _this54.props.config.domain + "/" + item.images.small })
                                ),
                                React.createElement(
                                    "div",
                                    { className: "btnPreview", onClick: _this54.showPic.bind(_this54, item) },
                                    "Bild verg\xF6ssern"
                                ),
                                React.createElement(Twenty.Components.ratingStars, { id: item.id, config: _this54.props.config }),
                                React.createElement(
                                    "div",
                                    { className: "text" },
                                    React.createElement("div", { className: "title", dangerouslySetInnerHTML: { __html: [item.text.title] } }),
                                    React.createElement("div", { className: "description", dangerouslySetInnerHTML: { __html: [item.text.description] } })
                                )
                            )
                        );
                    } else {
                        return React.createElement(
                            "div",
                            { className: "itemWrapper", key: _this54.props.config._increment++ },
                            React.createElement(
                                "div",
                                { className: "item", "data-votevalue": item.id, onClick: _this54.itemClick.bind(_this54, item) },
                                React.createElement(
                                    "div",
                                    { className: "img" },
                                    React.createElement(
                                        "div",
                                        { className: "overlay", style: { display: _this54.state.clicked ? "block" : "none" } },
                                        React.createElement("div", { className: "checkmark" }),
                                        React.createElement("div", { className: "background" })
                                    ),
                                    React.createElement("img", { src: _this54.props.config.domain + "/" + item.images.small })
                                ),
                                React.createElement(
                                    "div",
                                    { className: "text" },
                                    React.createElement("div", { className: "title", dangerouslySetInnerHTML: { __html: [item.text.title] } }),
                                    React.createElement("div", { className: "description", dangerouslySetInnerHTML: { __html: [item.text.description] } })
                                )
                            )
                        );
                    }
                })
            ),
            React.createElement(
                "button",
                { className: "btnVote", style: { display: "none" } },
                React.createElement(Twenty.i18n.str, { textref: "rating.vote" })
            )
        );
    }
});

Twenty.Components.ratingRankingItem = createReactClass({
    displayName: "ratingRankingItem",


    myNameIs: "ratingRankingItem",

    getInitialState: function getInitialState() {
        return {
            barWidth: 0
        };
    },

    componentDidMount: function componentDidMount() {
        // set width of bar in percent
        var resizeBar = function () {
            var barWidthInPercent = this.props.data.points / this.props.data.highestRankedPoints * 100;
            this.setState({
                barWidth: $(ReactDOM.findDOMNode(this).find(".barContainer").width() / 100) * barWidthInPercent
            });
        }.bind(this);

        window.addEventListener("resize", function () {
            resizeBar();
        });

        resizeBar();
    },

    render: function render() {
        return React.createElement(
            "div",
            { className: "itemWrapper" },
            React.createElement(
                "div",
                { className: "item" },
                React.createElement(
                    "div",
                    { className: "img" },
                    React.createElement(
                        "div",
                        { className: "rank" },
                        this.props.data.rank
                    ),
                    React.createElement("img", { src: this.props.config.domain + "/" + this.props.data.images.small })
                ),
                React.createElement(
                    "div",
                    { className: "btnPreview", onClick: this.props.showPic.bind(this, this.props.data) },
                    "Bild verg\xF6ssern"
                ),
                React.createElement(
                    "div",
                    { className: "text" },
                    React.createElement("div", { className: "title", dangerouslySetInnerHTML: { __html: [this.props.data.text.title] } }),
                    React.createElement("div", { className: "description", dangerouslySetInnerHTML: { __html: [this.props.data.text.description] } })
                ),
                React.createElement(
                    "div",
                    { className: "statspanel" },
                    React.createElement(
                        "div",
                        { className: "stats" },
                        React.createElement(
                            "div",
                            { className: "votes" },
                            React.createElement(Twenty.i18n.str, { textref: "rating.votes", element: "B" }),
                            " ",
                            this.props.data.points
                        ),
                        React.createElement("div", { style: { clear: "both" } }),
                        React.createElement(
                            "div",
                            { className: "barContainer" },
                            React.createElement("div", { className: "bar", style: { width: this.state.barWidth } })
                        )
                    )
                )
            )
        );
    }
});

Twenty.Components.ratingAGB = createReactClass({
    displayName: "ratingAGB",


    myNameIs: "ratingAGB",

    render: function render() {
        return React.createElement(
            "div",
            null,
            React.createElement("input", { type: "checkbox", name: "agb" }),
            React.createElement(Twenty.i18n.str, { textref: "rating.agb" }),
            React.createElement("br", null),
            React.createElement("br", null)
        );
    }

});

Twenty.Components.ratingFormCheckbox = createReactClass({
    displayName: "ratingFormCheckbox",


    myNameIs: "ratingFormCheckbox",

    toggle: function toggle(e) {
        var $input = $(e.currentTarget);
        $input.alterClass("has-*", "");
        $input.prop("checked") ? $input.addClass("has-success") : $input.addClass("has-error");
    },

    getDefaultProps: function getDefaultProps() {
        return {
            is: "optional"
        };
    },

    render: function render() {

        return React.createElement(
            "div",
            null,
            React.createElement(
                "label",
                { className: "checkbox-label" },
                React.createElement("input", { type: "checkbox", name: this.props.name, required: this.props.is === "required", className: this.props.is, onChange: this.toggle }),
                React.createElement("span", { className: "text", dangerouslySetInnerHTML: { __html: [this.props.label ? " " + this.props.label : ""] } })
            )
        );
    }

});

Twenty.Components.ratingFormInput = createReactClass({
    displayName: "ratingFormInput",


    myNameIs: "ratingFormInput",

    validateEmail: function validateEmail(value) {
        var re = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i;
        return re.test(value);
    },

    validatePhone: function validatePhone(value) {
        var re = /^(?=\s*\d{2,10})[\d\s{1}]+$/;
        return re.test(value);
    },

    validatePostalcode: function validatePostalcode(value) {
        var re = /^(?=\s*\d{4,4})[\d\s]+$/;
        return re.test(value);
    },

    checkForErrors: function checkForErrors(e) {
        var $input = $(e.currentTarget),
            value = $input.val();

        $input.alterClass("has-*", "");

        if (value.length > 0) {
            // check email address
            if (this.props.name.indexOf("mail") > -1) {
                this.validateEmail(value) ? $input.addClass("has-success") : $input.addClass("has-error");
            } else if (this.props.name.indexOf("phone") > -1 || this.props.name === "telefon") {
                // check phone number
                this.validatePhone(value) ? $input.addClass("has-success") : $input.addClass("has-error");
            } else if (this.props.name.indexOf("post") > -1 || this.props.name === "plz") {
                // check postal code
                this.validatePostalcode(value) ? $input.addClass("has-success") : $input.addClass("has-error");
            } else if (this.props.is === "required") {
                // check string-fields for a length of at least 2
                value.length >= 2 ? $input.addClass("has-success") : $input.addClass("has-error");
            }
        }
    },
    getDefaultProps: function getDefaultProps() {
        return {
            is: "optional",
            type: "text",
            value: "",
            placeholder: "",
            specialclass: "",
            handleAs: ""
        };
    },

    render: function render() {
        return React.createElement("input", { type: this.props.type, name: this.props.name, placeholder: this.props.placeholder,
            required: this.props.is === "required", className: this.props.is + " " + this.props.specialclass, onChange: this.checkForErrors });
    }

});

Twenty.Components.ratingContestform = createReactClass({
    displayName: "ratingContestform",


    myNameIs: "ratingContestform",

    checkForm: function checkForm() {
        var allRequiredFormFields = $(".required");
        var errors = 0;
        var postStr = "&ratingid=" + this.props.config.ratingID;

        $.each(allRequiredFormFields, function (index, input) {
            if (!$(input).hasClass("has-success")) {
                errors++;
            } else {
                postStr += "&" + $(input).attr("name") + "=" + $(input).val();
            }
        });

        if (errors > 0) {
            $(".msg").show();
        } else {
            $(".msg").hide();

            // Send the data
            Twenty.datamodel.runAJAXRequest({
                url: this.props.config.rating_standart_url + "?cmd=participate" + postStr,
                success: function success() {
                    $(".contest").slideUp();
                },
                error: function error() {
                    Twenty.tracking.errorlog({
                        category: "component",
                        action: "rating",
                        label: "React-Rating-ContestForm-checkform Function failed"
                    });
                }
            });
        }
    },

    getInitialState: function getInitialState() {
        return {
            data: []
        };
    },

    componentDidMount: function componentDidMount() {
        Twenty.datamodel.runAJAXRequest({
            url: this.props.config.rating_standart_url + "?cmd=contest&ratingid=" + this.props.config.ratingID,
            dataType: "json",
            success: function (data) {
                this.setState({ data: data });
            }.bind(this)
        });
    },

    render: function render() {

        var fields = [];

        if (this.state.data.fields) {
            $.each(this.state.data.fields, function (index, field) {
                if (field.type === "text") {
                    if (field.name === "plz" || field.name === "ort") {
                        fields.push(React.createElement(Twenty.Components.ratingFormInput, { type: field.type, name: field.name, placeholder: field.value, is: "required", specialclass: "responsiveInlineInput", key: this.props.config._increment++, config: this.props.config }));
                    } else {
                        fields.push(React.createElement(Twenty.Components.ratingFormInput, { type: field.type, name: field.name, placeholder: field.value, is: "required", key: this.props.config._increment++, config: this.props.config }));
                    }
                }
                if (field.type === "agb") {
                    fields.push(React.createElement(Twenty.Components.ratingFormCheckbox, { name: field.name, is: "required", label: this.props.config.translations[this.props.config.lang].agb, key: this.props.config._increment++, config: this.props.config }));
                }
            });
        }

        return React.createElement(
            "div",
            { className: "contest" },
            React.createElement(
                "div",
                { className: "title" },
                React.createElement(Twenty.i18n.str, { textref: "rating.contestTitle" })
            ),
            this.state.data.text ? React.createElement(
                "div",
                { className: "text" },
                this.state.data.text
            ) : "",
            fields,
            React.createElement("br", null),
            React.createElement("div", { className: "msg msg-error", dangerouslySetInnerHTML: { __html: [this.props.config.translations[this.props.config.lang].empty] } }),
            React.createElement(
                "button",
                { onClick: this.checkForm },
                React.createElement(Twenty.i18n.str, { textref: "rating.send" })
            )
        );
    }

});

Twenty.Components.ratingRanking = createReactClass({
    displayName: "ratingRanking",


    myNameIs: "ratingRanking",

    getItems: function getItems() {
        Twenty.datamodel.runAJAXRequest({
            url: this.props.config.rating_standart_url + "?cmd=result&ratingid=" + this.props.config.ratingID,
            dataType: "json",
            success: function (data) {
                this.setState({ data: data });
            }.bind(this)
        });

        this.props.config.$window.scrollTop(0);
    },

    showPic: function showPic(item) {
        this.props.config.lightbox.find(".pic img").attr("src", this.props.config.domain + item.images.big);
        this.props.config.lightbox.show();
    },

    itemClick: function itemClick() {
        // showpic?
    },
    getInitialState: function getInitialState() {
        return {
            data: []
        };
    },

    componentDidMount: function componentDidMount() {
        this.getItems();
    },

    render: function render() {
        var _this55 = this;

        var items = "",
            thanksMsg = "",
            highestRankedPoints;

        // show loading while we don't have any items in array
        if (this.state.data.length === 0) {
            return React.createElement(
                "div",
                null,
                "Loading..."
            );
        }

        // setup the items
        if (this.state.data.items) {

            // get highest points in ranking
            highestRankedPoints = 0;
            this.state.data.items.map(function (item) {
                highestRankedPoints = Math.max(highestRankedPoints, item.points);
            });

            // setup items
            items = this.state.data.items.map(function (item) {
                item.highestRankedPoints = highestRankedPoints;
                return React.createElement(Twenty.Components.ratingRankingItem, { data: item, key: _this55.props.config._increment++, config: _this55.props.config, showPic: _this55.showPic });
            });
        }

        // show Text when we're not allowed to show the results (backend-settings)
        if (this.state.data.resulttext && !this.state.data.contest) {
            thanksMsg = React.createElement(
                "div",
                { className: "info" },
                this.state.data.resulttext
            );
        }

        return React.createElement(
            "div",
            { className: "ranking" },
            thanksMsg,
            this.state.data.contest ? React.createElement(Contestform, null) : React.createElement("span", null),
            React.createElement(
                "div",
                { className: "itemContainer" },
                items
            )
        );
    }
});

$.fn.alterClass = function (removals, additions) {

    var self = this,
        patt;

    if (removals.indexOf("*") === -1) {
        // Use native jQuery methods if there is no wildcard matching
        self.removeClass(removals);
        return !additions ? self : self.addClass(additions);
    }

    patt = new RegExp("\\s" + removals.replace(/\*/g, "[A-Za-z0-9-_]+").split(" ").join("\\s|\\s") + "\\s", "g");

    self.each(function (i, it) {
        var cn = " " + it.className + " ";
        while (patt.test(cn)) {
            cn = cn.replace(patt, " ");
        }
        it.className = $.trim(cn);
    });

    return !additions ? self : self.addClass(additions);
};

Twenty.Components.rating = createReactClass({
    displayName: "rating",


    myNameIs: "rating",

    setupLightbox: function setupLightbox() {
        var _this56 = this;

        var newConfig;
        if ($("#preview").length === 0) {
            setTimeout(function () {
                _this56.setupLightbox();
            }, 100);
            return;
        }
        newConfig = $.extend({}, this.state.config);
        newConfig.lightbox = $("#preview");
        newConfig.lightbox.hide();
        newConfig.lightbox.on("click", function () {
            $(this).hide();
        });

        this.setState({
            config: newConfig
        });

        // Twenty.app.duell = {};
    },

    // mode can be vote or ranking
    getInitialState: function getInitialState() {
        return {
            data: {},
            mode: "vote",
            config: {
                domain: "http://www.20min.ch",
                ratingID: Twenty.dom.getValueFromUrlParam("ratingid") || 0,
                lang: Twenty.dom.getValueFromUrlParam("lang") || window.ratingLanguage || "de",
                getURLParameter: Twenty.dom.getValueFromUrlParam,
                rating_standart_url: "http://www.20min.ch/community/ratings/json.tmpl",
                numRatingStars: 5,
                _increment: 1,
                cookieName: "rating" + Twenty.dom.getValueFromUrlParam("ratingid") || 0,
                cookieValue: "voted",
                cookieExpires: 90,
                $window: $(window),
                $btnVote: null
            }
        };
    },

    componentDidMount: function componentDidMount() {
        Twenty.datamodel.runAJAXRequest({
            url: this.state.config.rating_standart_url + "?cmd=showrating&ratingid=" + this.state.config.ratingID,
            dataType: "json",
            success: function (data) {
                this.setState({ data: data });

                // show ranking if rating is over or user has already voted
                if (data.options && data.options.showResults || Twenty.dom.getCookie("rating" + this.state.config.ratingID) === "voted" || !!data.closed) {
                    this.setState({ mode: "ranking" });
                }
            }.bind(this)
        });

        $(window).scrollTop(0);

        this.setupLightbox();
    },

    render: function render() {
        var _this57 = this;

        var content2show, dataHead, showRanking;

        // show loading if there is no data
        if ($.isEmptyObject(this.state.data)) {
            return React.createElement(
                "div",
                { className: "info" },
                "Loading Data..."
            );
        }

        // show overview if there is no rating-id
        if (this.state.config.ratingID === 0) {
            dataHead = { title: this.state.config.translations[this.state.config.lang].ratings, subtitle: "" };
            content2show = React.createElement(Twenty.Components.ratingOverview, { config: this.state.config });
        } else {
            // show vote or ranking view
            if (this.state.mode === "ranking") {
                dataHead = { title: this.state.data.title, subtitle: this.state.data.subtitle };
                content2show = React.createElement(Twenty.Components.ratingRanking, { config: this.state.config });
            }

            if (this.state.mode === "vote") {
                showRanking = function showRanking() {
                    _this57.setState({ mode: "ranking" });
                };
                dataHead = { title: this.state.data.title, subtitle: this.state.data.subtitle };
                content2show = React.createElement(Twenty.Components.ratingVote, { data: this.state.data, showRanking: showRanking, config: this.state.config });
            }
        }

        return React.createElement(
            "div",
            { className: "ratingWrapper" },
            React.createElement(
                "div",
                { id: "preview" },
                React.createElement(
                    "div",
                    { className: "pic" },
                    React.createElement("img", { src: "" })
                )
            ),
            React.createElement(
                "div",
                { id: "rating" },
                React.createElement(Twenty.Components.ratingHead, { data: dataHead, config: this.state.config }),
                content2show,
                this.state.data.closed && React.createElement(
                    "div",
                    null,
                    React.createElement("br", null),
                    React.createElement(
                        "div",
                        { className: "info" },
                        this.state.config.translations[this.state.config.lang].closed
                    ),
                    React.createElement(Twenty.Components.ratingRanking, { config: this.state.config })
                ),
                "); }"
            )
        );
    }
});

/**
 * @name Twenty.Components.recommender
 * @memberof Twenty.Components
 * @description Working in conjunction with the Tamdia Digital Core Engineering team, the Recommender Component provides a way to deepen user engagement with content.
        By taking the story ID of any  story which has been published on any of 20Minuten, TagesAnzeiger or Newsnet titles, you can now present your users with an  implementor-customisable number of further stories.
        This widget is highly customisable, and is already in use across many Tameida websites and apps.
 *  @hint Internal urls (or at least the schematic for them) can be found at
 *  https://gist.github.com/yannick/00c7ea16047ca7ea965b
 * @type TwentyComponent
 * @requires JQuery v. 1.5 (2011)
 * @param {Object} settings
 * @param {string} sourceUrl the url of the source story, ie, the recommendations will be like this story
 * @param {string} sourceId  a unique identifier for the story having recommendations
 * @example
        Twenty.api.component({
            widget: "recommender",
            language: "de",
            node: "my20min_widget",
            settings: {
                feedServer: "http://rcmd.tda.io/20min/rec.json",
                sourceUrl: "http://www.20min.ch/finance/news/story/26073959",
                sourceId: "26073959",
                device: "android",
                numResults: 3,
                i18n: {
                    de: {
                        headline: "Mehr Themen",
                        loading: "Laden ..."
                    },
                    fr : {
                        headline: "Plus de sujets",
                        loading: "loading ..."
                    },
                },
                clickHandler: function(){//do something}
            }
        });
 **/
Twenty.Components.recommenderitem = createReactClass({
    displayName: "recommenderitem",


    statics: {
        myNameIs: "recommenderitem",
        dependencies: []
    },

    getInitialState: function getInitialState() {
        return {
            title: ""
        };
    },

    componentDidMount: function componentDidMount() {
        if (this.props.data.article_id) {
            Twenty.datamodel.runAJAXRequest({
                url: Twenty.env.getServer("story") + this.props.data.article_id,
                success: function (data) {
                    var storyData = Twenty.datamodel.getStoryData(data.article),
                        actionIconsData = {
                        icons: storyData.multimedia_icons || [],
                        comment_count: storyData.communityobject && storyData.communityobject.comments_number || 0,
                        shares_total: storyData.communityobject && storyData.communityobject.shares_total || 0,
                        html_content: storyData.communityobject && "<span>" + storyData.main_catname + "</span> " + storyData.communityobject.html_content || "",
                        icon_names: storyData.communityobject && storyData.communityobject.icon_names || []
                    };
                    this.setState({
                        title: storyData.title,
                        actionIconsData: actionIconsData
                    });
                }.bind(this)
            });
        }
    },

    render: function render() {
        if (this.props.data.article_id) {
            return React.createElement(
                "a",
                { className: "recommender-item", onClick: this.props.handleClick },
                React.createElement(
                    "div",
                    { className: "recommender-text" },
                    React.createElement(
                        "h1",
                        { className: "title" },
                        this.state.title
                    ),
                    this.state.actionIconsData && React.createElement(Twenty.Components.actioniconlist, { data: this.state.actionIconsData, key: Twenty.core.getUniqueKey("actionicon") })
                )
            );
        } else if (this.props.data.type === "ad") {
            return React.createElement(
                "a",
                { className: "recommender-item", onClick: this.props.handleClick },
                React.createElement("iframe", { src: this.props.data.url })
            );
        } else {
            return React.createElement(
                "a",
                { className: "recommender-item", onClick: this.props.handleClick },
                function () {
                    if (this.props.data.img) {
                        return React.createElement("img", { className: "recommender-image", src: this.props.data.img });
                    }
                }.call(this),
                React.createElement(
                    "div",
                    { className: "recommender-text" },
                    React.createElement("h1", { className: "title", dangerouslySetInnerHTML: { __html: this.props.data.title } }),
                    React.createElement("p", { className: "storytext", dangerouslySetInnerHTML: { __html: this.props.data.text } })
                )
            );
        }
    }
});

Twenty.Components.recommenderplaceholder = createReactClass({
    displayName: "recommenderplaceholder",


    myNameIs: "recommenderplaceholder",

    render: function render() {
        return React.createElement(
            "div",
            { className: "greeked-placeholder" },
            React.createElement("div", { className: "loadingBar big" }),
            React.createElement("span", { className: "loadingBar small" }),
            React.createElement("span", { className: "loadingBar small" }),
            React.createElement("span", { className: "loadingBar small" })
        );
    }
});

Twenty.Components.recommender = createReactClass({
    displayName: "recommender",


    myNameIs: "recommender",
    mixins: [Twenty.mixins.i18n],

    handleClick: function handleClick(i) {
        var im = document.createElement("IMG");
        im.src = this.state.data.recommendations[i].tracking_url_click;
        if (this.props.settings && this.props.settings.clickHandler) {
            this.props.settings.clickHandler.call(this, this.state.data.recommendations[i]);
        } else {
            // for GTM
            Twenty.event.dispatch({
                type: "storynavigation",
                params: {
                    event: "moreThemes",
                    articleId: i,
                    position: this.state.data.recommendations[i].objectid,
                    positionbox: undefined // eslint-disable-line no-undefined
                }
            });

            // linkpulse tracking
            Twenty.event.dispatch({
                type: "userClick",
                params: {
                    clickURL: "story/" + this.state.data.recommendations[i].objectid,
                    event: "userClick"
                }
            });
            Twenty.app.controller.loadDeepLinkStoryPage(this.state.data.recommendations[i].objectid || this.state.data.recommendations[i].article_id);
        }
    },

    getInitialState: function getInitialState() {
        return {
            data: {}
        };
    },

    componentWillMount: function componentWillMount() {
        this.setState({
            numResults: this.props.settings.numResults || 3
        });
    },

    componentDidMount: function componentDidMount() {
        var lang = this.props.lang || Twenty.env && Twenty.i18n.lang || "de",
            platform = this.props.settings.platform || "MWEB",
            url,
            data = "",
            type = this.props.settings.type || "GET",
            contentType = this.props.settings.enctype || "application/x-www-form-urlencoded",
            withCredentials = false;

        if (type === "POST") {
            url = this.props.settings.feedServer;
            data = JSON.stringify({
                last_visit: Date.now(),
                platform: "mobile",
                target: Twenty.datamodel.appname
            });
            withCredentials = true;
        } else {
            url = this.props.settings.feedServer + "?url=" + this.props.settings.sourceUrl + "&mediatype=text&" + "platform=" + platform + "&lang=" + lang + "&group=text" + "&source_id=" + this.props.settings.sourceId + "&recs=" + this.numResults;
        }

        Twenty.datamodel.runAJAXRequest({
            url: url,
            data: data,
            dataType: "json",
            type: type,
            contentType: contentType,
            xhrFields: {
                withCredentials: withCredentials
            },
            success: function (result) {
                this.setState({ data: result });
            }.bind(this),
            error: function error(xhr, status, err) {
                console.log("Error loading recommender data", xhr, status, err);
            }
        });
    },

    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        return $.isEmptyObject(this.state.data) && nextState.data.recommendations;
    },

    render: function render() {
        var sectionKey;
        if ($.isEmptyObject(this.state.data)) {
            var placeholder_code = [];
            for (var i = 0; i < this.state.numResults; i++) {
                placeholder_code.push(React.createElement(Twenty.Components.recommenderplaceholder, { key: i }));
            }

            return React.createElement(
                "section",
                { className: "recommender" },
                this.props.settings.hideHeader ? "" : React.createElement(
                    "h1",
                    { className: "box" },
                    React.createElement(Twenty.i18n.str, { textref: "recommender.headline" })
                ),
                placeholder_code
            );
        }
        sectionKey = Twenty.core.getUniqueKey("recommender");
        return React.createElement(
            "section",
            { key: sectionKey, className: "recommender" },
            this.props.settings.hideHeader ? "" : React.createElement(Twenty.i18n.str, { textref: "recommender.headline", className: "box", element: "h1" }),
            this.state.data.tracking_url_load && React.createElement("img", { src: this.state.data.tracking_url_load, className: "tracking-image" }),
            React.createElement(
                "div",
                null,
                this.state.data.recommendations.map(function (element, i) {
                    var itemKey = sectionKey + "_" + i;
                    return React.createElement(Twenty.Components.recommenderitem, { data: element, key: itemKey, handleClick: this.handleClick.bind(this, i) });
                }, this)
            )
        );
    }
});

/**
* @method Twenty.Components.retreat
* @memberof Twenty.Components
* @description place this component at the end of any div and it will hide the
* component when the user is scrolling. It will add and remove css classNames to the
* domNode and additionalScrollElements. With the scrollDirection, we can define the
* direction of the moving out the screen. The scrollTolerance defines, when the component
* will be hidden when we scroll.
* @param {integer} scrollTolerance
* @param {integer} scrollDirection
* @param {Object[]} additionalScrollElements - contains elements, which should be moved too by scrolling
* @param {Object[]} hideShowElements - contains elements, which should setted the display to none or block
* @example
* <Twenty.Components.retreat data={this.scrollData} domNode={this.domNode} />
*/

Twenty.Components.retreat = createReactClass({
    displayName: "retreat",


    myNameIs: "retreat",

    hideAndShowElements: function hideAndShowElements(visibleValue) {
        this.hideShowElements.map(function (element) {
            if (document.getElementById(element.id) != null) {
                document.getElementById(element.id).style.display = visibleValue === "block" ? "block" : "none";
            }
        });
    },

    scrollAdditionalElements: function scrollAdditionalElements(addOrRemoveValue, scrollValue) {
        this.additionalScrollElements.map(function (element) {
            if (document.getElementById(element.id) != null) {
                if (addOrRemoveValue === "add") {
                    document.getElementById(element.id).classList.add(scrollValue);
                    if (element.scrollDistance) {
                        document.getElementById(element.id).classList.add(element.scrollDistance);
                    }
                } else {
                    document.getElementById(element.id).classList.remove(scrollValue);
                    if (element.scrollDistance) {
                        document.getElementById(element.id).classList.remove(element.scrollDistance);
                    }
                }
            }
        });
    },

    scrollCheck: function scrollCheck() {
        this.domNode = this.props.domNode;
        if (!Twenty.app.getState("modal")) {
            this.setState({
                currScrollPos: window.pageYOffset
            });
            if (this.state.currScrollPos > 0 && this.state.currScrollPos - this.props.data.scrollTolerance > this.state.lastScrollPos) {
                this.domNode.classList.add(this.scrollDirectionClassName);
                this.hideAndShowElements("none");
                this.scrollAdditionalElements("add", this.scrollDirectionClassName);
            } else if (this.state.currScrollPos < this.state.lastScrollPos) {
                this.domNode.classList.remove(this.scrollDirectionClassName);
                this.scrollAdditionalElements("remove", this.scrollDirectionClassName);
                if (this.isFirstStart) {
                    this.hideAndShowElements("block");
                }
            }
            this.setState({
                lastScrollPos: this.state.currScrollPos
            });
        } else {
            this.domNode.classList.remove(this.scrollDirectionClassName);
            this.scrollAdditionalElements("remove", this.scrollDirectionClassName);
            if (this.isFirstStart) {
                this.hideAndShowElements("block");
            }
        }
    },

    componentDidMount: function componentDidMount() {
        this.domNode = this.props.domNode;
        window.addEventListener("scroll", this.scrollCheck);
        this.scrollDirectionClassName = this.props && this.props.data.scrollDirection === "up" ? "slide-up" : "slide-down";
        this.additionalScrollElements = this.props && this.props.data.additionalScrollElements ? this.props.data.additionalScrollElements : [];
        this.hideShowElements = this.props && this.props.data.hideShowElements ? this.props.data.hideShowElements : [];
    },

    componentWillUnmount: function componentWillUnmount() {
        window.removeEventListener("scroll", this.scrollCheck);
    },

    render: function render() {
        return null;
    }
});

/* global FB */
/**
* @method Twenty.Components.sharemenu
* @memberof Twenty.Components
* @description share menu, with its share options such as facebook, whatsapp, twitter, google, email etc. will show up when you click on share icon on a story using {@link Twenty.Components.socialbox} (native sharing inside the app).
* @param {Object} originalStory
* @param {string} originalStory.title title
* @param {string} originalStory.pic_bigstory picture url
* @param {string} originalStory.lead lead text
* @param {string} originalStory.id id of the current story
* @param {string} originalStory.oberzeile kicker title
*/
/* istanbul ignore next */
Twenty.Components.sharemenu = createReactClass({
    displayName: "sharemenu",


    myNameIs: "sharemenu",
    facebookUrl: "",
    shareTypeId: [],

    handleClick: function handleClick(network, e) {
        e.preventDefault();

        // for GTM article_id is legacy_id for backwardscompabilty - all shares unless comment
        Twenty.event.dispatch({
            type: "social",
            params: {
                /* eslint-disable camelcase */
                article_id: this.props.originalStory.legacy_id,
                event: "Social", // Yes, a Capital letter - by purpos. so Social.
                event_action: network === "comment" ? "view" : "share",
                event_label: window.location.href,
                socialNetwork: network
                /* eslint-enable camelcase */
            }
        });

        // count up a click on the share item
        if (Twenty.env.getServer("communityCount") && this.shareTypeId[network]) {
            Twenty.datamodel.runAJAXRequest({
                url: Twenty.env.getServer("communityCount") + this.props.originalStory.id + "/counts/" + this.shareTypeId[network],
                type: "POST",
                success: function success() {
                    // success
                }
            });
        }
        if (network === "facebook") {
            if (window.FB && window.FB.ui) {
                FB.ui({
                    method: "share",
                    app_id: Twenty.app.getFBId(), // eslint-disable-line camelcase
                    display: "popup",
                    href: this.facebookUrl
                });
            }
        } else if (network === "comment") {
            var commentLink = window.location.href.match(Twenty.datamodel.storyIdentifierFromUrl)[1],
                allowCommentParams = {
                allowCommentsWeekdays: this.props.originalStory.allow_comments_weekdays,
                allowCommentsWeekends: this.props.originalStory.allow_comments_weekends
            },
                insideFullCommentUrl = this.props.originalStory.adserver_url;
            Twenty.app.controller.loadCommentPage(commentLink, allowCommentParams, insideFullCommentUrl);
        } else {
            window.open(this.refs[network].href);
        }
        return true;
    },

    mapShareElements: function mapShareElements(shareElement) {
        var elementClassName = "",
            location = "",
            shareLink = "",
            dataAction = "",
            iconClassList = "icon",
            text = "",
            numberOfShares = "",
            twitterText = "",
            emailLeadText = "",
            showCommentsButton = false;

        if (this.props.communitiesData) {
            var communitiesData = this.props.communitiesData;
            for (var i = 0; i < communitiesData.length; i++) {
                // type for email is called share in the feed
                if (communitiesData[i].type === shareElement.type || communitiesData[i].type === "share" && shareElement.type === "email") {
                    numberOfShares = React.createElement(
                        "span",
                        { className: "counter" },
                        communitiesData[i].count
                    );
                    this.shareTypeId[shareElement.type] = communitiesData[i].share_type_id || "";
                    if (shareElement.type === "email") {
                        location = communitiesData[i].url.substring(communitiesData[i].url.indexOf("http"));
                        emailLeadText = communitiesData[i].url.substring(communitiesData[i].url.indexOf("&body=") + 6, communitiesData[i].url.indexOf("http"));
                    } else {
                        location = communitiesData[i].url || "";
                    }
                    if (shareElement.type === "twitter") {
                        twitterText = communitiesData[i].title;
                    }
                    if (shareElement.type === "comment") {
                        showCommentsButton = true;
                    }
                }
                if (shareElement.type === "comment" && i === communitiesData.length - 1) {
                    if (!showCommentsButton) {
                        return false;
                    }
                }
            }
        } else {
            location = window.location.href.replace("//m.", "//www.");
            twitterText = encodeURIComponent(this.props.originalStory.oberzeile + ": " + this.props.originalStory.title);
            emailLeadText = this.props.originalStory.lead;
        }
        switch (shareElement.type) {
            case "whatsapp":
                elementClassName = "whatsapp";
                shareLink = "whatsapp://send?text=" + location;
                dataAction = "share/whatsapp/share";
                iconClassList += " icon-whatsapp";
                text = React.createElement(
                    "span",
                    { className: "text" },
                    "WhatsApp"
                );
                break;
            case "facebook":
                this.facebookUrl = location;
                elementClassName = "facebook";
                iconClassList += " icon-facebook";
                text = React.createElement(
                    "span",
                    { className: "text" },
                    "Facebook"
                );
                break;
            case "googleplus":
                elementClassName = "google";
                shareLink = "https://plus.google.com/share?url=" + location;
                iconClassList += " icon-gplus";
                text = React.createElement(
                    "span",
                    { className: "text" },
                    "Google"
                );
                break;
            case "twitter":
                elementClassName = "twitter";
                shareLink = "https://twitter.com/share?url=" + location + "&text=" + twitterText + Twenty.env.getServer("twitterParams");
                iconClassList += " icon-twitter";
                text = React.createElement(
                    "span",
                    { className: "text" },
                    "Twitter"
                );
                break;
            case "email":
                var emailSubjectParams = {
                    title: this.props.originalStory.title
                },
                    emailBodyParams = {
                    leadText: emailLeadText,
                    location: location
                };
                elementClassName = "email";
                shareLink = "mailto:?&subject=" + Twenty.i18n.getString("sharemenu.emailSubject", emailSubjectParams) + "&body=" + Twenty.i18n.getString("sharemenu.emailBody", emailBodyParams);
                iconClassList += " icon-mail";
                text = React.createElement(Twenty.i18n.str, { textref: "sharemenu.email", className: "text" });
                break;
            case "comment":
                elementClassName = "comment";
                iconClassList += " icon-comment";
                break;
            default:
                break;
        }
        return React.createElement(
            "li",
            { key: this.shareTypeId[shareElement.type] },
            React.createElement(
                "a",
                { className: elementClassName, href: shareLink, "data-action": dataAction, ref: elementClassName, onClick: this.handleClick.bind(this, elementClassName) },
                React.createElement("span", { className: iconClassList }),
                text,
                numberOfShares
            )
        );
    },

    scrollCheck: function scrollCheck() {
        // when the user reaches the bottom of the page, the sharemenu is always visible till user leaves the page
        if (window.innerHeight + window.scrollY >= document.body.scrollHeight) {
            window.removeEventListener("scroll", this.scrollCheck);
            this.domNode.classList.remove("slide-down");
            this.setState({
                retreatComponent: false
            });
        }
    },

    getDefaultProps: function getDefaultProps() {
        return {
            shareElements: [{
                type: "whatsapp"
            }, {
                type: "facebook"
            }, {
                type: "googleplus"
            }, {
                type: "twitter"
            }, {
                type: "email"
            }],
            scrollTolerance: 30,
            retreatComponent: false
        };
    },

    getInitialState: function getInitialState() {
        return {
            domNode: null,
            retreatComponent: this.props.retreatComponent
        };
    },

    componentWillMount: function componentWillMount() {
        this.scrollData = {
            scrollTolerance: this.props.scrollTolerance,
            scrollDirection: "down",
            additionalScrollElements: [],
            hideShowElements: []
        };
    },

    componentDidMount: function componentDidMount() {
        // refs are not working inside conditional rendering blocks
        // eslint-disable-next-line react/no-did-mount-set-state
        this.setState({
            domNode: this.domNode
        }, function () {
            if (this.state.retreatComponent) {
                window.addEventListener("scroll", this.scrollCheck);
            }
        });
    },

    render: function render() {
        var _this58 = this;

        var shareElements = this.props.shareElements,
            mapShareElements = this.mapShareElements;

        return React.createElement(
            "div",
            { className: "sharemenu", ref: function ref(_ref28) {
                    _this58.domNode = _ref28;
                } },
            React.createElement(
                "ul",
                { className: "share-menu-buttons" },
                shareElements.map(function (item) {
                    return mapShareElements(item);
                })
            ),
            this.state.retreatComponent && this.state.domNode && React.createElement(Twenty.Components.retreat, { data: this.scrollData, domNode: this.state.domNode })
        );
    }
});

/**
 * This  elements from sitemap with clickies to load new category and custom sections
 * @memberof Twenty.Components
 */
/* istanbul ignore next */

Twenty.Components.sitemap = createReactClass({
    displayName: "sitemap",


    myNameIs: "sitemap",

    handleBackToFront: function handleBackToFront() {
        if (Twenty.app.getState("page").id !== "frontpage") {
            Twenty.app.controller.loadFrontPage();
        }
        Twenty.page.closeModal();
    },

    handleInternalClick: function handleInternalClick(i) {
        Twenty.app.controller.loadStaticPage({
            pagename: this.props.data[i].name,
            title: this.props.data[i].title,
            url: this.props.data[i].url,
            displayUrl: this.props.data[i].displayUrl,
            headerConfig: {
                showHeader: true,
                displayTitle: this.props.data[i].title,
                headerElements: [{
                    type: "icon",
                    name: "left-open",
                    action: function action() {
                        Twenty.history.goBack();
                    }
                }, {
                    type: "btn",
                    name: "login",
                    action: function action() {
                        Twenty.app.user.login();
                    }
                }, {
                    type: "icon",
                    name: "menu",
                    action: function action() {
                        Twenty.app.controller.loadMenuModal();
                    }
                }]
            },
            rewriteObject: {
                stateObj: {},
                title: this.props.data[i].title,
                path: this.props.data[i].displayUrl || this.props.data[i].url || this.props.data[i].title
            }
        });
    },

    handleExternalClick: function handleExternalClick(url) {
        window.open(url);
    },

    handleStoryClick: function handleStoryClick(storyId) {
        Twenty.page.closeModal();
        Twenty.app.controller.loadDeepLinkStoryPage(storyId);
    },

    handleClick: function handleClick(i, e) {
        var currentCategory = Twenty.app.getState("category");
        e.stopPropagation();

        if (currentCategory && currentCategory.category === this.props.data[i].category && Twenty.app.getState("page").id === "categorypage") {
            Twenty.page.closeModal();
        } else {
            // linkpulse tracking
            Twenty.event.dispatch({
                type: "userClick",
                params: {
                    clickURL: this.props.data[i].category,
                    event: "userClick"
                }
            });

            Twenty.app.controller.loadCategoryPage(this.props.data[i]);
        }
    },

    componentDidMount: function componentDidMount() {
        // for GTM
        Twenty.event.dispatch({
            type: "sitemapDidMount",
            params: {
                event: "scrollmenu",
                type: "scoll-menue"
            }
        });
    },

    render: function render() {
        var selectedCategory = this.props.catSelected || Twenty.datamodel.getDefaultCategory(),
            classWords = "sitemap" + (this.props.extraClass ? " " + this.props.extraClass : "");

        return React.createElement(
            "nav",
            { className: classWords },
            React.createElement(
                "ul",
                { ref: "siteMapListOuterElement" },
                this.props.data.map(function (element, i) {
                    if (element.type === "front") {
                        return React.createElement(
                            "li",
                            { className: [element.type, element.extraClass].join(" "), key: i },
                            React.createElement(
                                "div",
                                { className: this.props.extraClass },
                                React.createElement(
                                    "a",
                                    { onClick: this.handleBackToFront },
                                    element.title
                                )
                            )
                        );
                    }

                    if (!element.category) {
                        if (element.type === "internalbrowser") {
                            if (element.target && element.target === "blank") {
                                return React.createElement(
                                    "li",
                                    { onClick: element.handleClick, className: [element.type, element.extraClass].join(" "), key: i },
                                    React.createElement(
                                        "div",
                                        null,
                                        React.createElement(
                                            "a",
                                            { href: element.url, target: "_blank" },
                                            element.title
                                        )
                                    )
                                );
                            }

                            if (element.target && element.target === "javascript") {
                                return React.createElement(
                                    "li",
                                    { className: [element.type, element.extraClass].join(" "), key: i },
                                    React.createElement(
                                        "div",
                                        null,
                                        React.createElement(
                                            "a",
                                            { onClick: element.handleClick },
                                            element.title
                                        )
                                    )
                                );
                            }

                            if (element.target && element.target === "story") {
                                return React.createElement(
                                    "li",
                                    { className: [element.type, element.extraClass].join(" "), key: i },
                                    React.createElement(
                                        "div",
                                        null,
                                        React.createElement(
                                            "a",
                                            { onClick: this.handleStoryClick.bind(this, element.storyId) },
                                            element.title
                                        )
                                    )
                                );
                            }

                            if (element.target && element.target === "title") {
                                return React.createElement(
                                    "li",
                                    { className: "title", key: i },
                                    React.createElement(
                                        "div",
                                        null,
                                        React.createElement(
                                            "h3",
                                            null,
                                            element.title
                                        )
                                    )
                                );
                            }

                            return React.createElement(
                                "li",
                                { onClick: this.handleInternalClick.bind(this, i), className: [element.type, element.extraClass].join(" "), key: i },
                                React.createElement(
                                    "div",
                                    null,
                                    React.createElement(
                                        "a",
                                        null,
                                        element.title
                                    )
                                )
                            );
                        }
                    } else if (element.category !== "Front") {

                        var divClasses = element.icon ? " hasicon" : "";
                        var listItemStyle = { backgroundColor: element.color };
                        divClasses += element.category === selectedCategory ? " selected" : "";
                        return React.createElement(
                            "li",
                            { onClick: this.handleClick.bind(this, i), className: [element.type, element.extraClass].join(" "), key: i },
                            React.createElement(
                                "div",
                                { className: divClasses, style: listItemStyle },
                                React.createElement(
                                    "a",
                                    null,
                                    element.category
                                )
                            ),
                            element.sub_categories && React.createElement(Twenty.Components.sitemap, { name: "sitemap", data: element.sub_categories, noFront: true, extraClass: "subcategories" })
                        );
                    }
                }, this)
            )
        );
    }
});

/**
 * @method Twenty.Components.slideshow
 * @memberof Twenty.Components
 * @description slideshow
 * @param {string} feedUrl the url of the json feed
 * @param {string} mode {('embed'|'fullscreen')}
 * @param {number} startSlide slide number to start with
 * @param {boolean} enableVoting toggle to enable or disable the voting slide at the end of the slideshow
 * @param {Object} transitionClassNames css classes that are being added to the slides while transition
 */
/* istanbul ignore next */

Twenty.Components.slideshow = createReactClass({
    displayName: "slideshow",

    myNameIs: "slideshow",

    slideWidth: (typeof window === "undefined" ? "undefined" : _typeof(window)) !== "object" ? 0 : window.innerWidth,

    transitions: [],

    mixins: [Twenty.mixins.pureRender],

    initPosition: function initPosition() {
        this.slideWidth = window.innerWidth;
        if (this.state.slides.length > 1) {
            this.goToSlide({
                index: this.state.index,
                shouldTrack: false
            });
        }
    },

    goToPrevSlide: function goToPrevSlide(transitionClassName) {
        // avoid tracking if loop backwards to first slide transition
        var shouldTrack = this.state.index === 1 ? false : true;
        this.goToSlide({
            index: this.state.index - 1,
            transitionClassName: transitionClassName,
            shouldTrack: shouldTrack
        });
    },

    goToCurrentSlide: function goToCurrentSlide(transitionClassName) {
        this.goToSlide({
            index: this.state.index,
            transitionClassName: transitionClassName,
            shouldTrack: false
        });
    },

    goToNextSlide: function goToNextSlide(transitionClassName) {
        // avoid tracking if loop to first slide transition (total length - 2 cloned slides)
        var shouldTrack = this.state.index === this.state.slidesLength - 2 ? false : true;
        this.goToSlide({
            index: this.state.index + 1,
            transitionClassName: transitionClassName,
            shouldTrack: shouldTrack
        });
    },

    goToSlide: function goToSlide(slideParams) {
        // prevent too fast swiping is causing an invalid slideIndex
        if (slideParams && (slideParams.index < 0 || slideParams.index >= this.state.slides.length)) {
            this.goToCurrentSlide(slideParams);
            return;
        }
        slideParams.translateX = -Math.abs(slideParams.index) * parseInt(this.slideWidth) + "px";
        this.swipe(slideParams);
    },

    onSlideTap: function onSlideTap() {
        var mediaProps, data;

        if (this.state.currentSlide.type === "link") {
            var blogObject = {
                rewriteObject: {
                    stateObj: this.state.currentSlide,
                    title: this.state.currentSlide.title,
                    path: this.state.currentSlide.link
                }
            };
            Twenty.app.controller.loadBlogsPage(blogObject, this.state.currentSlide.link);
            return;
        }

        if (this.props.mode === "fullscreen" || this.state.currentSlide.type === "ad" || this.state.currentSlide.type === "voting") {
            return;
        }

        if (this.state.currentSlide.type !== "video") {
            // for Netmetrix
            Twenty.event.dispatch({
                type: "slidefullscreen"
            });
        }

        mediaProps = {
            mediatype: "slideshow",
            mode: "fullscreen",
            pagination: false,
            startSlide: this.state.index
        };
        data = $.extend({}, this.props, mediaProps);
        Twenty.page.load(Twenty.page.pages.mediamodal, data);
    },

    swipe: function swipe(slideParams) {
        if (typeof slideParams.index === "number" && this.state.slides[slideParams.index]) {
            this.setState({
                index: slideParams.index
            }, function () {
                this.move(slideParams.translateX);
                this.addTransitionClassName(slideParams.transitionClassName);
                this.handleTracking(slideParams.shouldTrack);
            });
        }
    },

    move: function move(translateX) {
        this.swipeDomNode.style.webkitTransform = "translateX(" + translateX + ")";
        this.swipeDomNode.style.transform = "translateX(" + translateX + ")";
    },

    isLoopSlide: function isLoopSlide(slideIndex) {
        if (typeof slideIndex !== "undefined" && (slideIndex === 0 || slideIndex === this.state.slides.length - 1)) {
            return true;
        } else {
            return false;
        }
    },

    handleLoop: function handleLoop(slideIndex) {
        var cloneFirstSlide = this.state.slides.length - 1,
            cloneLastSlide = 0,
            firstSlide = 1,
            lastSlide = this.state.slides.length - 2;
        if (slideIndex === cloneLastSlide) {
            this.goToSlide({
                index: lastSlide,
                shouldTrack: true
            });
        } else if (slideIndex === cloneFirstSlide) {
            this.goToSlide({
                index: firstSlide,
                shouldTrack: true
            });
        }
    },

    handleCloseFullscreen: function handleCloseFullscreen() {
        // for GTM
        Twenty.event.dispatch({
            type: "pageview",
            params: {
                event: "diashowClose",
                shouldTrack: false
            }
        });
        Twenty.page.closeModal();
    },

    // for GTM specific tracking
    handleTracking: function handleTracking() {
        var shouldTrack = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (shouldTrack) {
            var eventLabel = void 0,
                pageNumber = void 0,
                slideshowID = void 0,
                slideshowTitle = void 0;

            if (this.props.mode === "embed") {
                if (this.props.slideshowType === "front") {
                    eventLabel = "embedded_frontpage";
                } else {
                    eventLabel = "embedded";
                }
            } else {
                eventLabel = "fullscreen";
            }
            if (this.props.slideshowType !== "front") {
                pageNumber = this.state.index - 1;
                slideshowID = this.state.id;
                slideshowTitle = this.state.title;
            }

            // for Netmetrix
            Twenty.event.dispatch({
                type: "slideimpression"
            });

            // for GTM
            Twenty.event.dispatch({
                type: "slideshow",
                params: {
                    event: "slideshow",
                    event_action: "swipe",
                    event_label: eventLabel,
                    page: pageNumber,
                    slideshow_id: slideshowID,
                    slideshow_title: slideshowTitle
                }
            });
        }
    },

    handleDefferedImgLoad: function handleDefferedImgLoad(index) {
        var imgsToUnveil = ".img-" + index + ", .img-" + (index - 1) + ", .img-" + (index + 1);

        // workarround for standalone find a solution here
        // $(imgsToUnveil).unveil();
    },

    setTransitionClassName: function setTransitionClassName(className) {
        if (className && this.transitions.indexOf(className) === -1) {
            this.transitions.push(className);
        }
    },

    addTransitionClassName: function addTransitionClassName(className) {
        if (className && typeof className === "string") {
            this.setTransitionClassName(className);
            this.swipeDomNode.classList.add(className);
        } else {
            this.onSwipeTransitionEnd();
        }
    },

    removeTransitionClassName: function removeTransitionClassName() {
        for (var i = 0; i < this.transitions.length; i++) {
            this.swipeDomNode.classList.remove(this.transitions.pop());
        }
    },

    onSwipeTransitionEnd: function onSwipeTransitionEnd() {
        this.removeTransitionClassName();
        if (this.isLoopSlide(this.state.index)) {
            this.handleLoop(this.state.index);
        } else {
            this.setState({
                currentSlide: this.state.slides[this.state.index]
            });
        }
    },

    onWindowResize: function onWindowResize() {
        this.initPosition();
    },

    addEventListeners: function addEventListeners() {
        this.swipeDomNode.addEventListener("webkitTransitionEnd", this.onSwipeTransitionEnd);
        this.swipeDomNode.addEventListener("transitionend", this.onSwipeTransitionEnd);
        window.addEventListener("resize", this.onWindowResize, true);
    },

    removeEventListeners: function removeEventListeners() {
        this.swipeDomNode.removeEventListener("webkitTransitionEnd", this.onSwipeTransitionEnd);
        this.swipeDomNode.removeEventListener("transitionend", this.onSwipeTransitionEnd);
        window.removeEventListener("resize", this.onWindowResize, true);
    },

    initSlideshow: function initSlideshow(data) {
        var slides = data.data.slides,
            count = 0,
            uncount = 0,
            slidesTotal,
            firstSlide,
            lastSlide;

        // add slide number to each slide
        slides.forEach(function (obj) {
            if (obj.type !== "ad" && obj.type !== "voting") {
                count += 1;
                obj.pagenumber = count;
                if (!obj.pagetext && obj.caption) {
                    obj.pagetext = obj.caption;
                }
            } else {
                uncount += 1;
            }
        });

        slidesTotal = slides.length - uncount;

        if (slides.length > 1) {
            // prepare loop slides (clone first & last slide)
            firstSlide = slides[0];
            lastSlide = slides[slides.length - 1];

            if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") {
                slides.unshift(lastSlide);
                slides.push(firstSlide);
            }
        }

        this.setState({
            id: data.data.id,
            title: data.data.title,
            slides: slides,
            slidesLength: slides.length,
            slidesTotal: slidesTotal
        }, function () {
            this.handleDefferedImgLoad(this.state.index);
            this.initPosition();
        });
    },

    getDefaultProps: function getDefaultProps() {
        return {
            mode: "embed",
            startSlide: 1,
            enableVoting: false,
            transitionClassNames: {
                slow: "swipe-transition-slow",
                fast: "swipe-transition-fast"
            },
            showIcon: false,
            forcecloning: false
        };
    },

    getInitialState: function getInitialState() {
        return {
            slides: [],
            currentSlide: {
                type: "image",
                image: {
                    source: [],
                    caption: ""
                }
            },
            index: this.props.startSlide,
            slideshowType: this.props.slideshowType
        };
    },

    componentWillMount: function componentWillMount() {
        if (typeof window === "undefined") {
            // SSR
            var itemSSRDumpData = [{
                am_id: "",
                credit: "",
                dia_pixel_android: "",
                dia_pixel_bb: "",
                dia_pixel_cablecom: "",
                dia_pixel_ipad: "",
                dia_pixel_iphone: "",
                dia_pixel_samsung: "",
                dia_pixel_win8_phone: "",
                dia_pixel_win8_tablet: "",
                pagetext: "In Australien ist am Donnerstag ein SUV in eine Menschenmenge gerast",
                pagetitle: "",
                title_diashow: "Australien: SUV rast in Menschenmenge",
                url: this.props.items[0].images[0].src_big,
                url_small: this.props.items[0].images[0].src_big
            }];

            var SSRCommunityobject = {
                couchtype: "likesvotes",
                share_updated: 0,
                shares_total: 0,
                thumbs_down: 0,
                thumbs_up: 0,
                type: "dia",
                updated: 1513847157,
                vote_updated: 0
            };

            this.initSlideshow({
                items: itemSSRDumpData,
                id: 42,
                title: "",
                communityobject: SSRCommunityobject,
                published_date: "",
                nav_picture: this.props.items[0].images[0].src_big
            });
        }
        if (this.props.data.slides.length > 1) {
            this.initSlideshow(Twenty.core.extendDeep({}, this.props));
        }
    },

    componentDidMount: function componentDidMount() {
        if (!this.hasEvents) {
            this.addEventListeners();
        }
    },

    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
        this.handleDefferedImgLoad(prevState.index);
    },

    componentWillUnmount: function componentWillUnmount() {
        this.removeEventListeners();
    },

    render: function render() {
        var _this59 = this;

        var className = ["slideshow"],
            sliderWidth = this.state.slides.length * 100 + "%",
            swipeIndicator = this.state.index === 1 && React.createElement("span", { className: "swipe-indicator bounce-right icon icon-right-open" }),
            count = this.state.currentSlide.type !== "ad" && this.state.currentSlide.pagenumber && this.state.slidesLength && this.state.currentSlide.pagenumber + "/" + this.state.slidesTotal + " ",
            spanElement,
            paginationBubbles = [],
            slides = this.state.slides.map(function (slide, i) {
            if (slide.type === "voting") {
                return React.createElement(
                    "li",
                    { className: "slide voting", key: "slide_" + i },
                    (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" ? React.createElement("img", { className: "img img-" + i, src: "/webapp/img/loadingIndicator.jpg", "data-src": _this59.props.data.initial.image.sources[0].src }) : React.createElement("img", { className: "img img-" + i, src: slide.image.sources[0].src }),
                    React.createElement(
                        "div",
                        { className: "voting-wrapper" },
                        React.createElement(
                            "h5",
                            null,
                            React.createElement(Twenty.i18n.str, { textref: "slideshow.voteMessage" })
                        ),
                        React.createElement(Twenty.Components.voting, { voteType: "dia", voteId: _this59.state.id, data: slide.communityObject })
                    )
                );
            } else if (slide.type === "ad") {
                return React.createElement(
                    "li",
                    { className: "slide ad", key: "slide_" + i },
                    React.createElement(Twenty.Components.ad, { adUnitName: slide.tatm.adUnitName, adserver_url: slide.tatm.adserver_url, key: "slide_" + i })
                );
            } else {
                return React.createElement(
                    "li",
                    { className: "slide img", key: "slide_" + i },
                    swipeIndicator,
                    (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" ? React.createElement("img", { className: "img img-" + i, src: slide.image.sources[0].src }) : React.createElement("img", { className: "img img-" + i, src: "/webapp/img/loadingIndicator.jpg", "data-src": slide.image.sources[0].src })
                );
            }
        }),
            renderHeader = function () {
            if (this.props.mode === "fullscreen") {
                return React.createElement(
                    "header",
                    null,
                    this.props.slideshowCustomBackButton ? React.createElement("span", { className: "slideshow-back-button-container", dangerouslySetInnerHTML: { __html: this.props.slideshowCustomBackButton } }) : React.createElement("span", { className: "btn btn-close icon icon-left-open", onClick: this.handleCloseFullscreen }),
                    React.createElement(
                        "h1",
                        { className: "title" },
                        this.state.title
                    )
                );
            } else {
                return false;
            }
        }.bind(this);
        if (this.props.showIcon) {
            var spanClasses = void 0,
                spanText = void 0;
            switch (this.state.currentSlide.type) {
                case "link":
                    className.push("zoom");
                    spanClasses = "blog-text";
                    spanText = "Zoom";
                    break;
                case "slideshow":
                    className.push("slide");
                    spanClasses = "icon icon-camera";
                    break;
                case "video":
                    className.push("video");
                    spanClasses = "icon icon-video";
                    break;
            }
            spanElement = React.createElement(
                "span",
                { className: spanClasses },
                spanText
            );
        }

        var _loop = function _loop(i) {
            var classList = "bubble";
            if (i === _this59.state.index) {
                classList += " active";
            }
            paginationBubbles.push(React.createElement("span", { key: "bubbleitem_" + i, onClick: function onClick() {
                    return _this59.goToSlide({ index: i, transitionClassName: _this59.props.transitionClassNames });
                }, className: classList }));
        };

        for (var i = 1; i <= this.state.slidesTotal; i++) {
            _loop(i);
        }

        if (this.props.mode === "fullscreen") {
            className.push("fullscreen");
        }
        if (this.state.currentSlide.type === "ad") {
            className.push("ad");
        }

        return React.createElement(
            "div",
            { className: className.join(" "), ref: function ref(_ref30) {
                    _this59.slideshowDomNode = _ref30;
                } },
            renderHeader(),
            React.createElement(
                "div",
                { className: "slides-wrapper" },
                React.createElement(
                    "ul",
                    { className: "slides swipeable", style: { width: sliderWidth }, ref: function ref(_ref29) {
                            _this59.swipeDomNode = _ref29;
                        } },
                    slides,
                    slides.length <= 0 && React.createElement(
                        "li",
                        { className: "slide img", key: "loading_slide" },
                        React.createElement("img", { className: "img img-1", src: "/webapp/img/loadingIndicator.jpg" })
                    )
                )
            ),
            React.createElement(
                "div",
                { className: "description" },
                React.createElement(
                    "span",
                    { className: "count" },
                    count
                ),
                this.props.showIcon && spanElement,
                this.state.currentSlide.image && this.state.currentSlide.image.caption && React.createElement("span", { className: "caption", dangerouslySetInnerHTML: { __html: this.state.currentSlide.image.caption } }),
                this.state.currentSlide.image && typeof this.state.currentSlide.image.credit !== "undefined" && React.createElement(
                    "span",
                    { className: "credit" },
                    React.createElement(Twenty.i18n.str, { textref: "slideshow.creditTitle" }),
                    this.state.currentSlide.image.credit
                )
            ),
            this.props.pagination && React.createElement(
                "div",
                { className: "pagination" },
                paginationBubbles
            ),
            slides.length > 1 && React.createElement(Twenty.Components.swipe, {
                swipeDomNode: this.swipeDomNode,
                currentSlide: this.state.index,
                shouldTrack: this.state.shouldTrack,
                slideWidth: this.slideWidth,
                move: this.move,
                transitionClassNames: this.props.transitionClassNames,
                goToCurrentSlide: this.goToCurrentSlide,
                goToPrevSlide: this.goToPrevSlide,
                goToNextSlide: this.goToNextSlide,
                onSlideTap: this.onSlideTap })
        );
    }
});

/**
* @method Twenty.Components.socialbox
* @memberof Twenty.Components
* @description socialbox is the blue box inside the story, where you can vote, like, share and open comments page.
* @param {Object} data - The props for this component.
* @param {boolean} commentingAllowed whether commenting is allowed or not.
* @param {string} id current story id
* @param {string} legacy_id old story id -needed for tracking
* @param {string} talkback_api_url url to the discussion/comments page.
* @param {Object} communityobject
* @param {Object} communityobject.shares_total number of shares
* @param {Object} communityobject.comments_number number of comments
* @example
* let props = {
*      commentingAllowed : true,
*      communityobject :{
*          shares_total : 89,
*          comments_number : 123
*       }
* };
*/

/* istanbul ignore next */
Twenty.Components.socialbox = createReactClass({
    displayName: "socialbox",


    myNameIs: "socialbox",

    handleClick: function handleClick(type) {
        if (type === "share") {
            // react pages need to be loaded with data. At the moment, the sharing page has no data
            if (this.state.showShareMenu) {
                this.setState({
                    showShareMenu: false
                });
            } else {
                this.setState({
                    showShareMenu: true
                });
            }
        }
        if (type === "comment") {
            var feedUrl = Twenty.env.getServer("commentFeed") + this.props.data.id + "/order_newest";
            Twenty.app.controller.loadCommentPage(feedUrl);
        }
    },

    getInitialState: function getInitialState() {
        return {
            commentingAllowed: typeof this.props.data.communityobject.comments_active !== "undefined" || false,
            shares: parseInt(this.props.data.communityobject.shares_total) || 0,
            comments: parseInt(this.props.data.communityobject.comments_number) || 0
        };
    },

    render: function render() {
        return React.createElement(
            "div",
            { className: "socialbox" },
            React.createElement(
                "h6",
                { className: "title" },
                React.createElement(Twenty.i18n.str, { textref: "socialbox.header" })
            ),
            React.createElement(
                "div",
                { className: "container" },
                React.createElement(
                    "div",
                    { className: "voting-container" },
                    React.createElement(Twenty.Components.voting, { voteType: "story", voteId: this.props.data.id, data: this.props.data.communityobject })
                ),
                React.createElement(
                    "a",
                    { className: "btn", onClick: this.handleClick.bind(this, "share") },
                    React.createElement(
                        "span",
                        { className: "content" },
                        React.createElement("span", { className: "icon icon-share" }),
                        React.createElement(
                            "span",
                            { className: "value" },
                            this.state.shares
                        )
                    )
                ),
                this.state.commentingAllowed && React.createElement(
                    "a",
                    { className: "btn", onClick: this.handleClick.bind(this, "comment") },
                    React.createElement(
                        "span",
                        { className: "content" },
                        React.createElement("span", { className: "icon icon-comment" }),
                        React.createElement(
                            "span",
                            { className: "value" },
                            this.state.comments
                        )
                    )
                )
            ),
            this.state.showShareMenu ? React.createElement(Twenty.Components.sharemenu, { originalStory: this.props.data }) : null
        );
    }
});

/**
* @memberof Twenty.Components
*/
/* istanbul ignore next */

Twenty.page.register({
    id: "staticpage",
    type: "page",
    contentType: "react",
    transition: {
        in: ["page-fade-in"],
        out: ["page-fade-out"]
    }
});

Twenty.Components.staticpage = createReactClass({
    displayName: "staticpage",


    myNameIs: "staticpage",
    mixins: [Twenty.mixins.pageMount],

    componentWillUnmount: function componentWillUnmount() {
        Twenty.dom.teardownAutofit();
        var currentPage = Twenty.app.getState("lastPage").id;
        if (Twenty.page.pages[currentPage].unmount) {
            Twenty.page.pages[currentPage].unmount();
        }
    },

    render: function render() {
        var _this60 = this;

        document.title = document.title.split(" | ")[0] + " | " + this.props.title;

        if (Twenty.app.getState("modal")) {
            Twenty.page.closeModal();
        }

        return React.createElement(
            "div",
            { "data-role": "content", className: "staticpage-content" },
            React.createElement(Twenty.Components.emptycomponent, { empty_id: "staticcontentdiv", name: "static_content", ref: function ref(_ref31) {
                    _this60.loadElement = _ref31;
                } }),
            React.createElement("iframe", { id: "staticcontentiframe" })
        );
    }
});

/**
 * @method Twenty.Components.story
 * @memberof Twenty.Components
 * @description story container. this component will take care of initializing 3rd party widgets
 * like google maps or facebook contained in the story content, but also iFrameAutifit.
 * normally, you want a {@link Twenty.Components.storyheader} and a <main></main> element as children of this component.
 * @param {boolean} isSponsored story is sponsored content
 */
Twenty.Components.story = createReactClass({
    displayName: "story",


    myNameIs: "story",

    mixins: [Twenty.mixins.runAfterRender],

    getInitialState: function getInitialState() {
        return {
            runAfterRenderCallback: function runAfterRenderCallback() {
                // init savedScrollTop
                // Twenty.dom.scrollTo(null, Twenty.app.setState("savedScrollTop"));

                if ($('iframe[src^="http://img4.sentifi.com"]').length) {
                    Twenty.dom.addScript({
                        scriptName: Twenty.env.getServer("sentifi")
                    });
                }
                if ($("#gmap-canvas").length) {
                    Twenty.dom.addScript({
                        scriptName: Twenty.env.getServer("googleMapsAPI")
                    });
                    Twenty.dom.addScript({
                        scriptName: Twenty.env.getServer("twentyminGMAPS")
                    });
                }
                if ($('a[href^="https://www.instagram.com"]').length) {
                    Twenty.dom.addScript({
                        scriptName: Twenty.env.getServer("instagram")
                    });
                }
                if (window.twttr && window.twttr.widgets) {
                    window.twttr.widgets.load();
                }
                if (window.FB && window.FB.init) {
                    window.FB.init({
                        appId: Twenty.app.getFBId(),
                        status: true,
                        xfbml: true,
                        version: "v2.6"
                    });
                }

                var waitUnmount = setInterval(function () {
                    if (!Twenty.app.getState("webviewIsMounted")) {
                        Twenty.dom.setupAutofit();
                        Twenty.app.setState("storyIsMounted", true);
                        clearInterval(waitUnmount);
                    }
                }, 200);
            }
        };
    },

    componentWillUnmount: function componentWillUnmount() {
        Twenty.dom.teardownAutofit();
        Twenty.app.setState("storyIsMounted", false);
    },

    render: function render() {
        var className = "story" + (this.props.isSponsored ? " promo" : "");
        return React.createElement(
            "div",
            { className: className },
            this.props.children
        );
    }
});

/**
 * @method Twenty.Components.storyHeader
 * @memberof Twenty.Components
 * @description story item header. this component takes care of rendering the header block of a story.
 * @param {string} oberzeile story kicker/generalization title
 * @param {string} ageofstory textual representation of when the last update to the story occured
 * @param {string} title title of the story
 * @param {string} topline story lead in
 * @param {string} decoration lead in decoration. normally used to categorize a story
 */
Twenty.Components.storyheader = createReactClass({
    displayName: "storyheader",

    render: function render() {
        return React.createElement(
            "header",
            { className: "story-header" },
            this.props.oberzeile && React.createElement(
                "h3",
                { className: "kicker" },
                this.props.oberzeile
            ),
            this.props.ageofstory && React.createElement(
                "span",
                { className: "timestamp" },
                this.props.ageofstory
            ),
            React.createElement(
                "h1",
                { className: "headline" },
                this.props.title
            ),
            this.props.topline && React.createElement(
                "div",
                { className: "topline" },
                this.props.decoration && React.createElement(
                    "span",
                    { className: "decoration", style: { color: "#" + this.props.decoration.color } },
                    this.props.decoration.name
                ),
                this.props.keyword && React.createElement(
                    "span",
                    { className: "keyword" },
                    this.props.keyword
                ),
                React.createElement("span", { dangerouslySetInnerHTML: { __html: this.props.topline } })
            )
        );
    }
});

/**
 * @method Twenty.Components.storylist
 * @memberof Twenty.Components
 * @description splits up a page feed (which has the format of the front feed) into constituent
 * types and renders them as smaller components
 * currently supports:
 * breaking news items {@link Twenty.Components.breakingnews}
 * a group of story teaser items, {@link Twenty.Components.categorytitle}
 * category titles {@link Twenty.Components.storylistitem}
 * a horizontally scrolling list of Bildstrecken and videos {@link Twenty.Components.medialist}
 * the weather {@link Twenty.Components.weather}
 * @param {object[]} data all the data for storylist
 * @param {string} data.type type of the items
 * @param {object[]} data.items list of items
 * @param {function} handleClick
 * @param {string} name name of the page containing the storylist
 */
/* istanbul ignore next */
Twenty.Components.storylist = createReactClass({
    displayName: "storylist",


    myNameIs: "storylist",

    handleClick: function handleClick(storyElement) {
        this.props.handleClick(storyElement);
    },

    getInfiniteScroll: function getInfiniteScroll() {
        var _this61 = this;

        var currentFeed = "category",
            currentID = Twenty.datamodel.getCurrentCategoryID(),
            nextPage;

        if (Twenty.app.getState("category").category && Twenty.app.getState("category").category === Twenty.datamodel.getDefaultCategory()) {
            currentFeed = Twenty.datamodel.getDefaultCategory();
            currentID = false;
        }
        if (Twenty.app.getState("feed") && Twenty.app.getState("feed") === "tag") {
            currentFeed = "tag";
            currentID = Twenty.app.getState("currentTagId");
        }

        if (currentID) {
            currentFeed += "_" + currentID;
        }

        nextPage = Twenty.datamodel.getSavedFeed(currentFeed).content.nextpage;

        if (nextPage) {
            $.when(Twenty.datamodel.runAJAXRequest({
                url: nextPage,
                dataType: "json"
            })).then(function (data) {
                // saveFeed with the newdata.items and newdata.nextpage
                var newItems = data.content.items.item,
                    newviewbreakdown,
                    oldFront = Twenty.datamodel.getSavedFeed(currentFeed),
                    oldItems = oldFront.content.items.item;
                _this61.adTracking.pos = 0;
                oldFront.content.items.item = oldItems.concat(newItems);

                Twenty.datamodel.saveFeed(currentFeed, oldFront, currentID);
                oldFront.content.nextpage = data.content.nextpage;
                newviewbreakdown = Twenty.datamodel.breakdownStoryList(oldFront);

                if (newviewbreakdown && newviewbreakdown.length > 0) {
                    _this61.setState({ data: newviewbreakdown });
                }

                // for GTM
                Twenty.event.dispatch({
                    type: "infiniteScroll"
                });
            });

            // GTM tracking
            Twenty.event.dispatch({
                type: "infinitescroll",
                params: {
                    event: "scroll",
                    pagetype: "more stories"
                }
            });
        }
    },

    returnAd: function returnAd(i, element) {
        var cat = this.adTracking.category.replace(/\s/g, "-");
        cat = cat.toLowerCase();
        cat = cat.latinify();
        var adUnitName = "inside-full-" + cat;
        var adserver_url = Twenty.app.getState("adserver_url");
        adUnitName = adUnitName.replace("inside-full-fakecat", "inside-full-pos" + ++this.adTracking.pos);
        return React.createElement(Twenty.Components.ad, { key: i, adUnitName: adUnitName, adserver_url: adserver_url, data: element });
    },
    getInitialState: function getInitialState() {
        return {
            el: null,
            data: this.props.data
        };
    },

    componentWillMount: function componentWillMount() {
        this.adTracking = {
            category: "fakecat",
            pos: 0
        };
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({ data: nextProps.data });
        this.adTracking = {
            category: "fakecat",
            pos: 0
        };
    },

    shouldComponentUpdate: function shouldComponentUpdate() {
        if (this.state.data.length === 0) {
            Twenty.app.controller.loadErrorPage();
            return false;
        }
        return true;
    },

    componentDidUpdate: function componentDidUpdate() {
        $("img").unveil(100);
    },

    render: function render() {
        if (this.state.data.length > 0) {
            return React.createElement(
                "div",
                { className: "story-list", id: "content" },
                this.state.data.map(function (element, i) {
                    var returnElement,
                        type = element.type;

                    // supported story types filtering happens in data_model.storyBreakdown
                    switch (type) {
                        case "story":
                            // returnElement = <Twenty.Components.storylistset key={i} data={element} handleClick={this.handleClick.bind(this, element, i)} />;
                            returnElement = React.createElement(Twenty.Components.storylistset, { key: i, data: element, handleClick: this.handleClick });
                            break;
                        case "storybundle":
                            returnElement = React.createElement(Twenty.Components.storylistset, { key: i, data: element, handleClick: this.handleClick });
                            break;
                        case "breakingnews":
                            returnElement = React.createElement(Twenty.Components.breakingnews, { key: i, data: element, handleClick: this.handleClick });
                            break;
                        case "category_title":
                            this.adTracking.category = element.items[0].category.toLowerCase();
                            this.adTracking.pos = 0;
                            returnElement = React.createElement(Twenty.Components.categorytitle, { key: i, data: element, handleClick: this.handleClick });
                            break;
                        case "custom_title":
                            this.adTracking.category = element.items[0].title.toLowerCase();
                            this.adTracking.pos = 0;
                            returnElement = React.createElement(Twenty.Components.categorytitle, { key: i, data: element, handleClick: this.handleClick });
                            break;
                        case "media":
                            returnElement = React.createElement(Twenty.Components.medialist, { key: i, data: element, index: i, showHeader: "true" });
                            break;
                        case "horizontal_slide":
                            returnElement = React.createElement(
                                "div",
                                { key: i, className: "slideshow-front-container" },
                                React.createElement(Twenty.Components.slideshow, { slideshowType: "front", data: element.items[0], title: "horizontal slides", id: Twenty.core.getUniqueKey("slideshow"), showIcon: true, pagination: true })
                            );
                            break;
                        case "videosection":
                            returnElement = React.createElement(Twenty.Components.videosection, { key: i, data: element, index: i });
                            break;
                        case "weather":
                            returnElement = React.createElement(Twenty.Components.weather, { key: i, data: element });
                            break;
                        case "smart_rectangle":
                            returnElement = this.returnAd(i, element);
                            break;
                        case "wideboard":
                            returnElement = this.returnAd(i, element);
                            break;
                        case "smartad":
                            returnElement = React.createElement(Twenty.Components.ad, { key: i, adUnitName: element.items[0].adUnitName_smartad, adserver_url: element.items[0].adserver_url_smartad, data: element });
                            break;
                        case "facebooklikebox":
                            returnElement = React.createElement(Twenty.Components.facebooklike, { key: i, data: element });
                            break;
                        case "webview":
                            returnElement = React.createElement(Twenty.Components.webview, { key: i, data: element });
                            break;
                        case "longformstory":
                            returnElement = React.createElement(Twenty.Components.longformstorylist, { key: i, data: element });
                            break;
                        case "meteonews":
                            returnElement = React.createElement(Twenty.Components.meteonews, { key: i, data: element });
                            break;
                        case "recommender":
                            var recommenderObject = {
                                feedServer: Twenty.env.getServer("recommender"),
                                numResults: 3,
                                hideHeader: true,
                                type: "POST",
                                enctype: "application/json"
                            };
                            if (recommenderObject.feedServer) {
                                returnElement = React.createElement(Twenty.Components.recommender, { language: Twenty.i18n.lang, settings: recommenderObject, key: i });
                            }
                            break;
                        default:
                            Twenty.tracking.errorlog({
                                category: "component",
                                action: "storylist",
                                label: "Unsupported type in front feed items: " + type
                            });
                            returnElement = false;
                            break;
                    }
                    return returnElement;
                }, this),
                this.props.infiniteScroll && React.createElement(Twenty.Components.infinity, { loadFunction: this.getInfiniteScroll })
            );
        } else {
            return React.createElement(
                "div",
                { className: "nostoryfound" },
                "zurzeit keine Story"
            );
        }
    }
});

/**
 * @method Twenty.Components.storylistitem
 * @memberof Twenty.Components
 * @description story elements rendered as list items on the front and section (category) pages
 * We already have the data required to produce this page in the front-page or
 * category page feed. This data object is passed down into this element
 * (Twenty.Components.storylistitem) and cascaded back <em>up</em> the react parent chain
 * until it hits the top where it can be passed into the page loader
 * {@link Twenty.page.load} as the second "data" parameter.
 * @param {Object} data data of the storylistitem
 * @param {string} data.id id of the storylistitem
 * @param {string} data.oberzeile kicker title
 * @param {"big" | "medium" | "small" | "tablet_big" | "web_big" | "web_medium" | "web_small"} data.layout_size layout size.
 * @param {Object[]} data.images array of image urls
 * @param {string} data.images.src_big big image url
 * @param {string} data.images.src_medium medium image url
 * @param {string} data.images.src_small small image url
 * @param {string} data.images.src_tablet_big big image url for tablet
 * @param {string} data.images.src_web_big big image url for web
 * @param {string} data.images.src_web_medium small image url for web
 * @param {string} data.images.src_web_small small image url for web
 * @param {number} data.livepage_nxp shows if the story contains a nxp ticker
 * @param {number} data.liveticker shows if the story contains a liveticker
 * @param {string} data.livepage
 * @param {Object} data.multimedia_icons display small icons to show that the story has special elements
 * @param {boolean} data.multimedia_icons.video story contains video
 * @param {boolean} data.multimedia_icons.context story contains context
 * @param {boolean} data.multimedia_icons.newsticker story contains newsticker
 * @param {boolean} data.multimedia_icons.info_box story contains info box
 * @param {boolean} data.multimedia_icons.gallery story contains gallery
 * @param {boolean} data.multimedia_icons.comment story contains comments
 * @param {boolean} data.multimedia_icons.nxp_ticker story contains nxp ticker
 * @param {Object} data.communityobject the communityobject of the storylistitem
 * @param {number} data.communityobject.comments_number number of comments
 * @param {string} data.link url to the story page
 * @param {string} data.title title
 * @param {function} handleClick
*  @param {Object} data.items.item.metrics
 */

/* istanbul ignore next */
Twenty.Components.storylistitem = createReactClass({
    displayName: "storylistitem",


    myNameIs: "storylistitem",

    handleClick: function handleClick() {
        this.props.handleClick(this.props.data);
    },

    shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
        return nextProps.data.id !== this.props.data.id || nextProps.data.communityobject.shares_total !== this.props.data.communityobject.shares_total;
    },

    render: function render() {
        var layout_size,
            classses,
            pics,
            picurl,
            livetickerIcon = false,
            actionIconsData,
            uKey = Twenty.core.getUniqueKey("actionicon"),
            tKey = Twenty.core.getUniqueKey("actionicon"),
            extraClass = Twenty.datamodel.getLeadTitleClass(this.props.data),
            isPaidPost = false,
            classses_wrapper;

        layout_size = this.props.data.layout_size;
        classses = "story-list-item " + layout_size;

        // filter out unwanted images
        var filteredPics = Twenty.datamodel.filterStoryImages(this.props.data.images);
        pics = filteredPics[filteredPics.length - 1];

        // when there are no teaserimages, set a default one
        if (layout_size) {
            picurl = pics ? pics["src_" + layout_size] : "";
        } else {
            picurl = this.props.data.images[0];
        }
        if (Twenty.datamodel.excludeStory && Twenty.datamodel.excludeStory(this.props.data)) {
            return false;
        }

        if (this.props.data.livepage_nxp && this.props.data.livepage_nxp !== 0) {
            livetickerIcon = React.createElement(Twenty.Components.actionicon, { data: { type: "nxp_ticker" }, key: tKey });
        }

        if (this.props.data.liveticker && this.props.data.liveticker !== 0 && this.props.data.livepage) {
            livetickerIcon = React.createElement(Twenty.Components.actionicon, { data: { type: "newsticker" }, key: tKey });
        }

        if (this.props.data.multimedia_icons || this.props.data.communityobject) {
            if (this.props.data.catname !== "Web-Spezial") {
                actionIconsData = {
                    icons: this.props.data.multimedia_icons || [],
                    comment_count: this.props.data.communityobject && this.props.data.communityobject.comments_number || 0,
                    shares_total: this.props.data.communityobject && this.props.data.communityobject.shares_total || 0,
                    html_content: this.props.data.communityobject && this.props.data.communityobject.html_content || "",
                    icon_names: this.props.data.communityobject && this.props.data.communityobject.icon_names || []
                };
            }
        }

        var link = this.props.data.mobile_link || this.props.data.link || "",
            freeMovableLayout = this.props.data.freeMovableLayout || false,
            showKickerInStoryListItem = this.props.data.showKickerInStoryListItem || true,
            showLeadInStoryListItem = this.props.data.showLeadInStoryListItem || false;

        classses = "story-list-item " + layout_size;
        classses_wrapper = "story-list-item-wrapper " + layout_size;

        if (this.props.data.layout_type && this.props.data.layout_type === "publireportage") {
            classses_wrapper += " sponsored";
            isPaidPost = true;
        }

        var imgHeight = {
            height: this.props[this.props.data.layout_size + "ImageSize"] ? this.props[this.props.data.layout_size + "ImageSize"] + "px" : "auto"
        };

        var leadText = "";
        if (this.props.data.setPreTitleForLead && this.props.data.setPreTitleForLead.preTitle.position === "lead" && this.props.data.setPreTitleForLead.preTitle.name && this.props.data.setPreTitleForLead.preTitle.color) {
            leadText += '<span class="' + this.props.data.setPreTitleForLead.type + '-lead-title" style="color:#' + this.props.data.setPreTitleForLead.preTitle.color + '">' + this.props.data.setPreTitleForLead.preTitle.name + "</span>";
        }

        if (this.props.data.lead) {
            leadText += this.props.data.lead;
        }

        if (this.props.data.keyword) {
            leadText = "<span class='keyword'>" + this.props.data.keyword + "</span>" + leadText;
        }

        return React.createElement(
            "article",
            { href: link, className: classses, onClick: this.handleClick, key: this.props.data.id },
            freeMovableLayout ? React.createElement(
                "div",
                { className: classses_wrapper },
                React.createElement("img", { className: "storyimage", style: imgHeight, src: picurl, "data-src": picurl, "data-size": this.props.data.layout_size, ref: "img" }),
                isPaidPost && React.createElement(
                    "div",
                    { className: "paidpost" },
                    "Paid Post"
                ),
                React.createElement(
                    "div",
                    { className: "storytitle" },
                    this.props.data.genre && this.props.data.genre.position === "top" && this.props.data.genre.name && this.props.data.genre.color && React.createElement("span", { className: "genre-top-title", style: { color: "#" + this.props.data.genre.color }, dangerouslySetInnerHTML: { __html: this.props.data.genre.name } }),
                    this.props.data.decoration && this.props.data.decoration.position === "top" && this.props.data.decoration.name && this.props.data.decoration.color && React.createElement("span", { className: "decoration-top-title", style: { color: "#" + this.props.data.decoration.color }, dangerouslySetInnerHTML: { __html: this.props.data.decoration.name } }),
                    showKickerInStoryListItem && this.props.data.oberzeile && React.createElement(
                        "h3",
                        { className: "kicker" },
                        React.createElement(
                            "span",
                            { className: extraClass },
                            this.props.data.oberzeile
                        )
                    ),
                    this.props.data.title && React.createElement(
                        "h1",
                        { className: "headline" },
                        this.props.data.title
                    )
                ),
                React.createElement(
                    "div",
                    { className: "storytext" },
                    this.props.data.lead && showLeadInStoryListItem && React.createElement("div", { className: "lead", dangerouslySetInnerHTML: { __html: leadText } })
                ),
                React.createElement(
                    "div",
                    { className: "metainfo" },
                    actionIconsData && React.createElement(Twenty.Components.actioniconlist, { data: actionIconsData, key: uKey }),
                    livetickerIcon && React.createElement(
                        "div",
                        { className: "actionicons" },
                        livetickerIcon
                    )
                )
            ) : React.createElement(
                "div",
                { className: classses_wrapper },
                React.createElement("img", { className: "storyimage", style: imgHeight, src: picurl, "data-src": picurl, "data-size": this.props.data.layout_size, ref: "img" }),
                React.createElement(
                    "div",
                    { className: "storybox" },
                    React.createElement(
                        "div",
                        { className: "storytitle" },
                        this.props.data.oberzeile && showKickerInStoryListItem && React.createElement(
                            "h3",
                            { className: "kicker" },
                            React.createElement(
                                "span",
                                { className: extraClass },
                                this.props.data.oberzeile
                            )
                        ),
                        this.props.data.title && React.createElement(
                            "h1",
                            { className: "headline" },
                            this.props.data.title
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "storytext" },
                        this.props.data.lead && showLeadInStoryListItem && React.createElement("div", { className: "lead", dangerouslySetInnerHTML: { __html: leadText } }),
                        actionIconsData && React.createElement(Twenty.Components.actioniconlist, { data: actionIconsData, key: uKey }),
                        livetickerIcon && React.createElement(
                            "div",
                            { className: "actionicons" },
                            livetickerIcon
                        )
                    )
                )
            )
        );
    }
});

/**
 * @method Twenty.Components.storylistset
 * @memberof Twenty.Components
 * @description A set of story teasers
 * @param {Object[]} data An array item is the data that is passed to {@link Twenty.Components.storylistitem}
 * @param {function} handleClick
 **/

Twenty.Components.storylistset = createReactClass({
    displayName: "storylistset",


    myNameIs: "storylistset",

    handleClick: function handleClick(element) {
        this.props.handleClick(element);
    },

    getInitialState: function getInitialState() {
        // here we store the sizes for small and medium images inside a storylistitem
        return {
            smallImageSize: null,
            mediumImageSize: null,
            setParentState: function (obj) {
                this.setState(obj);
            }.bind(this)
        };
    },

    render: function render() {
        var sectionKey = Twenty.core.getUniqueKey("storylistset");
        var classStoryListSet = ["storylistset"];

        if (this.props.data.type === "storybundle") {
            classStoryListSet.push("story-bundle");
        }

        classStoryListSet = classStoryListSet.join(" ");
        return React.createElement(
            "section",
            { ref: "item", key: this.props.storylistIndex, className: classStoryListSet },
            this.props.data.items.map(function (element, i) {
                var itemKey = sectionKey + "_" + i;
                return React.createElement(Twenty.Components.storylistitem, _extends({ data: element, key: itemKey, handleClick: this.handleClick }, this.state));
            }, this)
        );
    }
});

/**
 * @method Twenty.Components.swipe
 * @memberof Twenty.Components
 * @description place this component at the end of another component to enrich it with touch and swipe functionality
 * @param {HTMLElement} swipeDomNode the dom node of the swipeable element. if not defined it takes the element with class "swipeable".
 * @param {number} currentSlide current slide number is required for touchstart position
 * @param {number} slideWidth width of a slide
 * @param {Object} transitionClassNames the css classes that are being added to the slides while transition (requires "slow" and "fast" as keys)
 * @param {function} move this function is called on touchmove and receives pixel value (mostly to move a dom element with css transform)
 * @param {function} goToCurrentSlide this function is called when it should stay on current slide
 * @param {function} goToPrevSlide this function is called when it should swipe to previous slide
 * @param {function} goToNextSlide this function is called when it should swipe to next slide
 * @param {function} goToFullscreen this function is called when it should switch to fullscreen mode
 */

/* istanbul ignore next */
Twenty.Components.swipe = createReactClass({
    displayName: "swipe",


    myNameIs: "swipe",
    slideWidth: 0,
    sensitivity: 90,
    swipeStartTime: 0,
    touchStartX: 0,
    touchStartY: 0,
    swipeStartX: 0,
    moveX: 0,
    moveY: 0,
    onTouch: false,
    hasEvents: false,

    triggerMove: function triggerMove() {
        if (this.onTouch) {
            requestAnimationFrame(this.triggerMove);
            this.props.move(this.swipeStartX + this.moveX + "px");
        }
    },

    touchStartHandler: function touchStartHandler(e) {
        this.slideWidth = this.props.slideWidth;
        this.moveX = 0;
        this.moveY = 0;
        this.swipeStartTime = new Date().getTime();
        this.touchStartX = e.touches[0].pageX;
        this.touchStartY = e.touches[0].pageY;
        this.swipeStartX = -Math.abs(this.props.currentSlide * this.props.slideWidth);
        this.swipeDomNode.classList.remove(this.props.transitionClassNames.slow, this.props.transitionClassNames.fast);
        this.onTouch = true;
        requestAnimationFrame(this.triggerMove);
    },

    touchMoveHandler: function touchMoveHandler(e) {
        this.moveX = e.touches[0].pageX - this.touchStartX;
        this.moveY = e.touches[0].pageY - this.touchStartY;
        if (Math.abs(this.moveY) > Math.abs(this.moveX)) {
            return;
        }
        e.preventDefault();
    },

    touchEndHandler: function touchEndHandler() {
        var swipeTime = Math.abs(this.swipeStartTime - new Date().getTime()),
            absMoveX = Math.abs(this.moveX),
            isTap = this.moveX === 0 && this.moveY === 0 ? true : false,
            isSlowSwipe = swipeTime > 500 ? true : false,
            isVerySlowSwipe = swipeTime > 1000 ? true : false,
            isValidDistance = absMoveX > this.sensitivity ? true : false;

        this.onTouch = false;
        /* eslint-disable no-lonely-if */
        if (isTap) {
            // fullscreen open
            this.props.onSlideTap();
        } else {
            // stay
            if (!isValidDistance || isVerySlowSwipe) {
                this.props.goToCurrentSlide(this.props.transitionClassNames.slow);
            } else {
                if (isSlowSwipe && isValidDistance) {
                    // slow to next slide
                    if (this.moveX < 0) {
                        this.props.goToNextSlide(this.props.transitionClassNames.slow);
                    } else {
                        // slow to prev slide
                        this.props.goToPrevSlide(this.props.transitionClassNames.slow);
                    }
                } else {
                    if (isValidDistance) {
                        // fast to next slide
                        if (this.moveX < 0) {
                            this.props.goToNextSlide(this.props.transitionClassNames.fast);
                        } else {
                            // fast to prev slide
                            this.props.goToPrevSlide(this.props.transitionClassNames.fast);
                        }
                    }
                }
            }
        }
        /* eslint-enable no-lonely-if */

        this.onTouch = false;
    },

    addEventListeners: function addEventListeners() {
        this.swipeDomNode.addEventListener("touchstart", this.touchStartHandler, false);
        this.swipeDomNode.addEventListener("touchmove", this.touchMoveHandler, false);
        this.swipeDomNode.addEventListener("touchend", this.touchEndHandler, false);
        this.swipeDomNode.addEventListener("touchcancel", this.touchEndHandler, false);
    },

    removeEventListeners: function removeEventListeners() {
        this.swipeDomNode.removeEventListener("touchstart", this.touchStartHandler, false);
        this.swipeDomNode.removeEventListener("touchmove", this.touchMoveHandler, false);
        this.swipeDomNode.removeEventListener("touchend", this.touchEndHandler, false);
        this.swipeDomNode.removeEventListener("touchcancel", this.touchEndHandler, false);
    },

    componentDidMount: function componentDidMount() {
        this.swipeDomNode = this.props.swipeDomNode || this.swipeRef.parentNode.getElementsByClassName("swipeable")[0];
        if (!this.hasEvents) {
            this.addEventListeners();
            this.hasEvents = true;
        }
    },

    componentDidUpdate: function componentDidUpdate() {
        if (!this.hasEvents) {
            this.addEventListeners();
            this.hasEvents = true;
        }
    },

    componentWillUnmount: function componentWillUnmount() {
        this.removeEventListeners();
    },

    render: function render() {
        var _this62 = this;

        return React.createElement("div", { ref: function ref(_ref32) {
                _this62.swipeRef = _ref32;
            } });
    }

});

/* istanbul ignore next */
Twenty.Components.tags = createReactClass({
    displayName: "tags",


    // mixins: [Twenty.mixins.updateComponent],

    handleClick: function handleClick(i) {
        Twenty.app.controller.loadTagPage(this.props.data[i]);
    },

    render: function render() {
        if (!this.props.data || this.props.data.length === 0) {
            return false;
        }
        return React.createElement(
            "div",
            { className: "tags box" },
            React.createElement(
                "h2",
                null,
                React.createElement(Twenty.i18n.str, { textref: "tags.header" })
            ),
            React.createElement(
                "ul",
                null,
                this.props.data.map(function (tag, i) {
                    return React.createElement(
                        "li",
                        { className: "btn tag", key: i, onClick: this.handleClick.bind(this, i) },
                        tag.name
                    );
                }, this)
            )
        );
    }
});

/**
* Renders a Toast-Message (a box with some text which will hide automatically). Rendered by other components such as {@link Twenty.Components.commentform} and {@link Twenty.Components.form}.
* @method Twenty.Components.toast
* @memberof Twenty.Components
* @param {string} message message
* @param {string} title title
* @param {"error" | "success"} type for appending to css classes.
* @example
* 1. include the toast-mixin
* 2. Copy this example config into a component's-state:
* toastConfig1: {
*      type: "success",
*      title: "",
*      message: "Vielen Dank! Dein Kommentar wird in KÃ¼rze verÃ¶ffentlicht."
*  }
*
*  Include toast component e.g. <Twenty.Components.toast {...this.state.toastConfigError}/>
*
*  Show and hide the message with:
*  this.showToastMessage("toastConfig1");
*  If you need a longer close-delay, just append it as argument:
*  this.showToastMessage("toastConfig1", 5000);
*/
/* istanbul ignore next */
Twenty.Components.toast = createReactClass({
    displayName: "toast",


    myNameIs: "toast",
    mixins: [Twenty.mixins.pureRender],

    getInitialState: function getInitialState() {
        return this.props;
    },

    componentWillUpdate: function componentWillUpdate(nextProps) {
        var $toast = $(this.domNode);
        if (nextProps.show) {
            $toast.hide().slideDown();
        } else {
            $toast.slideUp();
        }
    },

    render: function render() {
        var _this63 = this;

        return React.createElement(
            "div",
            { ref: function ref(_ref33) {
                    _this63.domNode = _ref33;
                }, className: "hidden toast " + this.state.type },
            React.createElement(
                "h1",
                null,
                this.state.title
            ),
            React.createElement("p", { dangerouslySetInnerHTML: { __html: this.state.message } })
        );
    }
});

/**
 * @method Twenty.Components.topelement
 * @memberof Twenty.Components
 * @description displayed on story pages, as the top element. can be one of those types: image, diashow, customHTML, video, youtube, zattoo.
 * @param {Object} data gets object from story component, which is actually the feed element.
 * @param {"image" | "diashow" | "customHTML" | "video" | "youtube" | "zattoo"} data.type the type of element to render.
 * @param {string | Object} data.value json url or slide objects for when data.type is "diashow".

 */
/* istanbul ignore next */
Twenty.Components.topelement = createReactClass({
    displayName: "topelement",


    myNameIs: "topelement",

    componentDidMount: function componentDidMount() {
        if (window.twttr) {
            window.twttr.widgets.load();
        }
    },

    render: function render() {
        var topelement,
            key = Math.random().toString(),
            extraelement = false;

        if (this.props.data) {
            switch (this.props.data.type) {
                case "image":
                    topelement = React.createElement(Twenty.Components.heroimage, { data: this.props.data, key: key });
                    break;
                case "diashow":
                    if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") {
                        if (typeof this.props.data.value == "string") {
                            topelement = React.createElement(Twenty.Components.slideshow, { slideshowType: "top-element", feedUrl: this.props.data.value, key: Twenty.core.getUniqueKey("slideshow") });
                        } else {
                            topelement = React.createElement(Twenty.Components.slideshow, _extends({ slideshowType: "top-element" }, this.props.data.value, { key: Twenty.core.getUniqueKey("slideshow") }));
                        }
                    } else {
                        // SSR
                        if (typeof this.props.data.value == "string") {
                            topelement = React.createElement(Twenty.Components.slideshow, { propsData: this.props.propsData, slideshowType: "top-element", feedUrl: this.props.data.value, key: Twenty.core.getUniqueKey("slideshow") });
                        } else {
                            topelement = React.createElement(Twenty.Components.slideshow, { propsData: this.props.propsData, slideshowType: "top-element", pagination: this.props.data.value.pagination, items: this.props.data.value.items, title: this.props.data.value.title, id: this.props.data.value.id, key: Twenty.core.getUniqueKey("slideshow") });
                        }
                    }
                    break;
                case "customHTML":
                    topelement = React.createElement(Twenty.Components.customcode, { data: this.props.data, key: key });
                    break;
                case "video":
                    var configData = Twenty.datamodel.videoplayerParams || null;
                    topelement = React.createElement(Twenty.Components.videoplayer, { videoID: this.props.data.id, videoDescription: this.props.data.description, configData: configData, key: key });
                    break;
                case "youtube":
                    topelement = React.createElement("iframe", { width: "560", height: "315", src: this.props.data.value, frameBorder: "0", allowFullScreen: true });
                    break;
                case "iframe":
                    var className = ["video-topelement"];
                    if (this.props.data.className) {
                        className = [className].concat(_toConsumableArray(this.props.data.ExtraClassName));
                    }
                    topelement = React.createElement("iframe", { width: this.props.data.width, height: this.props.data.height, src: this.props.data.url, frameBorder: "0", scrolling: "no", allowtransparency: "true", allowFullScreen: true, className: className.join(" ") });
                    if (this.props.data.videoDescription) {
                        extraelement = React.createElement(
                            "p",
                            { className: "video-description" },
                            this.props.data.videoDescription
                        );
                    }
                    break;
                case "zattoo":
                    topelement = React.createElement(Twenty.Components.zattoo, { data: this.props.data });
                    break;
                default:
                    Twenty.tracking.errorlog({
                        category: "component",
                        action: "topelement",
                        label: "unsupported topelement type: " + this.props.data.type
                    });
                    break;
            }
        }
        return React.createElement(
            "div",
            { className: "topelement" },
            topelement,
            extraelement
        );
    }
});

/**
 * @method videoplayer
 * @memberof Twenty.Components
 * @param {String} videoID - the ID of the video to play
 * @param {String} videoDescription - optional description text
 * @param {Arary} configData - custom parameters and values
 */
/* istanbul ignore next */
Twenty.Components.videoplayer = createReactClass({
    displayName: "videoplayer",


    myNameIs: "videoplayer",
    videopath: "",
    additionalParams: "",
    playerHeight: 0,

    componentWillMount: function componentWillMount() {
        if (this.props.configData) {
            var configData = this.props.configData;
            for (var i = 0; i < configData.length; i++) {
                this.additionalParams += "|" + configData[i].paramName + "@" + configData[i].paramValue;
            }
        }
        if (Twenty.app.getState("adpreview")) {
            this.additionalParams += "|adpreview@" + Twenty.app.getState("adpreview");
        }
        if (this.props.data && this.props.data.testComponent === true) {
            this.videopath = this.props.data.videopath;
        }
        this.videopath = Twenty.env.getServer("videoplayer") + "?params=client@" + Twenty.env.getServer("videoclient") + "|videoId@" + this.props.videoID + this.additionalParams;
        this.playerHeight = parseInt(Tw.GLOBALS.documentwidth) / 16 * 9;
    },

    componentDidMount: function componentDidMount() {
        if (this.props.fullscreen) {
            Twenty.dom.setupAutofit();
        }
    },

    render: function render() {
        if (this.props.fullscreen) {
            return React.createElement(
                "div",
                { className: "video-fullscreen-container" },
                React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "div",
                        { className: "video-fullscreen-title-header" },
                        this.props.videoCustomBackButtonEnable && this.props.videoCustomBackButtonEnable === true && this.props.videoCustomBackButton ? React.createElement("span", { className: "video-back-button-container", dangerouslySetInnerHTML: { __html: this.props.videoCustomBackButton } }) : React.createElement("span", { className: "btn close icon icon-left-open", onClick: this.props.closeFunc }),
                        React.createElement(
                            "div",
                            { className: "title" },
                            this.props.videoTitle
                        )
                    ),
                    React.createElement(
                        "div",
                        { id: "video-player" },
                        React.createElement("iframe", { className: "autofit video-frame", src: this.videopath, width: "100%", height: this.playerHeight, frameBorder: "0", scrolling: "no", allowFullScreen: true })
                    ),
                    this.props.videoDescription && React.createElement("div", { className: "videoDescription-container", dangerouslySetInnerHTML: { __html: this.props.videoDescription } })
                )
            );
        } else {
            var description = this.props.videoDescription && this.props.videoDescription.length ? React.createElement("div", { className: "video-legend", dangerouslySetInnerHTML: { __html: this.props.videoDescription } }) : React.createElement(Twenty.Components.emptycomponent, null);
            return React.createElement(
                "div",
                { className: "video-container" },
                React.createElement(
                    "div",
                    { id: "video-player" },
                    React.createElement("iframe", { className: "autofit video-frame", src: this.videopath, width: "100%", height: this.playerHeight, frameBorder: "0", scrolling: "no", allowFullScreen: true })
                ),
                description
            );
        }
    }
});

Twenty.Components.videoplayerFullscreen = createReactClass({
    displayName: "videoplayerFullscreen",

    render: function render() {
        return React.cloneElement(React.createElement(Twenty.Components.videoplayer, { fullscreen: true }), this.props);
    }
});

Twenty.Components.videopreview = createReactClass({
    displayName: "videopreview",

    render: function render() {
        return React.createElement(
            "div",
            { className: "videopreview", onClick: this.props.showMediaClickHandler.bind(this, this.props.data) },
            React.createElement(
                "div",
                { className: "img-wrapper", style: { backgroundImage: "url(" + this.props.data.thumbnail_mob_quad + ")" } },
                React.createElement("span", { className: "btn btn-play icon icon-play" })
            ),
            React.createElement(
                "div",
                { className: "txt-wrapper" },
                React.createElement(
                    "h1",
                    { className: "headline" },
                    this.props.data.title
                )
            )
        );
    }
});

Twenty.Components.videosection = createReactClass({
    displayName: "videosection",


    myNameIs: "videosection",

    render: function render() {
        var showMedia = function showMedia(element) {
            var videoObj = {
                mediatype: "video",
                videoID: element.id,
                videoTitle: element.title,
                closeFunc: function closeFunc() {
                    Twenty.dom.allowWindowScroll();
                    Twenty.app.controller.unloadFullscreenMedia();
                }
            };
            Twenty.app.controller.openMedia("video", videoObj);
        };
        return React.createElement(
            "div",
            { className: "video-section" },
            React.createElement(Twenty.Components.videopreview, { showMediaClickHandler: showMedia, data: this.props.data.items[0].elements[0] }),
            React.createElement(Twenty.Components.medialist, { data: this.props.data, type: "video" })
        );
    }
});

/**
* @method Twenty.Components.voting
* @memberof Twenty.Components
* @description voting component, the myVote state shows what the user voted (data from localstorage) -1 = dislike, 0 = neutral, 1 = like
* undo value (only for type "dia" and "story"): -1 = undo dislike, 0 = no undo action, 1 = undo like
* @param {String} voteType - the type of the voting ("comment" | "dia" | "story") ("dia" = slideshow)
* @param {String} voteId - the id of the current vote item ("comment id" for "comment" | "diashow id" for "dia" | "story id" for "story")
* @param {String} storyId - current story id (needed for type "comment")
* @param {String} msgId - number of the current comment
* @param {String} threadId - id of the current thread
* @param {Object} data - the communityobject data
*/
Twenty.Components.voting = createReactClass({
    displayName: "voting",


    myNameIs: "voting",

    trackVote: function trackVote(vote) {
        // track like
        if (vote === 1) {
            // for GTM
            Twenty.event.dispatch({
                type: "like",
                params: {
                    event: this.props.voteType + "Like"
                }
            });
        }

        // track dislike
        if (vote === -1) {
            // for GTM
            Twenty.event.dispatch({
                type: "dislike",
                params: {
                    event: this.props.voteType + "Dislike"
                }
            });
        }
    },

    sendVote: function sendVote(vote, undo) {
        var url = void 0,
            data = void 0;

        switch (this.props.voteType) {
            case "comment":
                url = Twenty.env.getServer("voteComment") + this.props.storyId + "/message/" + this.props.msgId;
                data = {
                    thread: this.props.threadId,
                    vote: vote,
                    app: "true",
                    cors: window.location.host
                };
                break;
            case "dia":
            case "story":
                url = Twenty.env.getServer("vote");
                data = {
                    id: this.props.voteId,
                    typ: this.props.voteType,
                    vote: vote,
                    undo: undo
                };
                break;
        }

        Twenty.datamodel.runAJAXRequest({
            url: url,
            data: data,
            success: function success() {
                // console.log(data);
            },
            error: function error() {
                // console.log(error.statusText);
            }
        });

        this.trackVote(vote);
    },

    handleClick: function handleClick(voteAction) {
        var newVote = void 0,
            localStorageItem = {};
        var undoVal = this.state.myVote,
            // undo current vote (dia and story)
        localStorageData = Twenty.dom.dataStorage.getItem(this.props.voteType + "Votes") || {},
            localStorageId = this.props.voteId;

        if (voteAction === "like") {
            switch (this.state.myVote) {

                // dislike -> like
                case -1:
                    newVote = 1;
                    break;

                // neutral -> like
                case 0:
                    newVote = 1;
                    break;

                // like -> neutral
                case 1:
                    newVote = 0;
                    break;
            }
        }
        if (voteAction === "dislike") {
            switch (this.state.myVote) {

                // dislike -> neutral
                case -1:
                    newVote = 0;
                    break;

                // neutral -> dislike
                case 0:
                    newVote = -1;
                    break;

                // like -> dislike
                case 1:
                    newVote = -1;
                    break;
            }
        }

        this.setState({
            myVote: newVote
        });

        localStorageItem = _defineProperty({}, localStorageId, newVote);

        Twenty.dom.dataStorage.add(localStorageItem, localStorageData);

        // this.updateLocalStorage(localStorageData, localStorageItem);
        this.sendVote(newVote, undoVal);
    },
    getInitialState: function getInitialState() {
        return {
            myVote: 0
        };
    },

    componentWillMount: function componentWillMount() {
        var voteId = this.props.voteId,
            localStorageData = Twenty.dom.dataStorage.getItem(this.props.voteType + "Votes") || {};

        var alreadyVotedVote = Twenty.dom.dataStorage.getItem(this.props.voteType + "Votes", voteId);

        if (alreadyVotedVote) {
            this.setState({
                myVote: localStorageData[voteId]
            });
        }
    },

    render: function render() {
        var voteTypeClass = " voting-" + this.props.voteType,
            likes = parseInt(this.props.data.thumbs_up),
            dislikes = parseInt(this.props.data.thumbs_down),
            likeActive = this.state.myVote === 1 ? " active" : "",
            dislikeActive = this.state.myVote === -1 ? " active" : "";

        return React.createElement(
            "div",
            { className: "voting" + voteTypeClass },
            React.createElement(
                "a",
                { className: "vote-btn upvote" + likeActive, onClick: this.handleClick.bind(this, "like") },
                React.createElement(
                    "span",
                    { className: "content" },
                    React.createElement("span", { className: "icon icon-thumbs-up" }),
                    React.createElement(
                        "span",
                        { className: "voting-number-mask" },
                        React.createElement(
                            "span",
                            { className: "voting-number-wrapper" },
                            React.createElement(
                                "span",
                                { className: "voting-number" },
                                likes + 1
                            ),
                            React.createElement(
                                "span",
                                { className: "voting-number" },
                                likes
                            ),
                            React.createElement(
                                "span",
                                { className: "voting-number" },
                                likes + 1
                            )
                        )
                    )
                )
            ),
            React.createElement(
                "a",
                { className: "vote-btn downvote" + dislikeActive, onClick: this.handleClick.bind(this, "dislike") },
                React.createElement(
                    "span",
                    { className: "content" },
                    React.createElement("span", { className: "icon icon-thumbs-down" }),
                    React.createElement(
                        "span",
                        { className: "voting-number-mask" },
                        React.createElement(
                            "span",
                            { className: "voting-number-wrapper" },
                            React.createElement(
                                "span",
                                { className: "voting-number" },
                                dislikes + 1
                            ),
                            React.createElement(
                                "span",
                                { className: "voting-number" },
                                dislikes
                            ),
                            React.createElement(
                                "span",
                                { className: "voting-number" },
                                dislikes + 1
                            )
                        )
                    )
                )
            )
        );
    }
});

/**
 * @method Twenty.Components.weather
 * @memberof Twenty.Components
 * @description an icon and a temperature string
 * @param {Object} data gets data from {@link Twenty.Components.storylist}.
 * @param {Object[]} data.items iframe elements.
 * @param {!string} data.alt_tag alt text
 * @param {string} data.icon a file corresponding to a provided icon without the file suffix (this is expected to be ".png")
 * @param {string} data.temp a formatted temperature string (eg "11Â°")
 * @requires Twenty.env.server.weatherFeed
 * @requires optional Twenty.env.server.weatherPage
 * @description The weather component renders a weatherFeed. Optionally, it can link to an external page to be linked as a staticpage
 */
/* istanbul ignore next */

Twenty.Components.weather = createReactClass({
    displayName: "weather",


    myNameIs: "weather",

    handleClick: function handleClick() {
        var weatherPage = Twenty.env.getServer("weatherPage");
        if (weatherPage) {
            Twenty.app.controller.loadWeatherPage(weatherPage);
        }
    },

    getInitialState: function getInitialState() {
        return {
            icon: "",
            alt_tag: "",
            temp: ""
        };
    },

    componentWillMount: function componentWillMount() {
        var weatherServer = Twenty.env.getServer("weatherFeed");
        if (weatherServer) {
            Twenty.datamodel.runAJAXRequest({
                url: weatherServer,
                dataType: "json",
                success: function (obj) {
                    var newdata = obj.content.data;
                    this.setState(newdata);
                }.bind(this)
            });
        } else {
            this.setState(this.props.data);
        }
    },

    render: function render() {
        var imgsrc = (this.props.data.iconPath || "./webapp/img/weather/") + (this.state.icon || "39") + ".png",
            alttag = this.state.alt_tag || "";
        return React.createElement(
            "div",
            { className: "weather", onClick: this.handleClick },
            React.createElement("img", { src: imgsrc, className: "weather-icon", alt: alttag }),
            React.createElement(
                "p",
                null,
                this.state.temp
            )
        );
    }
});

/**
 * @method Twenty.Components.webview
 * @memberof Twenty.Components
 * @description html teasers that appear in the story list. it can be created in the content dictator. rendered in {@link Twenty.Components.storylist} component.
 * @param {Object} data gets data from {@link Twenty.Components.storylist}.
 * @param {Object[]} data.items iframe elements.
 * @param {boolean} data.items.show.app the item will be rendered on app if true.
 * @param {boolean} data.items.show.desktop the item will be rendered on desktop page if true.
 * @param {boolean} data.items.show.mobile the item will be rendered on mobile page if true.
 * @param {string} data.items.type "webview".
 * @param {string} data.items.id id for this iframe element.
 * @param {string} data.items.url iframe url.
 */
/* istanbul ignore next */

Twenty.Components.webview = createReactClass({
    displayName: "webview",


    myNameIs: "webview",

    mixins: [Twenty.mixins.pureRender],

    componentWillMount: function componentWillMount() {
        this.iframekey = Twenty.core.getUniqueKey("webview_iframe");
    },

    componentDidMount: function componentDidMount() {
        var waitUnmount = setInterval(function () {
            if (!Twenty.app.getState("storyIsMounted")) {
                Twenty.dom.setupAutofit();
                Twenty.app.setState("webviewIsMounted", true);
                clearInterval(waitUnmount);
            }
        }, 200);
    },

    componentWillUnmount: function componentWillUnmount() {
        Twenty.dom.teardownAutofit();
        Twenty.app.setState("webviewIsMounted", false);
    },

    render: function render() {
        return this.props.data.items.length > 0 && React.createElement(
            "div",
            { className: "webview-container" },
            this.props.data.items.map(function (element, i) {
                if (element.show.mobile === 1 && element.type === "webview") {
                    var iframeClasses = "webview autofit";
                    if (element.disableMaxHeight === 0) {
                        iframeClasses = iframeClasses += " max-height";
                    }
                    element.url += (element.url.indexOf("?") > -1 ? "&" : "?") + "webapp=true";
                    return React.createElement("iframe", { id: element.id, className: iframeClasses, src: element.url, key: this.iframekey + "_" + i });
                }
            }, this)
        );
    }
});

/**
 * @method Twenty.Components.zattoo
 * @memberof Twenty.Components
 * @param {Object} data
 * @param {Object} data.value
 * @param {number} data.value.channel_id the zattoo channel id number
 * @param {string} data.value.channel_logo full path to an image file for the channel logo
 * @param {string} data.value.preview_image_big full path to the video preview image
 */
/* istanbul ignore next */
Twenty.Components.zattoo = createReactClass({
    displayName: "zattoo",


    myNameIs: "zattoo",

    handleClick: function handleClick() {
        Twenty.app.setState("zattooChannel", this.props.data.value.channel_id);
        Twenty.app.controller.loadZattooPage(this.props.data.value.channel_id);
    },

    render: function render() {
        return React.createElement(
            "div",
            { className: "zattoo" },
            React.createElement("span", { className: "btn btn-play medium icon icon-play" }),
            React.createElement("img", { src: this.props.data.value.channel_logo, className: "channelImg" }),
            React.createElement("img", { src: this.props.data.value.preview_image_big, onClick: this.handleClick, className: "posterImg" })
        );
    }
});
//# sourceMappingURL=components.js.map
